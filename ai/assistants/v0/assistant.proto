syntax = "proto3";

// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package ai.assistants.v0;

import "ai/model.proto";
import "ai/type/list.proto";
import "buf/validate/validate.proto";
import "ai/assistants/v0/tools.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "githhub.com/peak6-sites/r2g2-apis/gen/go/ai/assistants/v0;assistantspb";

// buf:lint:ignore SERVICE_SUFFIX
// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
service Assistants {
  // Retrieves a list of chat engines and their available models.
  rpc ListEngines(ListEnginesRequest) returns (ListEnginesResponse);

  // Creates an Assistant.
  rpc CreateAssistant(CreateAssistantRequest) returns (Assistant);

  // Retrieves an Assistant by ID.
  rpc GetAssistant(GetAssistantRequest) returns (Assistant);

  // Lists Assistants.
  rpc ListAssistants(ListAssistantsRequest) returns (ListAssistantsResponse);

  // Updates an Assistant.
  rpc UpdateAssistant(UpdateAssistantRequest) returns (Assistant);

  // Deletes an Assistant.
  rpc DeleteAssistant(DeleteAssistantRequest) returns (google.protobuf.Empty);

  // Returns permissions that a caller has on the specified Assistant.
  // If the resource does not exist, this will return an empty set of
  // permissions, not a `NOT_FOUND` error.
  rpc TestAssistantPermissions(TestAssistantPermissionsRequest) returns (TestAssistantPermissionsResponse);

  // Creates a Thread.
  rpc CreateThread(CreateThreadRequest) returns (Thread);

  // Retrieves a Thread By ID.
  rpc GetThread(GetThreadRequest) returns (Thread);

  // Lists Threads.
  rpc ListThreads(ListThreadsRequest) returns (ListThreadsResponse);

  // Update a Thread.
  rpc UpdateThread(UpdateThreadRequest) returns (Thread);

  // Deletes a Thread.
  rpc DeleteThread(DeleteThreadRequest) returns (google.protobuf.Empty);

  // Snapshots a thread and marks it as shared.
  // Shared threads are immutable and can be viewed by all users that have been provided the ID.
  rpc ShareThread(ShareThreadRequest) returns (Thread);

  // Creates a Message in a Thread.
  rpc CreateMessage(CreateMessageRequest) returns (Message);

  // Retrieves a Message by ID.
  rpc GetMessage(GetMessageRequest) returns (Message);

  // Lists Messages in a Thread.
  rpc ListMessages(ListMessagesRequest) returns (ListMessagesResponse);

  // Creates a Thread and then creates a Run on that Thread.
  rpc CreateThreadAndRun(CreateThreadAndRunRequest) returns (Run);

  // Creates a Run on a Thread.
  rpc CreateRun(CreateRunRequest) returns (Run);

  // Retrieves a Run by ID.
  rpc GetRun(GetRunRequest) returns (Run);

  // Lists Runs.
  rpc ListRuns(ListRunsRequest) returns (ListRunsResponse);

  // Deletes a Run.
  rpc DeleteRun(DeleteRunRequest) returns (google.protobuf.Empty);

  // Streams the results generated by a Run.
  rpc StreamRunResults(StreamRunResultsRequest) returns (stream StreamRunResultsResponse);

  // Submits on or more responses to ToolCalls required by a Run.
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  rpc SubmitToolResponse(SubmitToolResponsesRequest) returns (google.protobuf.Empty);

  // Creates a feedback entry for a Run.
  rpc CreateRunFeedback(CreateRunFeedbackRequest) returns (RunFeedback);
}

// The direction that records should be sorted.
// buf:lint:ignore ENUM_VALUE_PREFIX
enum SortOrder {
  SORT_ORDER_UNSPECIFIED = 0;
  ASCENDING = 1;
  DESCENDING = 2;
}

// Request for the ListEngines method.
message ListEnginesRequest {
  // OPTIONAL. The engine to filter for.
  string engine = 1;

  // OPTIONAL. Filter for only recommended models.
  bool recommended = 2;

  // OPTIONAL. The input formats to filter for.
  repeated ai.Model.InputFormats input_formats = 3;

  // OPTIONAL. The tags to filter for.
  repeated ai.Model.Tag tags = 4;
}

// Response for the ListEngines method.
message ListEnginesResponse {
  // Describes an engine and its available models
  message EngineDescriptor {
    // The engine backend
    string engine = 1;

    // The list of models available to the engine
    repeated ai.Model models = 2;
  }

  // The list of engines and their available models
  repeated EngineDescriptor engines = 1;
}

message Assistant {
  string id = 1;
  string display_name = 2;
  string description = 3;
  string store_id = 4;
  string engine = 5;
  string model = 6;
  string instructions = 7;
  ModelSettings model_settings = 8;
  RetrievalSettings retrieval_settings = 9;

  // Enables citation generation for the Assistant.
  // If citations are enabled, the Assistant will generate citations for facts that were used when generating the response.
  // Citations require a store_id to be set.
  bool citations_enabled = 21;

  // A list of sub-assistants that this assistant will call.
  // Responses from sub-assistants will be combined and used as input to the main assistant.
  repeated string sub_assistants = 15;

  // Indicates that sub-assistants should be treated as tools rather than than fan-out.
  bool sub_assistants_as_tools = 16;

  // A list of tools that the assistant can call
  repeated Tool tools = 13;

  // EXPERIMENTAL. MCP Server to use for this Assistant.
  string mcp_server = 22;

  // JSON schema for the response.
  // Not all models support this feature. This field will be will be ignored if not supported.
  JsonSchemaResponseFormat response_json_schema = 19;

  // Indicates that the Assistant is certified by the Applied AI team.
  bool certified = 20;

  // Owner of the assistant
  // Deprecated: See `owners` field.
  string owner = 11 [
    deprecated = true
  ];

  // Owners of the Assistant
  // Owners are granted the ability to edit, delete, and upload to an Assistant.
  // The user that created the Assistant is set as the initial owner if owners are not set at create time.
  repeated string owners = 17;

  // Users that are allowed to upload to the Assistant's store.
  repeated string uploaders = 18;

  // List of viewers of the assistant
  // Values may be either:
  // - `domain:example.com` to allow all users in the domain to view the store
  // - `user:user@example.com` to allow a specific user to view the store
  repeated string viewers = 12;

  // Metadata associated with the assistant
  // This can be used to store additional information about the assistant.
  // Can be set on created but not updated.
  map<string, string> metadata = 14;

  google.protobuf.Timestamp create_time = 10;
}

// A schema specification for a JSON response.
message JsonSchemaResponseFormat {
  // REQUIRED. The JSON schema to use for the response.
  string schema = 2 [
    (buf.validate.field).cel = {
      id: "not-blank",
      message: "must not be blank",
      expression: "this.trim() != \"\""
    }
  ];

  // OPTIONAL. The description of the schema.
  // This may be used by the model to determine how to respond in the specified format.
  string description = 1;
}

message CreateAssistantRequest {
  string display_name = 1 [(buf.validate.field).string.min_len = 1];
  string description = 2  [(buf.validate.field).string.min_len = 1];
  string store_id = 3;
  string engine = 4       [(buf.validate.field).string.min_len = 1];
  string model = 5        [(buf.validate.field).string.min_len = 1];
  string instructions = 6;
  ModelSettings model_settings = 7;
  RetrievalSettings retrieval_settings = 8;

  // OPTIONAL. Enables citation generation for the Assistant.
  // If citations are enabled, the Assistant will generate citations for facts that were used when generating the response.
  // Citations require a store_id to be set.
  bool citations_enabled = 17;

  // A list of sub-assistants that this assistant may call.
  repeated string sub_assistants = 12;

  // Indicates that sub-assistants should be treated as tools rather than than fan-out.
  bool sub_assistants_as_tools = 13;

  // A list of tools that the assistant can call
  repeated Tool tools = 10;

  // EXPERIMENTAL. MCP Server to use for this Assistant.
  string mcp_server = 22;

  // OPTIONAL. JSON schema for the response.
  // Not all models support this feature. This field will be will be ignored if not supported.
  JsonSchemaResponseFormat response_json_schema = 16;

  // Owners of the Assistant
  // Owners are granted the ability to edit, delete, and upload to an Assistant.
  // The user that created the Assistant is set as the initial owner if owners are not set at create time.
  repeated string owners = 14;

  // Users that are allowed to upload to the Assistant's store.
  repeated string uploaders = 15;

  // List of viewers of the assistant
  // Values may be either:
  // - `domain:example.com` to allow all users in the domain to view the store
  // - `user:user@example.com` to allow a specific user to view the store
  repeated string viewers = 9 [
    (buf.validate.field).repeated.items.cel = {
      id: "format",
      message: "must be in the format 'domain:<domain>' or 'user:<email>'",
      expression:
          "this.startsWith(\"domain:\")"
              "|| (this.startsWith(\"user:\") && (this.replace(\"user:\",\"\")).isEmail())",
    }
  ];

  // Metadata associated with the assistant
  // This can be used to store additional information about the assistant.
  // Can be set on created but not updated.
  map<string, string> metadata = 11 [
    (buf.validate.field).map = {
      // Keys must be between 1-255 characters long and match the pattern
      keys: {
        string: {
          min_len: 1,
          max_len: 255,
          pattern: "^[a-zA-Z0-9]([a-zA-Z0-9-_.]*[a-zA-Z0-9])?$",
        }
      }
      // values must be between 0-64 characters long and match the pattern
      values: {
        string: {
          min_len: 0,
          max_len: 64,
          pattern: "^([a-zA-Z0-9]([a-zA-Z0-9-_.]*[a-zA-Z0-9])?)?$",
        }
      }
    }
  ];
}

message GetAssistantRequest {
  string id = 1 [
    (buf.validate.field).cel = {
      id: "non-empty",
      message: "must be non-empty",
      expression: "this != \"\""
    }
  ];
}

message ListAssistantsRequest {
  // OPTIONAL. Maximum number of assistants to return in a single page.
  // If unspecified, at most 50 will be returned. The maximum value is 100; values over
  // 100 will be coerced to 100.
  int32 page_size = 2;

  // OPTIONAL. Token of the previous call to ListAssistants used to retrieve the next page.
  // All other fields must match the previous call.
  string page_token = 3;

  // OPTIONAL. Store ID to filter for.
  string store_id = 1;

  // OPTIONAL. Metadata to filter for. Metadata keys and values are case-sensitive.
  // Metadata values are AND-ed together, so only records that have all the specified metadata will be returned.
  map<string, string> metadata = 4;

  // OPTIONAL. Filter for only certified Assistants.
  // Leaving this value empty or setting it to false will return all Assistants.
  bool certified = 5;
}

message ListAssistantsResponse {
  repeated Assistant assistants = 1;

  string next_page_token = 2;
}

// A request to update an assistant.
// Only fields that are set to non-zero values, or non-null in the case of `optional` fields, will be updated.
message UpdateAssistantRequest {
  // A list of owners. This is a wrapper type to allow for partial updates.
  // Values must be a list of users in the form `user:user@example.com`.
  message OwnerList {
    // Values of the list
    repeated string values = 1 [
      (buf.validate.field).repeated.min_items = 1,
      (buf.validate.field).repeated.items.cel = {
        id: "format",
        message: "must be in the format 'user:<email>'",
        expression:
                "this.startsWith(\"user:\") && this.replace(\"user:\",\"\").isEmail()",
      }
    ];
  }

  // A list of Uploaders. This is a wrapper type to allow for partial updates.
  // Values may be either:
  // - `domain:example.com` to allow all users in the domain to upload to the store
  // - `user:user@example.com` to allow a specific user to upload to the store
  message UploaderList {
    // Values of the list
    repeated string values = 1 [
      (buf.validate.field).repeated.items.cel = {
        id: "format",
        message: "must be in the format 'domain:<domain>' or 'user:<email>'",
        expression:
            "this.startsWith(\"domain:\")"
            "|| (this.startsWith(\"user:\") && this.replace(\"user:\",\"\").isEmail())",
      }
    ];
  }

  // A list of Viewers. This is a wrapper type to allow for partial updates.
  // Values may be either:
  // - `domain:example.com` to allow all users in the domain to view the store
  // - `user:user@example.com` to allow a specific user to view the store
  message ViewerList {
    // Values of the list
    repeated string values = 1 [
      (buf.validate.field).repeated.items.cel = {
        id: "format",
        message: "must be in the format 'domain:<domain>' or 'user:<email>'",
        expression:
            "this.startsWith(\"domain:\")"
                "|| (this.startsWith(\"user:\") && this.replace(\"user:\",\"\").isEmail())",
      }
    ];
  }

  // A set of metadata. This is a wrapper type to allow for partial updates.
  message Metadata {
    // Metadata values
    map<string, string> values = 1 [
      (buf.validate.field).map = {
        // Keys must be between 1-255 characters long and match the pattern
        keys: {
          string: {
            min_len: 1,
            max_len: 255,
            pattern: "^[a-zA-Z0-9]([a-zA-Z0-9-_.]*[a-zA-Z0-9])?$",
          }
        }
        // values must be between 0-64 characters long and match the pattern
        values: {
          string: {
            min_len: 0,
            max_len: 64,
            pattern: "^([a-zA-Z0-9]([a-zA-Z0-9-_.]*[a-zA-Z0-9])?)?$",
          }
        }
      }
    ];
  }

  string id = 1 [
    (buf.validate.field).cel = {
      id: "non-empty",
      message: "must be non-empty",
      expression: "this != \"\""
    }
  ];

  // The display name of the assistant
  string display_name = 10;

  string description = 8;
  string store_id = 2;
  string engine = 3;
  string model = 4;
  string instructions = 5;
  ModelSettings model_settings = 6;
  RetrievalSettings retrieval_settings = 7;

  // OPTIONAL. Enables citation generation for the Assistant.
  // If citations are enabled, the Assistant will generate citations for facts that were used when generating the response.
  // Citations require a store_id to be set.
  optional bool citations_enabled = 16;

  // OPTIONAL. A list of sub-assistants that this assistant may call.
  ai.type.StringList sub_assistants = 14;

  // OPTIONAL. Indicates that sub-assistants should be treated as tools rather than than fan-out.
  optional bool sub_assistants_as_tools = 15;

  // Metadata associated with the Assistant.
  Metadata metadata = 13;

  // A list of tools that the assistant can call
  Tools tools = 17;

  // EXPERIMENTAL. MCP Server to use for this Assistant.
  optional string mcp_server = 22;

  // OPTIONAL. JSON schema for the response.
  // Not all models support this feature. This field will be will be ignored if not supported.
  JsonSchemaResponseFormat response_json_schema = 18;

  // List of Owners to update on the Assistant
  OwnerList owners = 11;

  // List of uploaders to update on the Assistant.
  UploaderList uploaders = 12;

  // List of viewers of the assistant
  ViewerList viewers = 9;
}

message Tools {
  repeated Tool tools = 1;
}

message DeleteAssistantRequest {
  string id = 1 [
    (buf.validate.field).cel = {
      id: "non-empty",
      message: "must be non-empty",
      expression: "this != \"\""
    }
  ];
}

// Request message for `TestAssistantPermissions` method.
message TestAssistantPermissionsRequest {
  // REQUIRED: The ID of the Assistant to test permissions for.
  string id = 1 [
    (buf.validate.field).cel = {
      id: "non-empty",
      message: "must be non-empty",
      expression: "this != \"\""
    }
  ];

  // REQUIRED: The set of permissions to test.
  // Currently supported permissions are:
  // - `assistant.edit`: Allows the user to edit the properties of the Assistant.
  // - `assistant.delete`: Allows the user to delete the Assistant.
  // - `assistant.upload`: Allows the user to upload files to the Assistant.
  // - `assistant.view`: Allows the user to view the Assistant.
  repeated string permissions = 2 [
    (buf.validate.field).repeated.min_items = 1
  ];
}

// Response message for `TestAssistantPermissions` method.
message TestAssistantPermissionsResponse {
  // The set of permissions that the user has on the Assistant.
  repeated string permissions = 1;
}

// A thread of messages
message Thread {
  // Unique identifier for the Thread.
  string id = 1;

  // A description of the Thread.
  string description = 4;

  // The origin of the Thread.
  // This is used to indicate whether the thread was created by Slack, the UI, or another source.
  string origin = 5;

  // Metadata associated with the Thread.
  map<string, string> metadata = 2;

  // Time the thread was created.
  google.protobuf.Timestamp create_time = 3;
}

// Request message for creating a Thread.
message CreateThreadRequest {
  // Optional. A description of the Thread.
  // If no description is provided, the first 60 characters of the first message will be used.
  string description = 3;

  // Optional. Messages to add to the Thread on creation.
  repeated CreateMessageRequest messages = 1;

  // Optional. Metadata associated with the Thread. This can be used to store additional
  // information about the Thread. Can be set on create but not updated.
  map<string, string> metadata = 2 [
    (buf.validate.field).map = {
      // Keys must be between 1-255 characters long and match the pattern
      keys: {
        string: {
          min_len: 1,
          max_len: 255,
          pattern: "^[a-zA-Z0-9]([a-zA-Z0-9-_.]*[a-zA-Z0-9])?$",
        }
      }
      // values must be between 0-64 characters long and match the pattern
      values: {
        string: {
          min_len: 0,
          max_len: 64,
          pattern: "^([a-zA-Z0-9]([a-zA-Z0-9-_.]*[a-zA-Z0-9])?)?$",
        }
      }
    }
  ];
}

message GetThreadRequest {
  string id = 1;
}

// Request message for the `ListThreads` method.
message ListThreadsRequest {
  // OPTIONAL. Maximum number of assistants to return in a single page.
  // If unspecified, at most 50 will be returned. The maximum value is 100; values over
  // 100 will be coerced to 100.
  int32 page_size = 1;

  // OPTIONAL. Token of the previous call to ListThreads used to retrieve the next page.
  // All other fields must match the previous call.
  string page_token = 2;

  // OPTIONAL. The origin of the Thread to filter for.
  string origin = 5;

  // OPTIONAL. Metadata to filter for. Metadata keys and values are case-sensitive.
  // Metadata values are AND-ed together, so only records that have all the specified metadata will be returned.
  map<string, string> metadata = 3;

  // OPTIONAL. The direction to sort the returned records.
  // If unspecified, records will be returned in ascending order.
  // Records are sorted by the `create_time` field.
  SortOrder order = 4;
}

// Response message for the `ListThreads` method.
message ListThreadsResponse {
  repeated Thread threads = 1;
  string next_page_token = 2;
}

// Request for the `UpdateThread` method.
message UpdateThreadRequest {
  // A set of metadata. This is a wrapper type to allow for partial updates.
  message Metadata {
    // Metadata values
    map<string, string> values = 1 [
      (buf.validate.field).map = {
        // Keys must be between 1-255 characters long and match the pattern
        keys: {
          string: {
            min_len: 1,
            max_len: 255,
            pattern: "^[a-zA-Z0-9]([a-zA-Z0-9-_.]*[a-zA-Z0-9])?$",
          }
        }
        // values must be between 0-64 characters long and match the pattern
        values: {
          string: {
            min_len: 0,
            max_len: 64,
            pattern: "^([a-zA-Z0-9]([a-zA-Z0-9-_.]*[a-zA-Z0-9])?)?$",
          }
        }
      }
    ];
  }

  // REQUIRED. The ID of the Thread to update.
  string id = 1 [
    (buf.validate.field).cel = {
      id: "non-empty",
      message: "must be non-empty",
      expression: "this != \"\""
    }
  ];

  // OPTIONAL. A description of the Thread.
  string description = 2;

  // OPTIONAL. Metadata associated with the Thread.
  Metadata metadata = 3;
}

message DeleteThreadRequest {
  string id = 1;
}

// Request message for the `ShareThread` method.
message ShareThreadRequest {
  string id = 1;
}

// buf:lint:ignore ENUM_VALUE_PREFIX
enum Role {
  ROLE_UNSPECIFIED = 0;
  USER = 1;
  ASSISTANT = 2;
}

// A file attachment
message File {
  // The source of the file
  oneof source {
    // Self ref of a file uploaded to the file-server
    string ref = 1;
  }
}

message Image {
  message Data {
    string media_type = 1;
    bytes data = 2;
  }

  oneof source {
    string url = 1;
    Data data = 2;
  }
}

message MessageContent {
  message Citation {
    // The tag in the generated text that indicates the position of the Citation.
    string tag = 1;

    // The display name of the source document referenced by the citation.
    string display_name = 2;

    // The URL of the source document referenced by the citation.
    string url = 3;

    // Metadata of the source document referenced by the citation.
    map<string, string> metadata = 4;
  }

  oneof content {
    string text = 1;
    Image image = 2;
    File file = 3;
  }

  // The set of citations for this message content.
  // Only set for text content.
  repeated Citation citations = 4;
}

message Message {
  // buf:lint:ignore ENUM_VALUE_PREFIX
  enum State {
    STATE_UNSPECIFIED = 0;
    PENDING = 1;
    GENERATING = 2;
    COMPLETED = 3;
  }

  string id = 1;
  Role role = 2;
  repeated MessageContent content = 3;
  map<string, string> metadata = 4;

  // State of the message.
  // Deprecated: Will always be set as COMPLETED.
  State state = 5 [
    deprecated = true
  ];

  google.protobuf.Timestamp create_time = 6;
  google.protobuf.Timestamp modify_time = 7;
  string run_id = 8;
}

message ModelSettings {
  optional uint32 max_tokens = 1;
  optional float temperature = 2;
}

message RetrievalSettings {
  optional int32 top_k = 1;
  optional float min_relevance_score = 4;
}

message CreateMessageRequest {
  message Attachment {
    oneof content {
      Image image = 1;
      File file = 2;
    }
  }

  string thread_id = 1;

  Role role = 2 [(buf.validate.field).cel = {
    id: "non-zero",
    message: "must be non-zero",
    expression: "this != 0"
  }];

  string content = 3 [(buf.validate.field).cel = {
    id: "non-empty",
    message: "must be non-empty",
    expression: "this != \"\""
  }];

  repeated Attachment attachments = 4;

  // Optional. Metadata associated with the Message. This can be used to store additional
  // information about the Message. Can be set on create but not updated.
  map<string, string> metadata = 5 [
    (buf.validate.field).map = {
      // Keys must be between 1-255 characters long and match the pattern
      keys: {
        string: {
          min_len: 1,
          max_len: 255,
          pattern: "^[a-zA-Z0-9]([a-zA-Z0-9-_.]*[a-zA-Z0-9])?$",
        }
      }
      // values must be between 0-64 characters long and match the pattern
      values: {
        string: {
          min_len: 0,
          max_len: 64,
          pattern: "^([a-zA-Z0-9]([a-zA-Z0-9-_.]*[a-zA-Z0-9])?)?$",
        }
      }
    }
  ];
}

message GetMessageRequest {
  string thread_id = 1;
  string message_id = 2;
}

message ListMessagesRequest {
  // REQUIRED. The thread to list messages for.
  string thread_id = 1;

  // OPTIONAL. Maximum number of assistants to return in a single page.
  // If unspecified, at most 50 will be returned. The maximum value is 100; values over
  // 1000 will be coerced to 1000.
  int32 page_size = 2;

  // OPTIONAL. Token of the previous call to ListMessages used to retrieve the next page.
  // All other fields must match the previous call.
  string page_token = 3;

  // OPTIONAL. The direction to sort the returned records.
  // If unspecified, records will be returned in ascending order.
  // Records are sorted by the `create_time` field.
  SortOrder order = 6;

  // OPTIONAL. The ID of the Run to filter for.
  string run_id = 5;

  // OPTIONAL. Metadata to filter for. Metadata keys and values are case-sensitive.
  // Metadata values are AND-ed together, so only records that have all the specified metadata will be returned.
  map<string, string> metadata = 4;
}

message ListMessagesResponse {
  repeated Message messages = 1;
  string next_page_token = 2;
}

message SourceFact {
  string text = 1;
  map<string, string> metadata = 2;
}

message Run {
  // The enumeration of states that a Run may be in.
  // buf:lint:ignore ENUM_VALUE_PREFIX
  enum State {
    STATE_UNSPECIFIED = 0;
    // The Run is pending execution.
    PENDING = 1;
    // The Run is currently executing.
    RUNNING = 2;
    // The Run has completed successfully.
    SUCCEEDED = 3;
    // The Run has failed with an error. See the `failure_reason` field for details.
    FAILED = 4;
    // The Run has yielded and requires a tool response as input from the user to proceed.
    TOOL_RESPONSE_REQUIRED = 5;
  }

  // A citation to a fact in the source text
  // Deprecated: Superseded by the `Citation` message on `MessageContent`.
  message Citation {
    option deprecated = true;

    message Position {
      int32 start_offset = 1;
      int32 end_offset = 2;
    }

    // The position in the source text where the fact is located
    Position position = 1;

    // The index of the fact in the source text
    int32 source = 2;
  }

  // A document that was provided as context to the LLM run via RAG retrieval
  message ContextDocument {
    // The full name of the file
    string filename = 1;

    // Display name of the file
    string display_name = 4;

    // The url to download/view the file
    string url = 2;

    // A trailer containing additional metadata about the document, such as pages
    string trailer = 3;
  }

  string id = 1;
  string thread_id = 2;
  string assistant_id = 3;
  string store_id = 4;
  string engine = 5;
  string model = 6;
  string instructions = 7;
  ModelSettings model_settings = 8;
  RetrievalSettings retrieval_settings = 9;

  // Enables citation generation for the Assistant.
  // If citations are enabled, the Assistant will generate citations for facts that were used when generating the response.
  // Citations require a store_id to be set.
  bool citations_enabled = 24;

  // A list of sub-assistants that will be invoked by this Run.
  // Responses from sub-assistants will be combined and used as input to the primary assistant specified on this Run.
  repeated string sub_assistants = 19;

  // A list of Run IDs for Runs created by Sub-Assistants.
  repeated string child_run_ids = 25;

  // Indicates that sub-assistants should be treated as tools rather than than fan-out
  bool sub_assistants_as_tools = 20;

  // Metadata associated with the run
  map<string, string> metadata = 15;

  // The set of tools that the model can call
  repeated Tool tools = 17;

  // EXPERIMENTAL. MCP Server to use for this Run.
  string mcp_server = 26;

  // The set of tool calls that have been made during the run
  repeated ToolCall tool_calls = 18;

  // JSON schema for the response.
  // Not all models support this feature. This field will be will be ignored if not supported.
  JsonSchemaResponseFormat response_json_schema = 21;

  // The current state of the Run.
  State state = 10;

  // The reason the Run failed. Only set when the state is `FAILED`.
  string failure_reason = 11;

  // Documents provided to the LLM run as context
  repeated ContextDocument context_documents = 16;

  // Facts used in the Run
  repeated SourceFact source_facts = 22;

  // Citations to facts referenced in the generated response.
  // Deprecated: Superseded by the `citations` field on `MessageContent`.
  repeated Citation citations = 23 [
    deprecated = true
  ];

  google.protobuf.Timestamp create_time = 12;
  google.protobuf.Timestamp start_time = 13;
  google.protobuf.Timestamp end_time = 14;
}

// Request message for the `CreateThreadAndRun` method.
message CreateThreadAndRunRequest {
  // REQUIRED. Configuration for the Thread to create.
  CreateThreadRequest thread = 1;

  // REQUIRED. ID of the Assistant to execute.
  string assistant_id = 2 [
    (buf.validate.field).cel = {
      id: "non-empty",
      message: "must be non-empty",
      expression: "this != \"\""
    }
  ];

  //
  // The following fields are OPTIONAL. Some may be used to override settings provided by the Assistant on a per-Run basis.
  //

  // OPTIONAL. The chat engine to use for this Run.
  string engine = 3;

  // OPTIONAL. The model to use for this Run.
  string model = 4;

  // OPTIONAL. The system instructions to use for this Run. This completely overrides the instructions provided by the
  // Assistant.
  string instructions = 5;

  // OPTIONAL. Additional system instructions to use for this Run. These will be appended to the instructions provided
  // by the Assistant or in the `instructions` field on this Run.
  string additional_instructions = 6;

  // OPTIONAL. Settings provided to the model for this Run.
  ModelSettings model_settings = 7;

  // OPTIONAL. Settings used to control RAG behavior for this Run.
  RetrievalSettings retrieval_settings = 8;

  // OPTIONAL. Enables citation generation for the Run. If not specified on the run, the value from the Assistant will be used.
  // If citations are enabled, the Assistant will generate citations for facts that were used when generating the response.
  // Citations require a store_id to be set.
  optional bool citations_enabled = 12;

  // OPTIONAL. The set of tools that should be used for this run
  // This will override the assistant's default tools
  repeated Tool tools = 10;

  // OPTIONAL. MCP Server ID to use for the Run.
  optional string mcp_server = 13;

  // OPTIONAL. JSON schema for the response.
  // Not all models support this feature. This field will be will be ignored if not supported.
  JsonSchemaResponseFormat response_json_schema = 11;

  // OPTIONAL. Metadata associated with the Run. This can be used to store additional
  // information about the Run. Can be set on create but not updated.
  map<string, string> metadata = 9 [
    (buf.validate.field).map = {
      // Keys must be between 1-255 characters long and match the pattern
      keys: {
        string: {
          min_len: 1,
          max_len: 255,
          pattern: "^[a-zA-Z0-9]([a-zA-Z0-9-_.]*[a-zA-Z0-9])?$",
        }
      }
      // values must be between 0-64 characters long and match the pattern
      values: {
        string: {
          min_len: 0,
          max_len: 64,
          pattern: "^([a-zA-Z0-9]([a-zA-Z0-9-_.]*[a-zA-Z0-9])?)?$",
        }
      }
    }
  ];

  option (buf.validate.message).cel = {
    id: "thread.messages",
    message: "thread must contain at least one message",
    expression: "this.thread.messages.size() > 0"
  };
}

// Request message for the `CreateRun` method.
message CreateRunRequest {
  // REQUIRED. The ID of the Thread to create the Run on.
  string thread_id = 1 [
    (buf.validate.field).cel = {
      id: "non-empty",
      message: "must be non-empty",
      expression: "this != \"\""
    }
  ];

  // REQUIRED. The ID of the Assistant to execute.
  string assistant_id = 2 [
    (buf.validate.field).cel = {
      id: "non-empty",
      message: "must be non-empty",
      expression: "this != \"\""
    }
  ];

  //
  // The following fields are OPTIONAL. Some may be used to override settings provided by the Assistant on a per-Run basis.
  //

  // OPTIONAL. The chat engine to use for this Run.
  string engine = 3;

  // OPTIONAL. The model to use for this Run.
  string model = 4;

  // OPTIONAL. The system instructions to use for this Run. This completely overrides the instructions provided by the
  // Assistant.
  string instructions = 5;

  // OPTIONAL. Additional system instructions to use for this Run. These will be appended to the instructions provided
  // by the Assistant or in the `instructions` field on this Run.
  string additional_instructions = 6;

  // OPTIONAL. Settings provided to the model for this Run.
  ModelSettings model_settings = 8;

  // OPTIONAL. Settings used to control RAG behavior for this Run.
  RetrievalSettings retrieval_settings = 9;

  // OPTIONAL. Enables citation generation for the Run. If not specified on the run, the value from the Assistant will be used.
  // If citations are enabled, the Assistant will generate citations for facts that were used when generating the response.
  // Citations require a store_id to be set.
  optional bool citations_enabled = 13;

  // OPTIONAL. The set of tools that should be used for this run
  // This will override the assistant's default tools
  repeated Tool tools = 11;

  // OPTIONAL. MCP Server ID to use for the Run.
  optional string mcp_server = 14;

  // OPTIONAL. JSON schema for the response.
  // Not all models support this feature. This field will be will be ignored if not supported.
  JsonSchemaResponseFormat response_json_schema = 12;

  // OPTIONAL. Additional Messages to append to the Thread prior to executing the Run.
  repeated CreateMessageRequest additional_messages = 7;

  // OPTIONAL. Metadata associated with the Run. This can be used to store additional
  // information about the Run. Can be set on create but not updated.
  map<string, string> metadata = 10 [
    (buf.validate.field).map = {
      // Keys must be between 1-255 characters long and match the pattern
      keys: {
        string: {
          min_len: 1,
          max_len: 255,
          pattern: "^[a-zA-Z0-9]([a-zA-Z0-9-_.]*[a-zA-Z0-9])?$",
        }
      }
      // values must be between 0-64 characters long and match the pattern
      values: {
        string: {
          min_len: 0,
          max_len: 64,
          pattern: "^([a-zA-Z0-9]([a-zA-Z0-9-_.]*[a-zA-Z0-9])?)?$",
        }
      }
    }
  ];
}

message GetRunRequest {
  string id = 1 [
    (buf.validate.field).cel = {
      id: "non-empty",
      message: "must be non-empty",
      expression: "this != \"\""
    }
  ];
}

message ListRunsRequest {
  // Optional. Maximum number of assistants to return in a single page.
  // If unspecified, at most 50 will be returned. The maximum value is 100; values over
  // 100 will be coerced to 100.
  int32 page_size = 3;

  // Optional. Token of the previous call to ListAssistants used to retrieve the next page.
  // All other fields must match the previous call.
  string page_token = 4;

  // Optional. The assistant ID to filter for.
  string assistant_id = 1;

  // Optional. The thread ID to filter for.
  string thread_id = 2;

  // Optional. Metadata to filter for. Metadata keys and values are case-sensitive.
  // Metadata values are AND-ed together, so only records that have all the specified metadata will be returned.
  map<string, string> metadata = 5;
}

message ListRunsResponse {
  repeated Run runs = 1;
  string next_page_token = 2;
}

message DeleteRunRequest {
  string id = 1 [
    (buf.validate.field).cel = {
      id: "non-empty",
      message: "must be non-empty",
      expression: "this != \"\""
    }
  ];
}

message StreamRunResultsRequest {
  string run_id = 1 [
    (buf.validate.field).cel = {
      id: "non-empty",
      message: "must be non-empty",
      expression: "this != \"\""
    }
  ];
  google.protobuf.Timestamp start_time = 2;
}

message StreamRunResultsResponse {
  Message message = 1;
  google.protobuf.Timestamp event_time = 2;
}

message SubmitToolResponsesRequest {

  // A response from the user to a ToolCall returned by a Run
  message ToolResponse {
    // The ID of the ToolCall being responded to
    string tool_call_id = 1 [
      (buf.validate.field).cel = {
        id: "non-empty",
        message: "must be non-empty",
        expression: "this != \"\""
      }
    ];

    // Indicates that the tool call failed
    bool error = 2;

    // The content of the tool response
    string text = 3 [
      (buf.validate.field).cel = {
        id: "non-empty",
        message: "must be non-empty",
        expression: "this != \"\""
      }
    ];
  }

  // The ID of the Run containing the ToolCalls to respond to
  string run_id = 1 [
    (buf.validate.field).cel = {
      id: "non-empty",
      message: "must be non-empty",
      expression: "this != \"\""
    }
  ];

  // The responses to the ToolCalls
  repeated ToolResponse responses = 2 [
    (buf.validate.field).required = true
  ];
}

// Request to provide feedback on a Run
message CreateRunFeedbackRequest {
  // Allowed rating values.
  // buf:lint:ignore ENUM_VALUE_PREFIX
  enum Rating {
    RATING_UNSPECIFIED = 0;
    POSITIVE = 1;
    NEGATIVE = 2;
    NEUTRAL = 3;
  }

  // REQUIRED: The ID of the Run that feedback is being provided for.
  string run_id = 1 [
    (buf.validate.field).cel = {
      id: "non-empty",
      message: "must be non-empty",
      expression: "this != \"\""
    }
  ];

  // REQUIRED: The rating of the Run.
  Rating rating = 2 [
    (buf.validate.field).cel = {
      id: "non-zero",
      message: "must be non-zero",
      expression: "this != 0"
    }
  ];

  // OPTIONAL: The reason for the rating.
  string reason = 3;

  // OPTIONAL: Additional feedback comment.
  string comment = 4;
}

// A feedback entry for a Run
message RunFeedback {
  // The ID of the Run Feedback entry
  string id = 1;
}
