// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ai/rag/v0/stores.proto

// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package ragpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v0 "github.com/peak6-sites/r2g2-apis/gen/go/ai/rag/v0"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StoresName is the fully-qualified name of the Stores service.
	StoresName = "ai.rag.v0.Stores"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StoresListIndexFilesProcedure is the fully-qualified name of the Stores's ListIndexFiles RPC.
	StoresListIndexFilesProcedure = "/ai.rag.v0.Stores/ListIndexFiles"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	storesServiceDescriptor              = v0.File_ai_rag_v0_stores_proto.Services().ByName("Stores")
	storesListIndexFilesMethodDescriptor = storesServiceDescriptor.Methods().ByName("ListIndexFiles")
)

// StoresClient is a client for the ai.rag.v0.Stores service.
type StoresClient interface {
	ListIndexFiles(context.Context, *connect.Request[v0.ListIndexFilesRequest]) (*connect.Response[v0.ListIndexFilesResponse], error)
}

// NewStoresClient constructs a client for the ai.rag.v0.Stores service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStoresClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StoresClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &storesClient{
		listIndexFiles: connect.NewClient[v0.ListIndexFilesRequest, v0.ListIndexFilesResponse](
			httpClient,
			baseURL+StoresListIndexFilesProcedure,
			connect.WithSchema(storesListIndexFilesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// storesClient implements StoresClient.
type storesClient struct {
	listIndexFiles *connect.Client[v0.ListIndexFilesRequest, v0.ListIndexFilesResponse]
}

// ListIndexFiles calls ai.rag.v0.Stores.ListIndexFiles.
func (c *storesClient) ListIndexFiles(ctx context.Context, req *connect.Request[v0.ListIndexFilesRequest]) (*connect.Response[v0.ListIndexFilesResponse], error) {
	return c.listIndexFiles.CallUnary(ctx, req)
}

// StoresHandler is an implementation of the ai.rag.v0.Stores service.
type StoresHandler interface {
	ListIndexFiles(context.Context, *connect.Request[v0.ListIndexFilesRequest]) (*connect.Response[v0.ListIndexFilesResponse], error)
}

// NewStoresHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStoresHandler(svc StoresHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storesListIndexFilesHandler := connect.NewUnaryHandler(
		StoresListIndexFilesProcedure,
		svc.ListIndexFiles,
		connect.WithSchema(storesListIndexFilesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ai.rag.v0.Stores/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StoresListIndexFilesProcedure:
			storesListIndexFilesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStoresHandler returns CodeUnimplemented from all methods.
type UnimplementedStoresHandler struct{}

func (UnimplementedStoresHandler) ListIndexFiles(context.Context, *connect.Request[v0.ListIndexFilesRequest]) (*connect.Response[v0.ListIndexFilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.rag.v0.Stores.ListIndexFiles is not implemented"))
}
