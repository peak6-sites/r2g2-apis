// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ai/audio/v0/transcriber.proto

// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package audiopbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v0 "github.com/peak6-sites/r2g2-apis/gen/go/ai/audio/v0"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TranscriberName is the fully-qualified name of the Transcriber service.
	TranscriberName = "ai.audio.v0.Transcriber"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TranscriberTranscribeProcedure is the fully-qualified name of the Transcriber's Transcribe RPC.
	TranscriberTranscribeProcedure = "/ai.audio.v0.Transcriber/Transcribe"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	transcriberServiceDescriptor          = v0.File_ai_audio_v0_transcriber_proto.Services().ByName("Transcriber")
	transcriberTranscribeMethodDescriptor = transcriberServiceDescriptor.Methods().ByName("Transcribe")
)

// TranscriberClient is a client for the ai.audio.v0.Transcriber service.
type TranscriberClient interface {
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	Transcribe(context.Context, *connect.Request[v0.TranscribeRequest]) (*connect.Response[v0.Transcription], error)
}

// NewTranscriberClient constructs a client for the ai.audio.v0.Transcriber service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTranscriberClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TranscriberClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &transcriberClient{
		transcribe: connect.NewClient[v0.TranscribeRequest, v0.Transcription](
			httpClient,
			baseURL+TranscriberTranscribeProcedure,
			connect.WithSchema(transcriberTranscribeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// transcriberClient implements TranscriberClient.
type transcriberClient struct {
	transcribe *connect.Client[v0.TranscribeRequest, v0.Transcription]
}

// Transcribe calls ai.audio.v0.Transcriber.Transcribe.
func (c *transcriberClient) Transcribe(ctx context.Context, req *connect.Request[v0.TranscribeRequest]) (*connect.Response[v0.Transcription], error) {
	return c.transcribe.CallUnary(ctx, req)
}

// TranscriberHandler is an implementation of the ai.audio.v0.Transcriber service.
type TranscriberHandler interface {
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	Transcribe(context.Context, *connect.Request[v0.TranscribeRequest]) (*connect.Response[v0.Transcription], error)
}

// NewTranscriberHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTranscriberHandler(svc TranscriberHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	transcriberTranscribeHandler := connect.NewUnaryHandler(
		TranscriberTranscribeProcedure,
		svc.Transcribe,
		connect.WithSchema(transcriberTranscribeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ai.audio.v0.Transcriber/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TranscriberTranscribeProcedure:
			transcriberTranscribeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTranscriberHandler returns CodeUnimplemented from all methods.
type UnimplementedTranscriberHandler struct{}

func (UnimplementedTranscriberHandler) Transcribe(context.Context, *connect.Request[v0.TranscribeRequest]) (*connect.Response[v0.Transcription], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.audio.v0.Transcriber.Transcribe is not implemented"))
}
