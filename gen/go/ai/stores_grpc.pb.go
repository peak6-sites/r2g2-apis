// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ai/stores.proto

// buf:lint:ignore PACKAGE_VERSION_SUFFIX

package ai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Stores_CreateStore_FullMethodName          = "/ai.Stores/CreateStore"
	Stores_GetStore_FullMethodName             = "/ai.Stores/GetStore"
	Stores_ListStores_FullMethodName           = "/ai.Stores/ListStores"
	Stores_UpdateStore_FullMethodName          = "/ai.Stores/UpdateStore"
	Stores_DeleteStore_FullMethodName          = "/ai.Stores/DeleteStore"
	Stores_GetStoreConfig_FullMethodName       = "/ai.Stores/GetStoreConfig"
	Stores_UploadFile_FullMethodName           = "/ai.Stores/UploadFile"
	Stores_UploadFileUnary_FullMethodName      = "/ai.Stores/UploadFileUnary"
	Stores_GetFile_FullMethodName              = "/ai.Stores/GetFile"
	Stores_ListFiles_FullMethodName            = "/ai.Stores/ListFiles"
	Stores_DeleteFile_FullMethodName           = "/ai.Stores/DeleteFile"
	Stores_TestStorePermissions_FullMethodName = "/ai.Stores/TestStorePermissions"
)

// StoresClient is the client API for Stores service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoresClient interface {
	// Creates a new store for users to upload files to
	CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*Store, error)
	// Gets the current state of a store
	GetStore(ctx context.Context, in *GetStoreRequest, opts ...grpc.CallOption) (*Store, error)
	// Lists the available stores
	ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error)
	// Updates the state of a store
	UpdateStore(ctx context.Context, in *UpdateStoreRequest, opts ...grpc.CallOption) (*Store, error)
	// Deletes a store and all of its files
	DeleteStore(ctx context.Context, in *DeleteStoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets the configuration of a store
	GetStoreConfig(ctx context.Context, in *GetStoreConfigRequest, opts ...grpc.CallOption) (*StoreConfig, error)
	// Initiates the process of uploading a file to a store
	// The server will respond with an event indicating where the file should be uploaded
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (Stores_UploadFileClient, error)
	// Initiates the process of uploading a file to a store
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	UploadFileUnary(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileUnaryResponse, error)
	// Gets the current state of a file in a store
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*File, error)
	// Lists the files in a store
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	// Deletes a file from a store
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns permissions that a call has on the specified Store.
	// If the resource does not exist, the response will return an empty set of
	// permissions, not a `NOT_FOUND` error.
	TestStorePermissions(ctx context.Context, in *TestStorePermissionsRequest, opts ...grpc.CallOption) (*TestStorePermissionsResponse, error)
}

type storesClient struct {
	cc grpc.ClientConnInterface
}

func NewStoresClient(cc grpc.ClientConnInterface) StoresClient {
	return &storesClient{cc}
}

func (c *storesClient) CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*Store, error) {
	out := new(Store)
	err := c.cc.Invoke(ctx, Stores_CreateStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storesClient) GetStore(ctx context.Context, in *GetStoreRequest, opts ...grpc.CallOption) (*Store, error) {
	out := new(Store)
	err := c.cc.Invoke(ctx, Stores_GetStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storesClient) ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error) {
	out := new(ListStoresResponse)
	err := c.cc.Invoke(ctx, Stores_ListStores_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storesClient) UpdateStore(ctx context.Context, in *UpdateStoreRequest, opts ...grpc.CallOption) (*Store, error) {
	out := new(Store)
	err := c.cc.Invoke(ctx, Stores_UpdateStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storesClient) DeleteStore(ctx context.Context, in *DeleteStoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Stores_DeleteStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storesClient) GetStoreConfig(ctx context.Context, in *GetStoreConfigRequest, opts ...grpc.CallOption) (*StoreConfig, error) {
	out := new(StoreConfig)
	err := c.cc.Invoke(ctx, Stores_GetStoreConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storesClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (Stores_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stores_ServiceDesc.Streams[0], Stores_UploadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &storesUploadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stores_UploadFileClient interface {
	Recv() (*UploadFileEvent, error)
	grpc.ClientStream
}

type storesUploadFileClient struct {
	grpc.ClientStream
}

func (x *storesUploadFileClient) Recv() (*UploadFileEvent, error) {
	m := new(UploadFileEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storesClient) UploadFileUnary(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileUnaryResponse, error) {
	out := new(UploadFileUnaryResponse)
	err := c.cc.Invoke(ctx, Stores_UploadFileUnary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storesClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, Stores_GetFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storesClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, Stores_ListFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storesClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Stores_DeleteFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storesClient) TestStorePermissions(ctx context.Context, in *TestStorePermissionsRequest, opts ...grpc.CallOption) (*TestStorePermissionsResponse, error) {
	out := new(TestStorePermissionsResponse)
	err := c.cc.Invoke(ctx, Stores_TestStorePermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoresServer is the server API for Stores service.
// All implementations must embed UnimplementedStoresServer
// for forward compatibility
type StoresServer interface {
	// Creates a new store for users to upload files to
	CreateStore(context.Context, *CreateStoreRequest) (*Store, error)
	// Gets the current state of a store
	GetStore(context.Context, *GetStoreRequest) (*Store, error)
	// Lists the available stores
	ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error)
	// Updates the state of a store
	UpdateStore(context.Context, *UpdateStoreRequest) (*Store, error)
	// Deletes a store and all of its files
	DeleteStore(context.Context, *DeleteStoreRequest) (*emptypb.Empty, error)
	// Gets the configuration of a store
	GetStoreConfig(context.Context, *GetStoreConfigRequest) (*StoreConfig, error)
	// Initiates the process of uploading a file to a store
	// The server will respond with an event indicating where the file should be uploaded
	UploadFile(*UploadFileRequest, Stores_UploadFileServer) error
	// Initiates the process of uploading a file to a store
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	UploadFileUnary(context.Context, *UploadFileRequest) (*UploadFileUnaryResponse, error)
	// Gets the current state of a file in a store
	GetFile(context.Context, *GetFileRequest) (*File, error)
	// Lists the files in a store
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	// Deletes a file from a store
	DeleteFile(context.Context, *DeleteFileRequest) (*emptypb.Empty, error)
	// Returns permissions that a call has on the specified Store.
	// If the resource does not exist, the response will return an empty set of
	// permissions, not a `NOT_FOUND` error.
	TestStorePermissions(context.Context, *TestStorePermissionsRequest) (*TestStorePermissionsResponse, error)
	mustEmbedUnimplementedStoresServer()
}

// UnimplementedStoresServer must be embedded to have forward compatible implementations.
type UnimplementedStoresServer struct {
}

func (UnimplementedStoresServer) CreateStore(context.Context, *CreateStoreRequest) (*Store, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStore not implemented")
}
func (UnimplementedStoresServer) GetStore(context.Context, *GetStoreRequest) (*Store, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStore not implemented")
}
func (UnimplementedStoresServer) ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStores not implemented")
}
func (UnimplementedStoresServer) UpdateStore(context.Context, *UpdateStoreRequest) (*Store, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStore not implemented")
}
func (UnimplementedStoresServer) DeleteStore(context.Context, *DeleteStoreRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStore not implemented")
}
func (UnimplementedStoresServer) GetStoreConfig(context.Context, *GetStoreConfigRequest) (*StoreConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreConfig not implemented")
}
func (UnimplementedStoresServer) UploadFile(*UploadFileRequest, Stores_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedStoresServer) UploadFileUnary(context.Context, *UploadFileRequest) (*UploadFileUnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFileUnary not implemented")
}
func (UnimplementedStoresServer) GetFile(context.Context, *GetFileRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedStoresServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedStoresServer) DeleteFile(context.Context, *DeleteFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedStoresServer) TestStorePermissions(context.Context, *TestStorePermissionsRequest) (*TestStorePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestStorePermissions not implemented")
}
func (UnimplementedStoresServer) mustEmbedUnimplementedStoresServer() {}

// UnsafeStoresServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoresServer will
// result in compilation errors.
type UnsafeStoresServer interface {
	mustEmbedUnimplementedStoresServer()
}

func RegisterStoresServer(s grpc.ServiceRegistrar, srv StoresServer) {
	s.RegisterService(&Stores_ServiceDesc, srv)
}

func _Stores_CreateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoresServer).CreateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stores_CreateStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoresServer).CreateStore(ctx, req.(*CreateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stores_GetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoresServer).GetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stores_GetStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoresServer).GetStore(ctx, req.(*GetStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stores_ListStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoresServer).ListStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stores_ListStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoresServer).ListStores(ctx, req.(*ListStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stores_UpdateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoresServer).UpdateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stores_UpdateStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoresServer).UpdateStore(ctx, req.(*UpdateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stores_DeleteStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoresServer).DeleteStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stores_DeleteStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoresServer).DeleteStore(ctx, req.(*DeleteStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stores_GetStoreConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoresServer).GetStoreConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stores_GetStoreConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoresServer).GetStoreConfig(ctx, req.(*GetStoreConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stores_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UploadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoresServer).UploadFile(m, &storesUploadFileServer{stream})
}

type Stores_UploadFileServer interface {
	Send(*UploadFileEvent) error
	grpc.ServerStream
}

type storesUploadFileServer struct {
	grpc.ServerStream
}

func (x *storesUploadFileServer) Send(m *UploadFileEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Stores_UploadFileUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoresServer).UploadFileUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stores_UploadFileUnary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoresServer).UploadFileUnary(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stores_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoresServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stores_GetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoresServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stores_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoresServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stores_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoresServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stores_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoresServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stores_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoresServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stores_TestStorePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestStorePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoresServer).TestStorePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stores_TestStorePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoresServer).TestStorePermissions(ctx, req.(*TestStorePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Stores_ServiceDesc is the grpc.ServiceDesc for Stores service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stores_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.Stores",
	HandlerType: (*StoresServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStore",
			Handler:    _Stores_CreateStore_Handler,
		},
		{
			MethodName: "GetStore",
			Handler:    _Stores_GetStore_Handler,
		},
		{
			MethodName: "ListStores",
			Handler:    _Stores_ListStores_Handler,
		},
		{
			MethodName: "UpdateStore",
			Handler:    _Stores_UpdateStore_Handler,
		},
		{
			MethodName: "DeleteStore",
			Handler:    _Stores_DeleteStore_Handler,
		},
		{
			MethodName: "GetStoreConfig",
			Handler:    _Stores_GetStoreConfig_Handler,
		},
		{
			MethodName: "UploadFileUnary",
			Handler:    _Stores_UploadFileUnary_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _Stores_GetFile_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _Stores_ListFiles_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Stores_DeleteFile_Handler,
		},
		{
			MethodName: "TestStorePermissions",
			Handler:    _Stores_TestStorePermissions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _Stores_UploadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ai/stores.proto",
}
