// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ai/embedding/v0/embedding.proto

// buf:lint:ignore PACKAGE_VERSION_SUFFIX

package embeddingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Embeddings_CreateEmbedding_FullMethodName   = "/ai.embedding.v0.Embeddings/CreateEmbedding"
	Embeddings_ComputeSimilarity_FullMethodName = "/ai.embedding.v0.Embeddings/ComputeSimilarity"
	Embeddings_ListModels_FullMethodName        = "/ai.embedding.v0.Embeddings/ListModels"
)

// EmbeddingsClient is the client API for Embeddings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmbeddingsClient interface {
	// Generates an embedding vector for the provided text using the specified model.
	CreateEmbedding(ctx context.Context, in *CreateEmbeddingRequest, opts ...grpc.CallOption) (*CreateEmbeddingResponse, error)
	// Calculates the similarity score between two texts using the specified model.
	ComputeSimilarity(ctx context.Context, in *ComputeSimilarityRequest, opts ...grpc.CallOption) (*ComputeSimilarityResponse, error)
	// Retrieves a list of available embedding models.
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
}

type embeddingsClient struct {
	cc grpc.ClientConnInterface
}

func NewEmbeddingsClient(cc grpc.ClientConnInterface) EmbeddingsClient {
	return &embeddingsClient{cc}
}

func (c *embeddingsClient) CreateEmbedding(ctx context.Context, in *CreateEmbeddingRequest, opts ...grpc.CallOption) (*CreateEmbeddingResponse, error) {
	out := new(CreateEmbeddingResponse)
	err := c.cc.Invoke(ctx, Embeddings_CreateEmbedding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embeddingsClient) ComputeSimilarity(ctx context.Context, in *ComputeSimilarityRequest, opts ...grpc.CallOption) (*ComputeSimilarityResponse, error) {
	out := new(ComputeSimilarityResponse)
	err := c.cc.Invoke(ctx, Embeddings_ComputeSimilarity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embeddingsClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, Embeddings_ListModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmbeddingsServer is the server API for Embeddings service.
// All implementations must embed UnimplementedEmbeddingsServer
// for forward compatibility
type EmbeddingsServer interface {
	// Generates an embedding vector for the provided text using the specified model.
	CreateEmbedding(context.Context, *CreateEmbeddingRequest) (*CreateEmbeddingResponse, error)
	// Calculates the similarity score between two texts using the specified model.
	ComputeSimilarity(context.Context, *ComputeSimilarityRequest) (*ComputeSimilarityResponse, error)
	// Retrieves a list of available embedding models.
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	mustEmbedUnimplementedEmbeddingsServer()
}

// UnimplementedEmbeddingsServer must be embedded to have forward compatible implementations.
type UnimplementedEmbeddingsServer struct {
}

func (UnimplementedEmbeddingsServer) CreateEmbedding(context.Context, *CreateEmbeddingRequest) (*CreateEmbeddingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmbedding not implemented")
}
func (UnimplementedEmbeddingsServer) ComputeSimilarity(context.Context, *ComputeSimilarityRequest) (*ComputeSimilarityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeSimilarity not implemented")
}
func (UnimplementedEmbeddingsServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedEmbeddingsServer) mustEmbedUnimplementedEmbeddingsServer() {}

// UnsafeEmbeddingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmbeddingsServer will
// result in compilation errors.
type UnsafeEmbeddingsServer interface {
	mustEmbedUnimplementedEmbeddingsServer()
}

func RegisterEmbeddingsServer(s grpc.ServiceRegistrar, srv EmbeddingsServer) {
	s.RegisterService(&Embeddings_ServiceDesc, srv)
}

func _Embeddings_CreateEmbedding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmbeddingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingsServer).CreateEmbedding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Embeddings_CreateEmbedding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingsServer).CreateEmbedding(ctx, req.(*CreateEmbeddingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Embeddings_ComputeSimilarity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeSimilarityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingsServer).ComputeSimilarity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Embeddings_ComputeSimilarity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingsServer).ComputeSimilarity(ctx, req.(*ComputeSimilarityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Embeddings_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingsServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Embeddings_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingsServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Embeddings_ServiceDesc is the grpc.ServiceDesc for Embeddings service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Embeddings_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.embedding.v0.Embeddings",
	HandlerType: (*EmbeddingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmbedding",
			Handler:    _Embeddings_CreateEmbedding_Handler,
		},
		{
			MethodName: "ComputeSimilarity",
			Handler:    _Embeddings_ComputeSimilarity_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _Embeddings_ListModels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ai/embedding/v0/embedding.proto",
}
