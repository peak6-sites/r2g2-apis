// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ai/iam/admin/v0/iam.proto

// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package adminpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v0 "github.com/peak6-sites/r2g2-apis/gen/go/ai/iam/admin/v0"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IAMName is the fully-qualified name of the IAM service.
	IAMName = "ai.iam.admin.v0.IAM"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IAMCreateServiceAccountProcedure is the fully-qualified name of the IAM's CreateServiceAccount
	// RPC.
	IAMCreateServiceAccountProcedure = "/ai.iam.admin.v0.IAM/CreateServiceAccount"
	// IAMGetServiceAccountProcedure is the fully-qualified name of the IAM's GetServiceAccount RPC.
	IAMGetServiceAccountProcedure = "/ai.iam.admin.v0.IAM/GetServiceAccount"
	// IAMListServiceAccountsProcedure is the fully-qualified name of the IAM's ListServiceAccounts RPC.
	IAMListServiceAccountsProcedure = "/ai.iam.admin.v0.IAM/ListServiceAccounts"
	// IAMDeleteServiceAccountProcedure is the fully-qualified name of the IAM's DeleteServiceAccount
	// RPC.
	IAMDeleteServiceAccountProcedure = "/ai.iam.admin.v0.IAM/DeleteServiceAccount"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	iAMServiceDescriptor                    = v0.File_ai_iam_admin_v0_iam_proto.Services().ByName("IAM")
	iAMCreateServiceAccountMethodDescriptor = iAMServiceDescriptor.Methods().ByName("CreateServiceAccount")
	iAMGetServiceAccountMethodDescriptor    = iAMServiceDescriptor.Methods().ByName("GetServiceAccount")
	iAMListServiceAccountsMethodDescriptor  = iAMServiceDescriptor.Methods().ByName("ListServiceAccounts")
	iAMDeleteServiceAccountMethodDescriptor = iAMServiceDescriptor.Methods().ByName("DeleteServiceAccount")
)

// IAMClient is a client for the ai.iam.admin.v0.IAM service.
type IAMClient interface {
	// Creates a new Service Account
	CreateServiceAccount(context.Context, *connect.Request[v0.CreateServiceAccountRequest]) (*connect.Response[v0.ServiceAccount], error)
	// Retrieves a Service Account
	GetServiceAccount(context.Context, *connect.Request[v0.GetServiceAccountRequest]) (*connect.Response[v0.ServiceAccount], error)
	// Lists Service Accounts
	ListServiceAccounts(context.Context, *connect.Request[v0.ListServiceAccountsRequest]) (*connect.Response[v0.ListServiceAccountsResponse], error)
	// Deletes a Service Account
	DeleteServiceAccount(context.Context, *connect.Request[v0.DeleteServiceAccountRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewIAMClient constructs a client for the ai.iam.admin.v0.IAM service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIAMClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IAMClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &iAMClient{
		createServiceAccount: connect.NewClient[v0.CreateServiceAccountRequest, v0.ServiceAccount](
			httpClient,
			baseURL+IAMCreateServiceAccountProcedure,
			connect.WithSchema(iAMCreateServiceAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getServiceAccount: connect.NewClient[v0.GetServiceAccountRequest, v0.ServiceAccount](
			httpClient,
			baseURL+IAMGetServiceAccountProcedure,
			connect.WithSchema(iAMGetServiceAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listServiceAccounts: connect.NewClient[v0.ListServiceAccountsRequest, v0.ListServiceAccountsResponse](
			httpClient,
			baseURL+IAMListServiceAccountsProcedure,
			connect.WithSchema(iAMListServiceAccountsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteServiceAccount: connect.NewClient[v0.DeleteServiceAccountRequest, emptypb.Empty](
			httpClient,
			baseURL+IAMDeleteServiceAccountProcedure,
			connect.WithSchema(iAMDeleteServiceAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// iAMClient implements IAMClient.
type iAMClient struct {
	createServiceAccount *connect.Client[v0.CreateServiceAccountRequest, v0.ServiceAccount]
	getServiceAccount    *connect.Client[v0.GetServiceAccountRequest, v0.ServiceAccount]
	listServiceAccounts  *connect.Client[v0.ListServiceAccountsRequest, v0.ListServiceAccountsResponse]
	deleteServiceAccount *connect.Client[v0.DeleteServiceAccountRequest, emptypb.Empty]
}

// CreateServiceAccount calls ai.iam.admin.v0.IAM.CreateServiceAccount.
func (c *iAMClient) CreateServiceAccount(ctx context.Context, req *connect.Request[v0.CreateServiceAccountRequest]) (*connect.Response[v0.ServiceAccount], error) {
	return c.createServiceAccount.CallUnary(ctx, req)
}

// GetServiceAccount calls ai.iam.admin.v0.IAM.GetServiceAccount.
func (c *iAMClient) GetServiceAccount(ctx context.Context, req *connect.Request[v0.GetServiceAccountRequest]) (*connect.Response[v0.ServiceAccount], error) {
	return c.getServiceAccount.CallUnary(ctx, req)
}

// ListServiceAccounts calls ai.iam.admin.v0.IAM.ListServiceAccounts.
func (c *iAMClient) ListServiceAccounts(ctx context.Context, req *connect.Request[v0.ListServiceAccountsRequest]) (*connect.Response[v0.ListServiceAccountsResponse], error) {
	return c.listServiceAccounts.CallUnary(ctx, req)
}

// DeleteServiceAccount calls ai.iam.admin.v0.IAM.DeleteServiceAccount.
func (c *iAMClient) DeleteServiceAccount(ctx context.Context, req *connect.Request[v0.DeleteServiceAccountRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteServiceAccount.CallUnary(ctx, req)
}

// IAMHandler is an implementation of the ai.iam.admin.v0.IAM service.
type IAMHandler interface {
	// Creates a new Service Account
	CreateServiceAccount(context.Context, *connect.Request[v0.CreateServiceAccountRequest]) (*connect.Response[v0.ServiceAccount], error)
	// Retrieves a Service Account
	GetServiceAccount(context.Context, *connect.Request[v0.GetServiceAccountRequest]) (*connect.Response[v0.ServiceAccount], error)
	// Lists Service Accounts
	ListServiceAccounts(context.Context, *connect.Request[v0.ListServiceAccountsRequest]) (*connect.Response[v0.ListServiceAccountsResponse], error)
	// Deletes a Service Account
	DeleteServiceAccount(context.Context, *connect.Request[v0.DeleteServiceAccountRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewIAMHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIAMHandler(svc IAMHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	iAMCreateServiceAccountHandler := connect.NewUnaryHandler(
		IAMCreateServiceAccountProcedure,
		svc.CreateServiceAccount,
		connect.WithSchema(iAMCreateServiceAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	iAMGetServiceAccountHandler := connect.NewUnaryHandler(
		IAMGetServiceAccountProcedure,
		svc.GetServiceAccount,
		connect.WithSchema(iAMGetServiceAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	iAMListServiceAccountsHandler := connect.NewUnaryHandler(
		IAMListServiceAccountsProcedure,
		svc.ListServiceAccounts,
		connect.WithSchema(iAMListServiceAccountsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	iAMDeleteServiceAccountHandler := connect.NewUnaryHandler(
		IAMDeleteServiceAccountProcedure,
		svc.DeleteServiceAccount,
		connect.WithSchema(iAMDeleteServiceAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ai.iam.admin.v0.IAM/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IAMCreateServiceAccountProcedure:
			iAMCreateServiceAccountHandler.ServeHTTP(w, r)
		case IAMGetServiceAccountProcedure:
			iAMGetServiceAccountHandler.ServeHTTP(w, r)
		case IAMListServiceAccountsProcedure:
			iAMListServiceAccountsHandler.ServeHTTP(w, r)
		case IAMDeleteServiceAccountProcedure:
			iAMDeleteServiceAccountHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIAMHandler returns CodeUnimplemented from all methods.
type UnimplementedIAMHandler struct{}

func (UnimplementedIAMHandler) CreateServiceAccount(context.Context, *connect.Request[v0.CreateServiceAccountRequest]) (*connect.Response[v0.ServiceAccount], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.iam.admin.v0.IAM.CreateServiceAccount is not implemented"))
}

func (UnimplementedIAMHandler) GetServiceAccount(context.Context, *connect.Request[v0.GetServiceAccountRequest]) (*connect.Response[v0.ServiceAccount], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.iam.admin.v0.IAM.GetServiceAccount is not implemented"))
}

func (UnimplementedIAMHandler) ListServiceAccounts(context.Context, *connect.Request[v0.ListServiceAccountsRequest]) (*connect.Response[v0.ListServiceAccountsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.iam.admin.v0.IAM.ListServiceAccounts is not implemented"))
}

func (UnimplementedIAMHandler) DeleteServiceAccount(context.Context, *connect.Request[v0.DeleteServiceAccountRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.iam.admin.v0.IAM.DeleteServiceAccount is not implemented"))
}
