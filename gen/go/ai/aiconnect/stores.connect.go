// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ai/stores.proto

// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package aiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	ai "github.com/peak6-sites/r2g2-apis/gen/go/ai"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StoresName is the fully-qualified name of the Stores service.
	StoresName = "ai.Stores"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StoresCreateStoreProcedure is the fully-qualified name of the Stores's CreateStore RPC.
	StoresCreateStoreProcedure = "/ai.Stores/CreateStore"
	// StoresGetStoreProcedure is the fully-qualified name of the Stores's GetStore RPC.
	StoresGetStoreProcedure = "/ai.Stores/GetStore"
	// StoresListStoresProcedure is the fully-qualified name of the Stores's ListStores RPC.
	StoresListStoresProcedure = "/ai.Stores/ListStores"
	// StoresUpdateStoreProcedure is the fully-qualified name of the Stores's UpdateStore RPC.
	StoresUpdateStoreProcedure = "/ai.Stores/UpdateStore"
	// StoresDeleteStoreProcedure is the fully-qualified name of the Stores's DeleteStore RPC.
	StoresDeleteStoreProcedure = "/ai.Stores/DeleteStore"
	// StoresGetStoreConfigProcedure is the fully-qualified name of the Stores's GetStoreConfig RPC.
	StoresGetStoreConfigProcedure = "/ai.Stores/GetStoreConfig"
	// StoresUploadFileProcedure is the fully-qualified name of the Stores's UploadFile RPC.
	StoresUploadFileProcedure = "/ai.Stores/UploadFile"
	// StoresUploadFileUnaryProcedure is the fully-qualified name of the Stores's UploadFileUnary RPC.
	StoresUploadFileUnaryProcedure = "/ai.Stores/UploadFileUnary"
	// StoresGetFileProcedure is the fully-qualified name of the Stores's GetFile RPC.
	StoresGetFileProcedure = "/ai.Stores/GetFile"
	// StoresListFilesProcedure is the fully-qualified name of the Stores's ListFiles RPC.
	StoresListFilesProcedure = "/ai.Stores/ListFiles"
	// StoresDeleteFileProcedure is the fully-qualified name of the Stores's DeleteFile RPC.
	StoresDeleteFileProcedure = "/ai.Stores/DeleteFile"
	// StoresTestStorePermissionsProcedure is the fully-qualified name of the Stores's
	// TestStorePermissions RPC.
	StoresTestStorePermissionsProcedure = "/ai.Stores/TestStorePermissions"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	storesServiceDescriptor                    = ai.File_ai_stores_proto.Services().ByName("Stores")
	storesCreateStoreMethodDescriptor          = storesServiceDescriptor.Methods().ByName("CreateStore")
	storesGetStoreMethodDescriptor             = storesServiceDescriptor.Methods().ByName("GetStore")
	storesListStoresMethodDescriptor           = storesServiceDescriptor.Methods().ByName("ListStores")
	storesUpdateStoreMethodDescriptor          = storesServiceDescriptor.Methods().ByName("UpdateStore")
	storesDeleteStoreMethodDescriptor          = storesServiceDescriptor.Methods().ByName("DeleteStore")
	storesGetStoreConfigMethodDescriptor       = storesServiceDescriptor.Methods().ByName("GetStoreConfig")
	storesUploadFileMethodDescriptor           = storesServiceDescriptor.Methods().ByName("UploadFile")
	storesUploadFileUnaryMethodDescriptor      = storesServiceDescriptor.Methods().ByName("UploadFileUnary")
	storesGetFileMethodDescriptor              = storesServiceDescriptor.Methods().ByName("GetFile")
	storesListFilesMethodDescriptor            = storesServiceDescriptor.Methods().ByName("ListFiles")
	storesDeleteFileMethodDescriptor           = storesServiceDescriptor.Methods().ByName("DeleteFile")
	storesTestStorePermissionsMethodDescriptor = storesServiceDescriptor.Methods().ByName("TestStorePermissions")
)

// StoresClient is a client for the ai.Stores service.
type StoresClient interface {
	// Creates a new store for users to upload files to
	CreateStore(context.Context, *connect.Request[ai.CreateStoreRequest]) (*connect.Response[ai.Store], error)
	// Gets the current state of a store
	GetStore(context.Context, *connect.Request[ai.GetStoreRequest]) (*connect.Response[ai.Store], error)
	// Lists the available stores
	ListStores(context.Context, *connect.Request[ai.ListStoresRequest]) (*connect.Response[ai.ListStoresResponse], error)
	// Updates the state of a store
	UpdateStore(context.Context, *connect.Request[ai.UpdateStoreRequest]) (*connect.Response[ai.Store], error)
	// Deletes a store and all of its files
	DeleteStore(context.Context, *connect.Request[ai.DeleteStoreRequest]) (*connect.Response[emptypb.Empty], error)
	// Gets the configuration of a store
	GetStoreConfig(context.Context, *connect.Request[ai.GetStoreConfigRequest]) (*connect.Response[ai.StoreConfig], error)
	// Initiates the process of uploading a file to a store
	// The server will respond with an event indicating where the file should be uploaded
	UploadFile(context.Context, *connect.Request[ai.UploadFileRequest]) (*connect.ServerStreamForClient[ai.UploadFileEvent], error)
	// Initiates the process of uploading a file to a store
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	UploadFileUnary(context.Context, *connect.Request[ai.UploadFileRequest]) (*connect.Response[ai.UploadFileUnaryResponse], error)
	// Gets the current state of a file in a store
	GetFile(context.Context, *connect.Request[ai.GetFileRequest]) (*connect.Response[ai.File], error)
	// Lists the files in a store
	ListFiles(context.Context, *connect.Request[ai.ListFilesRequest]) (*connect.Response[ai.ListFilesResponse], error)
	// Deletes a file from a store
	DeleteFile(context.Context, *connect.Request[ai.DeleteFileRequest]) (*connect.Response[emptypb.Empty], error)
	// Returns permissions that a call has on the specified Store.
	// If the resource does not exist, the response will return an empty set of
	// permissions, not a `NOT_FOUND` error.
	TestStorePermissions(context.Context, *connect.Request[ai.TestStorePermissionsRequest]) (*connect.Response[ai.TestStorePermissionsResponse], error)
}

// NewStoresClient constructs a client for the ai.Stores service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStoresClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StoresClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &storesClient{
		createStore: connect.NewClient[ai.CreateStoreRequest, ai.Store](
			httpClient,
			baseURL+StoresCreateStoreProcedure,
			connect.WithSchema(storesCreateStoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStore: connect.NewClient[ai.GetStoreRequest, ai.Store](
			httpClient,
			baseURL+StoresGetStoreProcedure,
			connect.WithSchema(storesGetStoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listStores: connect.NewClient[ai.ListStoresRequest, ai.ListStoresResponse](
			httpClient,
			baseURL+StoresListStoresProcedure,
			connect.WithSchema(storesListStoresMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateStore: connect.NewClient[ai.UpdateStoreRequest, ai.Store](
			httpClient,
			baseURL+StoresUpdateStoreProcedure,
			connect.WithSchema(storesUpdateStoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteStore: connect.NewClient[ai.DeleteStoreRequest, emptypb.Empty](
			httpClient,
			baseURL+StoresDeleteStoreProcedure,
			connect.WithSchema(storesDeleteStoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStoreConfig: connect.NewClient[ai.GetStoreConfigRequest, ai.StoreConfig](
			httpClient,
			baseURL+StoresGetStoreConfigProcedure,
			connect.WithSchema(storesGetStoreConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		uploadFile: connect.NewClient[ai.UploadFileRequest, ai.UploadFileEvent](
			httpClient,
			baseURL+StoresUploadFileProcedure,
			connect.WithSchema(storesUploadFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		uploadFileUnary: connect.NewClient[ai.UploadFileRequest, ai.UploadFileUnaryResponse](
			httpClient,
			baseURL+StoresUploadFileUnaryProcedure,
			connect.WithSchema(storesUploadFileUnaryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFile: connect.NewClient[ai.GetFileRequest, ai.File](
			httpClient,
			baseURL+StoresGetFileProcedure,
			connect.WithSchema(storesGetFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listFiles: connect.NewClient[ai.ListFilesRequest, ai.ListFilesResponse](
			httpClient,
			baseURL+StoresListFilesProcedure,
			connect.WithSchema(storesListFilesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteFile: connect.NewClient[ai.DeleteFileRequest, emptypb.Empty](
			httpClient,
			baseURL+StoresDeleteFileProcedure,
			connect.WithSchema(storesDeleteFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		testStorePermissions: connect.NewClient[ai.TestStorePermissionsRequest, ai.TestStorePermissionsResponse](
			httpClient,
			baseURL+StoresTestStorePermissionsProcedure,
			connect.WithSchema(storesTestStorePermissionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// storesClient implements StoresClient.
type storesClient struct {
	createStore          *connect.Client[ai.CreateStoreRequest, ai.Store]
	getStore             *connect.Client[ai.GetStoreRequest, ai.Store]
	listStores           *connect.Client[ai.ListStoresRequest, ai.ListStoresResponse]
	updateStore          *connect.Client[ai.UpdateStoreRequest, ai.Store]
	deleteStore          *connect.Client[ai.DeleteStoreRequest, emptypb.Empty]
	getStoreConfig       *connect.Client[ai.GetStoreConfigRequest, ai.StoreConfig]
	uploadFile           *connect.Client[ai.UploadFileRequest, ai.UploadFileEvent]
	uploadFileUnary      *connect.Client[ai.UploadFileRequest, ai.UploadFileUnaryResponse]
	getFile              *connect.Client[ai.GetFileRequest, ai.File]
	listFiles            *connect.Client[ai.ListFilesRequest, ai.ListFilesResponse]
	deleteFile           *connect.Client[ai.DeleteFileRequest, emptypb.Empty]
	testStorePermissions *connect.Client[ai.TestStorePermissionsRequest, ai.TestStorePermissionsResponse]
}

// CreateStore calls ai.Stores.CreateStore.
func (c *storesClient) CreateStore(ctx context.Context, req *connect.Request[ai.CreateStoreRequest]) (*connect.Response[ai.Store], error) {
	return c.createStore.CallUnary(ctx, req)
}

// GetStore calls ai.Stores.GetStore.
func (c *storesClient) GetStore(ctx context.Context, req *connect.Request[ai.GetStoreRequest]) (*connect.Response[ai.Store], error) {
	return c.getStore.CallUnary(ctx, req)
}

// ListStores calls ai.Stores.ListStores.
func (c *storesClient) ListStores(ctx context.Context, req *connect.Request[ai.ListStoresRequest]) (*connect.Response[ai.ListStoresResponse], error) {
	return c.listStores.CallUnary(ctx, req)
}

// UpdateStore calls ai.Stores.UpdateStore.
func (c *storesClient) UpdateStore(ctx context.Context, req *connect.Request[ai.UpdateStoreRequest]) (*connect.Response[ai.Store], error) {
	return c.updateStore.CallUnary(ctx, req)
}

// DeleteStore calls ai.Stores.DeleteStore.
func (c *storesClient) DeleteStore(ctx context.Context, req *connect.Request[ai.DeleteStoreRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteStore.CallUnary(ctx, req)
}

// GetStoreConfig calls ai.Stores.GetStoreConfig.
func (c *storesClient) GetStoreConfig(ctx context.Context, req *connect.Request[ai.GetStoreConfigRequest]) (*connect.Response[ai.StoreConfig], error) {
	return c.getStoreConfig.CallUnary(ctx, req)
}

// UploadFile calls ai.Stores.UploadFile.
func (c *storesClient) UploadFile(ctx context.Context, req *connect.Request[ai.UploadFileRequest]) (*connect.ServerStreamForClient[ai.UploadFileEvent], error) {
	return c.uploadFile.CallServerStream(ctx, req)
}

// UploadFileUnary calls ai.Stores.UploadFileUnary.
func (c *storesClient) UploadFileUnary(ctx context.Context, req *connect.Request[ai.UploadFileRequest]) (*connect.Response[ai.UploadFileUnaryResponse], error) {
	return c.uploadFileUnary.CallUnary(ctx, req)
}

// GetFile calls ai.Stores.GetFile.
func (c *storesClient) GetFile(ctx context.Context, req *connect.Request[ai.GetFileRequest]) (*connect.Response[ai.File], error) {
	return c.getFile.CallUnary(ctx, req)
}

// ListFiles calls ai.Stores.ListFiles.
func (c *storesClient) ListFiles(ctx context.Context, req *connect.Request[ai.ListFilesRequest]) (*connect.Response[ai.ListFilesResponse], error) {
	return c.listFiles.CallUnary(ctx, req)
}

// DeleteFile calls ai.Stores.DeleteFile.
func (c *storesClient) DeleteFile(ctx context.Context, req *connect.Request[ai.DeleteFileRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteFile.CallUnary(ctx, req)
}

// TestStorePermissions calls ai.Stores.TestStorePermissions.
func (c *storesClient) TestStorePermissions(ctx context.Context, req *connect.Request[ai.TestStorePermissionsRequest]) (*connect.Response[ai.TestStorePermissionsResponse], error) {
	return c.testStorePermissions.CallUnary(ctx, req)
}

// StoresHandler is an implementation of the ai.Stores service.
type StoresHandler interface {
	// Creates a new store for users to upload files to
	CreateStore(context.Context, *connect.Request[ai.CreateStoreRequest]) (*connect.Response[ai.Store], error)
	// Gets the current state of a store
	GetStore(context.Context, *connect.Request[ai.GetStoreRequest]) (*connect.Response[ai.Store], error)
	// Lists the available stores
	ListStores(context.Context, *connect.Request[ai.ListStoresRequest]) (*connect.Response[ai.ListStoresResponse], error)
	// Updates the state of a store
	UpdateStore(context.Context, *connect.Request[ai.UpdateStoreRequest]) (*connect.Response[ai.Store], error)
	// Deletes a store and all of its files
	DeleteStore(context.Context, *connect.Request[ai.DeleteStoreRequest]) (*connect.Response[emptypb.Empty], error)
	// Gets the configuration of a store
	GetStoreConfig(context.Context, *connect.Request[ai.GetStoreConfigRequest]) (*connect.Response[ai.StoreConfig], error)
	// Initiates the process of uploading a file to a store
	// The server will respond with an event indicating where the file should be uploaded
	UploadFile(context.Context, *connect.Request[ai.UploadFileRequest], *connect.ServerStream[ai.UploadFileEvent]) error
	// Initiates the process of uploading a file to a store
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	UploadFileUnary(context.Context, *connect.Request[ai.UploadFileRequest]) (*connect.Response[ai.UploadFileUnaryResponse], error)
	// Gets the current state of a file in a store
	GetFile(context.Context, *connect.Request[ai.GetFileRequest]) (*connect.Response[ai.File], error)
	// Lists the files in a store
	ListFiles(context.Context, *connect.Request[ai.ListFilesRequest]) (*connect.Response[ai.ListFilesResponse], error)
	// Deletes a file from a store
	DeleteFile(context.Context, *connect.Request[ai.DeleteFileRequest]) (*connect.Response[emptypb.Empty], error)
	// Returns permissions that a call has on the specified Store.
	// If the resource does not exist, the response will return an empty set of
	// permissions, not a `NOT_FOUND` error.
	TestStorePermissions(context.Context, *connect.Request[ai.TestStorePermissionsRequest]) (*connect.Response[ai.TestStorePermissionsResponse], error)
}

// NewStoresHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStoresHandler(svc StoresHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storesCreateStoreHandler := connect.NewUnaryHandler(
		StoresCreateStoreProcedure,
		svc.CreateStore,
		connect.WithSchema(storesCreateStoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storesGetStoreHandler := connect.NewUnaryHandler(
		StoresGetStoreProcedure,
		svc.GetStore,
		connect.WithSchema(storesGetStoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storesListStoresHandler := connect.NewUnaryHandler(
		StoresListStoresProcedure,
		svc.ListStores,
		connect.WithSchema(storesListStoresMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storesUpdateStoreHandler := connect.NewUnaryHandler(
		StoresUpdateStoreProcedure,
		svc.UpdateStore,
		connect.WithSchema(storesUpdateStoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storesDeleteStoreHandler := connect.NewUnaryHandler(
		StoresDeleteStoreProcedure,
		svc.DeleteStore,
		connect.WithSchema(storesDeleteStoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storesGetStoreConfigHandler := connect.NewUnaryHandler(
		StoresGetStoreConfigProcedure,
		svc.GetStoreConfig,
		connect.WithSchema(storesGetStoreConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storesUploadFileHandler := connect.NewServerStreamHandler(
		StoresUploadFileProcedure,
		svc.UploadFile,
		connect.WithSchema(storesUploadFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storesUploadFileUnaryHandler := connect.NewUnaryHandler(
		StoresUploadFileUnaryProcedure,
		svc.UploadFileUnary,
		connect.WithSchema(storesUploadFileUnaryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storesGetFileHandler := connect.NewUnaryHandler(
		StoresGetFileProcedure,
		svc.GetFile,
		connect.WithSchema(storesGetFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storesListFilesHandler := connect.NewUnaryHandler(
		StoresListFilesProcedure,
		svc.ListFiles,
		connect.WithSchema(storesListFilesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storesDeleteFileHandler := connect.NewUnaryHandler(
		StoresDeleteFileProcedure,
		svc.DeleteFile,
		connect.WithSchema(storesDeleteFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storesTestStorePermissionsHandler := connect.NewUnaryHandler(
		StoresTestStorePermissionsProcedure,
		svc.TestStorePermissions,
		connect.WithSchema(storesTestStorePermissionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ai.Stores/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StoresCreateStoreProcedure:
			storesCreateStoreHandler.ServeHTTP(w, r)
		case StoresGetStoreProcedure:
			storesGetStoreHandler.ServeHTTP(w, r)
		case StoresListStoresProcedure:
			storesListStoresHandler.ServeHTTP(w, r)
		case StoresUpdateStoreProcedure:
			storesUpdateStoreHandler.ServeHTTP(w, r)
		case StoresDeleteStoreProcedure:
			storesDeleteStoreHandler.ServeHTTP(w, r)
		case StoresGetStoreConfigProcedure:
			storesGetStoreConfigHandler.ServeHTTP(w, r)
		case StoresUploadFileProcedure:
			storesUploadFileHandler.ServeHTTP(w, r)
		case StoresUploadFileUnaryProcedure:
			storesUploadFileUnaryHandler.ServeHTTP(w, r)
		case StoresGetFileProcedure:
			storesGetFileHandler.ServeHTTP(w, r)
		case StoresListFilesProcedure:
			storesListFilesHandler.ServeHTTP(w, r)
		case StoresDeleteFileProcedure:
			storesDeleteFileHandler.ServeHTTP(w, r)
		case StoresTestStorePermissionsProcedure:
			storesTestStorePermissionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStoresHandler returns CodeUnimplemented from all methods.
type UnimplementedStoresHandler struct{}

func (UnimplementedStoresHandler) CreateStore(context.Context, *connect.Request[ai.CreateStoreRequest]) (*connect.Response[ai.Store], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.Stores.CreateStore is not implemented"))
}

func (UnimplementedStoresHandler) GetStore(context.Context, *connect.Request[ai.GetStoreRequest]) (*connect.Response[ai.Store], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.Stores.GetStore is not implemented"))
}

func (UnimplementedStoresHandler) ListStores(context.Context, *connect.Request[ai.ListStoresRequest]) (*connect.Response[ai.ListStoresResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.Stores.ListStores is not implemented"))
}

func (UnimplementedStoresHandler) UpdateStore(context.Context, *connect.Request[ai.UpdateStoreRequest]) (*connect.Response[ai.Store], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.Stores.UpdateStore is not implemented"))
}

func (UnimplementedStoresHandler) DeleteStore(context.Context, *connect.Request[ai.DeleteStoreRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.Stores.DeleteStore is not implemented"))
}

func (UnimplementedStoresHandler) GetStoreConfig(context.Context, *connect.Request[ai.GetStoreConfigRequest]) (*connect.Response[ai.StoreConfig], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.Stores.GetStoreConfig is not implemented"))
}

func (UnimplementedStoresHandler) UploadFile(context.Context, *connect.Request[ai.UploadFileRequest], *connect.ServerStream[ai.UploadFileEvent]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("ai.Stores.UploadFile is not implemented"))
}

func (UnimplementedStoresHandler) UploadFileUnary(context.Context, *connect.Request[ai.UploadFileRequest]) (*connect.Response[ai.UploadFileUnaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.Stores.UploadFileUnary is not implemented"))
}

func (UnimplementedStoresHandler) GetFile(context.Context, *connect.Request[ai.GetFileRequest]) (*connect.Response[ai.File], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.Stores.GetFile is not implemented"))
}

func (UnimplementedStoresHandler) ListFiles(context.Context, *connect.Request[ai.ListFilesRequest]) (*connect.Response[ai.ListFilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.Stores.ListFiles is not implemented"))
}

func (UnimplementedStoresHandler) DeleteFile(context.Context, *connect.Request[ai.DeleteFileRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.Stores.DeleteFile is not implemented"))
}

func (UnimplementedStoresHandler) TestStorePermissions(context.Context, *connect.Request[ai.TestStorePermissionsRequest]) (*connect.Response[ai.TestStorePermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.Stores.TestStorePermissions is not implemented"))
}
