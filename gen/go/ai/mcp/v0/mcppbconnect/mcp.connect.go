// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ai/mcp/v0/mcp.proto

// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package mcppbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v0 "github.com/peak6-sites/r2g2-apis/gen/go/ai/mcp/v0"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MCPName is the fully-qualified name of the MCP service.
	MCPName = "mcp.MCP"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MCPServerProcedure is the fully-qualified name of the MCP's Server RPC.
	MCPServerProcedure = "/mcp.MCP/Server"
	// MCPClientProcedure is the fully-qualified name of the MCP's Client RPC.
	MCPClientProcedure = "/mcp.MCP/Client"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	mCPServiceDescriptor      = v0.File_ai_mcp_v0_mcp_proto.Services().ByName("MCP")
	mCPServerMethodDescriptor = mCPServiceDescriptor.Methods().ByName("Server")
	mCPClientMethodDescriptor = mCPServiceDescriptor.Methods().ByName("Client")
)

// MCPClient is a client for the mcp.MCP service.
type MCPClient interface {
	Server(context.Context) *connect.BidiStreamForClient[v0.Message, v0.Message]
	Client(context.Context) *connect.BidiStreamForClient[v0.Message, v0.Message]
}

// NewMCPClient constructs a client for the mcp.MCP service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMCPClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MCPClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mCPClient{
		server: connect.NewClient[v0.Message, v0.Message](
			httpClient,
			baseURL+MCPServerProcedure,
			connect.WithSchema(mCPServerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		client: connect.NewClient[v0.Message, v0.Message](
			httpClient,
			baseURL+MCPClientProcedure,
			connect.WithSchema(mCPClientMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// mCPClient implements MCPClient.
type mCPClient struct {
	server *connect.Client[v0.Message, v0.Message]
	client *connect.Client[v0.Message, v0.Message]
}

// Server calls mcp.MCP.Server.
func (c *mCPClient) Server(ctx context.Context) *connect.BidiStreamForClient[v0.Message, v0.Message] {
	return c.server.CallBidiStream(ctx)
}

// Client calls mcp.MCP.Client.
func (c *mCPClient) Client(ctx context.Context) *connect.BidiStreamForClient[v0.Message, v0.Message] {
	return c.client.CallBidiStream(ctx)
}

// MCPHandler is an implementation of the mcp.MCP service.
type MCPHandler interface {
	Server(context.Context, *connect.BidiStream[v0.Message, v0.Message]) error
	Client(context.Context, *connect.BidiStream[v0.Message, v0.Message]) error
}

// NewMCPHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMCPHandler(svc MCPHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mCPServerHandler := connect.NewBidiStreamHandler(
		MCPServerProcedure,
		svc.Server,
		connect.WithSchema(mCPServerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mCPClientHandler := connect.NewBidiStreamHandler(
		MCPClientProcedure,
		svc.Client,
		connect.WithSchema(mCPClientMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/mcp.MCP/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MCPServerProcedure:
			mCPServerHandler.ServeHTTP(w, r)
		case MCPClientProcedure:
			mCPClientHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMCPHandler returns CodeUnimplemented from all methods.
type UnimplementedMCPHandler struct{}

func (UnimplementedMCPHandler) Server(context.Context, *connect.BidiStream[v0.Message, v0.Message]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("mcp.MCP.Server is not implemented"))
}

func (UnimplementedMCPHandler) Client(context.Context, *connect.BidiStream[v0.Message, v0.Message]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("mcp.MCP.Client is not implemented"))
}
