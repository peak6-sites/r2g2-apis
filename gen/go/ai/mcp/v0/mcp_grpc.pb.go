// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ai/mcp/v0/mcp.proto

// buf:lint:ignore PACKAGE_VERSION_SUFFIX

package mcppb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MCP_Server_FullMethodName = "/mcp.MCP/Server"
	MCP_Client_FullMethodName = "/mcp.MCP/Client"
)

// MCPClient is the client API for MCP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MCPClient interface {
	Server(ctx context.Context, opts ...grpc.CallOption) (MCP_ServerClient, error)
	Client(ctx context.Context, opts ...grpc.CallOption) (MCP_ClientClient, error)
}

type mCPClient struct {
	cc grpc.ClientConnInterface
}

func NewMCPClient(cc grpc.ClientConnInterface) MCPClient {
	return &mCPClient{cc}
}

func (c *mCPClient) Server(ctx context.Context, opts ...grpc.CallOption) (MCP_ServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &MCP_ServiceDesc.Streams[0], MCP_Server_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mCPServerClient{stream}
	return x, nil
}

type MCP_ServerClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type mCPServerClient struct {
	grpc.ClientStream
}

func (x *mCPServerClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mCPServerClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mCPClient) Client(ctx context.Context, opts ...grpc.CallOption) (MCP_ClientClient, error) {
	stream, err := c.cc.NewStream(ctx, &MCP_ServiceDesc.Streams[1], MCP_Client_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mCPClientClient{stream}
	return x, nil
}

type MCP_ClientClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type mCPClientClient struct {
	grpc.ClientStream
}

func (x *mCPClientClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mCPClientClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MCPServer is the server API for MCP service.
// All implementations must embed UnimplementedMCPServer
// for forward compatibility
type MCPServer interface {
	Server(MCP_ServerServer) error
	Client(MCP_ClientServer) error
	mustEmbedUnimplementedMCPServer()
}

// UnimplementedMCPServer must be embedded to have forward compatible implementations.
type UnimplementedMCPServer struct {
}

func (UnimplementedMCPServer) Server(MCP_ServerServer) error {
	return status.Errorf(codes.Unimplemented, "method Server not implemented")
}
func (UnimplementedMCPServer) Client(MCP_ClientServer) error {
	return status.Errorf(codes.Unimplemented, "method Client not implemented")
}
func (UnimplementedMCPServer) mustEmbedUnimplementedMCPServer() {}

// UnsafeMCPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MCPServer will
// result in compilation errors.
type UnsafeMCPServer interface {
	mustEmbedUnimplementedMCPServer()
}

func RegisterMCPServer(s grpc.ServiceRegistrar, srv MCPServer) {
	s.RegisterService(&MCP_ServiceDesc, srv)
}

func _MCP_Server_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MCPServer).Server(&mCPServerServer{stream})
}

type MCP_ServerServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type mCPServerServer struct {
	grpc.ServerStream
}

func (x *mCPServerServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mCPServerServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MCP_Client_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MCPServer).Client(&mCPClientServer{stream})
}

type MCP_ClientServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type mCPClientServer struct {
	grpc.ServerStream
}

func (x *mCPClientServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mCPClientServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MCP_ServiceDesc is the grpc.ServiceDesc for MCP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MCP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcp.MCP",
	HandlerType: (*MCPServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Server",
			Handler:       _MCP_Server_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Client",
			Handler:       _MCP_Client_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ai/mcp/v0/mcp.proto",
}
