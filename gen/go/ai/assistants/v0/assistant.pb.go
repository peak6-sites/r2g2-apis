// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: ai/assistants/v0/assistant.proto

// buf:lint:ignore PACKAGE_VERSION_SUFFIX

package assistantspb

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	ai "github.com/peak6-sites/r2g2-apis/gen/go/ai"
	_type "github.com/peak6-sites/r2g2-apis/gen/go/ai/type"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The direction that records should be sorted.
// buf:lint:ignore ENUM_VALUE_PREFIX
type SortOrder int32

const (
	SortOrder_SORT_ORDER_UNSPECIFIED SortOrder = 0
	SortOrder_ASCENDING              SortOrder = 1
	SortOrder_DESCENDING             SortOrder = 2
)

// Enum value maps for SortOrder.
var (
	SortOrder_name = map[int32]string{
		0: "SORT_ORDER_UNSPECIFIED",
		1: "ASCENDING",
		2: "DESCENDING",
	}
	SortOrder_value = map[string]int32{
		"SORT_ORDER_UNSPECIFIED": 0,
		"ASCENDING":              1,
		"DESCENDING":             2,
	}
)

func (x SortOrder) Enum() *SortOrder {
	p := new(SortOrder)
	*p = x
	return p
}

func (x SortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_assistants_v0_assistant_proto_enumTypes[0].Descriptor()
}

func (SortOrder) Type() protoreflect.EnumType {
	return &file_ai_assistants_v0_assistant_proto_enumTypes[0]
}

func (x SortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrder.Descriptor instead.
func (SortOrder) EnumDescriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{0}
}

// buf:lint:ignore ENUM_VALUE_PREFIX
type Role int32

const (
	Role_ROLE_UNSPECIFIED Role = 0
	Role_USER             Role = 1
	Role_ASSISTANT        Role = 2
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "ROLE_UNSPECIFIED",
		1: "USER",
		2: "ASSISTANT",
	}
	Role_value = map[string]int32{
		"ROLE_UNSPECIFIED": 0,
		"USER":             1,
		"ASSISTANT":        2,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_assistants_v0_assistant_proto_enumTypes[1].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_ai_assistants_v0_assistant_proto_enumTypes[1]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{1}
}

// buf:lint:ignore ENUM_VALUE_PREFIX
type Message_State int32

const (
	Message_STATE_UNSPECIFIED Message_State = 0
	Message_PENDING           Message_State = 1
	Message_GENERATING        Message_State = 2
	Message_COMPLETED         Message_State = 3
)

// Enum value maps for Message_State.
var (
	Message_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "PENDING",
		2: "GENERATING",
		3: "COMPLETED",
	}
	Message_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"PENDING":           1,
		"GENERATING":        2,
		"COMPLETED":         3,
	}
)

func (x Message_State) Enum() *Message_State {
	p := new(Message_State)
	*p = x
	return p
}

func (x Message_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_State) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_assistants_v0_assistant_proto_enumTypes[2].Descriptor()
}

func (Message_State) Type() protoreflect.EnumType {
	return &file_ai_assistants_v0_assistant_proto_enumTypes[2]
}

func (x Message_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_State.Descriptor instead.
func (Message_State) EnumDescriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{24, 0}
}

// The enumeration of states that a Run may be in.
// buf:lint:ignore ENUM_VALUE_PREFIX
type Run_State int32

const (
	Run_STATE_UNSPECIFIED Run_State = 0
	// The Run is pending execution.
	Run_PENDING Run_State = 1
	// The Run is currently executing.
	Run_RUNNING Run_State = 2
	// The Run has completed successfully.
	Run_SUCCEEDED Run_State = 3
	// The Run has failed with an error. See the `failure_reason` field for details.
	Run_FAILED Run_State = 4
	// The Run has yielded and requires a tool response as input from the user to proceed.
	Run_TOOL_RESPONSE_REQUIRED Run_State = 5
)

// Enum value maps for Run_State.
var (
	Run_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "PENDING",
		2: "RUNNING",
		3: "SUCCEEDED",
		4: "FAILED",
		5: "TOOL_RESPONSE_REQUIRED",
	}
	Run_State_value = map[string]int32{
		"STATE_UNSPECIFIED":      0,
		"PENDING":                1,
		"RUNNING":                2,
		"SUCCEEDED":              3,
		"FAILED":                 4,
		"TOOL_RESPONSE_REQUIRED": 5,
	}
)

func (x Run_State) Enum() *Run_State {
	p := new(Run_State)
	*p = x
	return p
}

func (x Run_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Run_State) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_assistants_v0_assistant_proto_enumTypes[3].Descriptor()
}

func (Run_State) Type() protoreflect.EnumType {
	return &file_ai_assistants_v0_assistant_proto_enumTypes[3]
}

func (x Run_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Run_State.Descriptor instead.
func (Run_State) EnumDescriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{32, 0}
}

// Allowed rating values.
// buf:lint:ignore ENUM_VALUE_PREFIX
type CreateRunFeedbackRequest_Rating int32

const (
	CreateRunFeedbackRequest_RATING_UNSPECIFIED CreateRunFeedbackRequest_Rating = 0
	CreateRunFeedbackRequest_POSITIVE           CreateRunFeedbackRequest_Rating = 1
	CreateRunFeedbackRequest_NEGATIVE           CreateRunFeedbackRequest_Rating = 2
	CreateRunFeedbackRequest_NEUTRAL            CreateRunFeedbackRequest_Rating = 3
)

// Enum value maps for CreateRunFeedbackRequest_Rating.
var (
	CreateRunFeedbackRequest_Rating_name = map[int32]string{
		0: "RATING_UNSPECIFIED",
		1: "POSITIVE",
		2: "NEGATIVE",
		3: "NEUTRAL",
	}
	CreateRunFeedbackRequest_Rating_value = map[string]int32{
		"RATING_UNSPECIFIED": 0,
		"POSITIVE":           1,
		"NEGATIVE":           2,
		"NEUTRAL":            3,
	}
)

func (x CreateRunFeedbackRequest_Rating) Enum() *CreateRunFeedbackRequest_Rating {
	p := new(CreateRunFeedbackRequest_Rating)
	*p = x
	return p
}

func (x CreateRunFeedbackRequest_Rating) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateRunFeedbackRequest_Rating) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_assistants_v0_assistant_proto_enumTypes[4].Descriptor()
}

func (CreateRunFeedbackRequest_Rating) Type() protoreflect.EnumType {
	return &file_ai_assistants_v0_assistant_proto_enumTypes[4]
}

func (x CreateRunFeedbackRequest_Rating) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateRunFeedbackRequest_Rating.Descriptor instead.
func (CreateRunFeedbackRequest_Rating) EnumDescriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{42, 0}
}

// Request for the ListEngines method.
type ListEnginesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL. The engine to filter for.
	Engine string `protobuf:"bytes,1,opt,name=engine,proto3" json:"engine,omitempty"`
	// OPTIONAL. Filter for only recommended models.
	Recommended bool `protobuf:"varint,2,opt,name=recommended,proto3" json:"recommended,omitempty"`
	// OPTIONAL. The input formats to filter for.
	InputFormats []ai.Model_InputFormats `protobuf:"varint,3,rep,packed,name=input_formats,json=inputFormats,proto3,enum=ai.Model_InputFormats" json:"input_formats,omitempty"`
	// OPTIONAL. The tags to filter for.
	Tags []ai.Model_Tag `protobuf:"varint,4,rep,packed,name=tags,proto3,enum=ai.Model_Tag" json:"tags,omitempty"`
}

func (x *ListEnginesRequest) Reset() {
	*x = ListEnginesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnginesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnginesRequest) ProtoMessage() {}

func (x *ListEnginesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnginesRequest.ProtoReflect.Descriptor instead.
func (*ListEnginesRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{0}
}

func (x *ListEnginesRequest) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *ListEnginesRequest) GetRecommended() bool {
	if x != nil {
		return x.Recommended
	}
	return false
}

func (x *ListEnginesRequest) GetInputFormats() []ai.Model_InputFormats {
	if x != nil {
		return x.InputFormats
	}
	return nil
}

func (x *ListEnginesRequest) GetTags() []ai.Model_Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Response for the ListEngines method.
type ListEnginesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of engines and their available models
	Engines []*ListEnginesResponse_EngineDescriptor `protobuf:"bytes,1,rep,name=engines,proto3" json:"engines,omitempty"`
}

func (x *ListEnginesResponse) Reset() {
	*x = ListEnginesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnginesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnginesResponse) ProtoMessage() {}

func (x *ListEnginesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnginesResponse.ProtoReflect.Descriptor instead.
func (*ListEnginesResponse) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{1}
}

func (x *ListEnginesResponse) GetEngines() []*ListEnginesResponse_EngineDescriptor {
	if x != nil {
		return x.Engines
	}
	return nil
}

type Assistant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName       string             `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description       string             `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StoreId           string             `protobuf:"bytes,4,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	Engine            string             `protobuf:"bytes,5,opt,name=engine,proto3" json:"engine,omitempty"`
	Model             string             `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	Instructions      string             `protobuf:"bytes,7,opt,name=instructions,proto3" json:"instructions,omitempty"`
	ModelSettings     *ModelSettings     `protobuf:"bytes,8,opt,name=model_settings,json=modelSettings,proto3" json:"model_settings,omitempty"`
	RetrievalSettings *RetrievalSettings `protobuf:"bytes,9,opt,name=retrieval_settings,json=retrievalSettings,proto3" json:"retrieval_settings,omitempty"`
	// Enables citation generation for the Assistant.
	// If citations are enabled, the Assistant will generate citations for facts that were used when generating the response.
	// Citations require a store_id to be set.
	CitationsEnabled bool `protobuf:"varint,21,opt,name=citations_enabled,json=citationsEnabled,proto3" json:"citations_enabled,omitempty"`
	// A list of sub-assistants that this assistant will call.
	// Responses from sub-assistants will be combined and used as input to the main assistant.
	SubAssistants []string `protobuf:"bytes,15,rep,name=sub_assistants,json=subAssistants,proto3" json:"sub_assistants,omitempty"`
	// Indicates that sub-assistants should be treated as tools rather than than fan-out.
	SubAssistantsAsTools bool `protobuf:"varint,16,opt,name=sub_assistants_as_tools,json=subAssistantsAsTools,proto3" json:"sub_assistants_as_tools,omitempty"`
	// A list of tools that the assistant can call
	Tools []*Tool `protobuf:"bytes,13,rep,name=tools,proto3" json:"tools,omitempty"`
	// EXPERIMENTAL. MCP Server to use for this Assistant.
	McpServer string `protobuf:"bytes,22,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`
	// JSON schema for the response.
	// Not all models support this feature. This field will be will be ignored if not supported.
	ResponseJsonSchema *JsonSchemaResponseFormat `protobuf:"bytes,19,opt,name=response_json_schema,json=responseJsonSchema,proto3" json:"response_json_schema,omitempty"`
	// Indicates that the Assistant is certified by the Applied AI team.
	Certified bool `protobuf:"varint,20,opt,name=certified,proto3" json:"certified,omitempty"`
	// Owner of the assistant
	// Deprecated: See `owners` field.
	//
	// Deprecated: Marked as deprecated in ai/assistants/v0/assistant.proto.
	Owner string `protobuf:"bytes,11,opt,name=owner,proto3" json:"owner,omitempty"`
	// Owners of the Assistant
	// Owners are granted the ability to edit, delete, and upload to an Assistant.
	// The user that created the Assistant is set as the initial owner if owners are not set at create time.
	Owners []string `protobuf:"bytes,17,rep,name=owners,proto3" json:"owners,omitempty"`
	// Users that are allowed to upload to the Assistant's store.
	Uploaders []string `protobuf:"bytes,18,rep,name=uploaders,proto3" json:"uploaders,omitempty"`
	// List of viewers of the assistant
	// Values may be either:
	// - `domain:example.com` to allow all users in the domain to view the store
	// - `user:user@example.com` to allow a specific user to view the store
	Viewers []string `protobuf:"bytes,12,rep,name=viewers,proto3" json:"viewers,omitempty"`
	// Metadata associated with the assistant
	// This can be used to store additional information about the assistant.
	// Can be set on created but not updated.
	Metadata   map[string]string      `protobuf:"bytes,14,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *Assistant) Reset() {
	*x = Assistant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assistant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assistant) ProtoMessage() {}

func (x *Assistant) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assistant.ProtoReflect.Descriptor instead.
func (*Assistant) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{2}
}

func (x *Assistant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Assistant) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Assistant) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Assistant) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *Assistant) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *Assistant) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Assistant) GetInstructions() string {
	if x != nil {
		return x.Instructions
	}
	return ""
}

func (x *Assistant) GetModelSettings() *ModelSettings {
	if x != nil {
		return x.ModelSettings
	}
	return nil
}

func (x *Assistant) GetRetrievalSettings() *RetrievalSettings {
	if x != nil {
		return x.RetrievalSettings
	}
	return nil
}

func (x *Assistant) GetCitationsEnabled() bool {
	if x != nil {
		return x.CitationsEnabled
	}
	return false
}

func (x *Assistant) GetSubAssistants() []string {
	if x != nil {
		return x.SubAssistants
	}
	return nil
}

func (x *Assistant) GetSubAssistantsAsTools() bool {
	if x != nil {
		return x.SubAssistantsAsTools
	}
	return false
}

func (x *Assistant) GetTools() []*Tool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *Assistant) GetMcpServer() string {
	if x != nil {
		return x.McpServer
	}
	return ""
}

func (x *Assistant) GetResponseJsonSchema() *JsonSchemaResponseFormat {
	if x != nil {
		return x.ResponseJsonSchema
	}
	return nil
}

func (x *Assistant) GetCertified() bool {
	if x != nil {
		return x.Certified
	}
	return false
}

// Deprecated: Marked as deprecated in ai/assistants/v0/assistant.proto.
func (x *Assistant) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Assistant) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *Assistant) GetUploaders() []string {
	if x != nil {
		return x.Uploaders
	}
	return nil
}

func (x *Assistant) GetViewers() []string {
	if x != nil {
		return x.Viewers
	}
	return nil
}

func (x *Assistant) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Assistant) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

// A schema specification for a JSON response.
type JsonSchemaResponseFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED. The JSON schema to use for the response.
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	// OPTIONAL. The description of the schema.
	// This may be used by the model to determine how to respond in the specified format.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *JsonSchemaResponseFormat) Reset() {
	*x = JsonSchemaResponseFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonSchemaResponseFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonSchemaResponseFormat) ProtoMessage() {}

func (x *JsonSchemaResponseFormat) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonSchemaResponseFormat.ProtoReflect.Descriptor instead.
func (*JsonSchemaResponseFormat) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{3}
}

func (x *JsonSchemaResponseFormat) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *JsonSchemaResponseFormat) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateAssistantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName       string             `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description       string             `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	StoreId           string             `protobuf:"bytes,3,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	Engine            string             `protobuf:"bytes,4,opt,name=engine,proto3" json:"engine,omitempty"`
	Model             string             `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty"`
	Instructions      string             `protobuf:"bytes,6,opt,name=instructions,proto3" json:"instructions,omitempty"`
	ModelSettings     *ModelSettings     `protobuf:"bytes,7,opt,name=model_settings,json=modelSettings,proto3" json:"model_settings,omitempty"`
	RetrievalSettings *RetrievalSettings `protobuf:"bytes,8,opt,name=retrieval_settings,json=retrievalSettings,proto3" json:"retrieval_settings,omitempty"`
	// OPTIONAL. Enables citation generation for the Assistant.
	// If citations are enabled, the Assistant will generate citations for facts that were used when generating the response.
	// Citations require a store_id to be set.
	CitationsEnabled bool `protobuf:"varint,17,opt,name=citations_enabled,json=citationsEnabled,proto3" json:"citations_enabled,omitempty"`
	// A list of sub-assistants that this assistant may call.
	SubAssistants []string `protobuf:"bytes,12,rep,name=sub_assistants,json=subAssistants,proto3" json:"sub_assistants,omitempty"`
	// Indicates that sub-assistants should be treated as tools rather than than fan-out.
	SubAssistantsAsTools bool `protobuf:"varint,13,opt,name=sub_assistants_as_tools,json=subAssistantsAsTools,proto3" json:"sub_assistants_as_tools,omitempty"`
	// A list of tools that the assistant can call
	Tools []*Tool `protobuf:"bytes,10,rep,name=tools,proto3" json:"tools,omitempty"`
	// EXPERIMENTAL. MCP Server to use for this Assistant.
	McpServer string `protobuf:"bytes,22,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`
	// OPTIONAL. JSON schema for the response.
	// Not all models support this feature. This field will be will be ignored if not supported.
	ResponseJsonSchema *JsonSchemaResponseFormat `protobuf:"bytes,16,opt,name=response_json_schema,json=responseJsonSchema,proto3" json:"response_json_schema,omitempty"`
	// Owners of the Assistant
	// Owners are granted the ability to edit, delete, and upload to an Assistant.
	// The user that created the Assistant is set as the initial owner if owners are not set at create time.
	Owners []string `protobuf:"bytes,14,rep,name=owners,proto3" json:"owners,omitempty"`
	// Users that are allowed to upload to the Assistant's store.
	Uploaders []string `protobuf:"bytes,15,rep,name=uploaders,proto3" json:"uploaders,omitempty"`
	// List of viewers of the assistant
	// Values may be either:
	// - `domain:example.com` to allow all users in the domain to view the store
	// - `user:user@example.com` to allow a specific user to view the store
	Viewers []string `protobuf:"bytes,9,rep,name=viewers,proto3" json:"viewers,omitempty"`
	// Metadata associated with the assistant
	// This can be used to store additional information about the assistant.
	// Can be set on created but not updated.
	Metadata map[string]string `protobuf:"bytes,11,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateAssistantRequest) Reset() {
	*x = CreateAssistantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAssistantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssistantRequest) ProtoMessage() {}

func (x *CreateAssistantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssistantRequest.ProtoReflect.Descriptor instead.
func (*CreateAssistantRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{4}
}

func (x *CreateAssistantRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreateAssistantRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateAssistantRequest) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *CreateAssistantRequest) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *CreateAssistantRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CreateAssistantRequest) GetInstructions() string {
	if x != nil {
		return x.Instructions
	}
	return ""
}

func (x *CreateAssistantRequest) GetModelSettings() *ModelSettings {
	if x != nil {
		return x.ModelSettings
	}
	return nil
}

func (x *CreateAssistantRequest) GetRetrievalSettings() *RetrievalSettings {
	if x != nil {
		return x.RetrievalSettings
	}
	return nil
}

func (x *CreateAssistantRequest) GetCitationsEnabled() bool {
	if x != nil {
		return x.CitationsEnabled
	}
	return false
}

func (x *CreateAssistantRequest) GetSubAssistants() []string {
	if x != nil {
		return x.SubAssistants
	}
	return nil
}

func (x *CreateAssistantRequest) GetSubAssistantsAsTools() bool {
	if x != nil {
		return x.SubAssistantsAsTools
	}
	return false
}

func (x *CreateAssistantRequest) GetTools() []*Tool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *CreateAssistantRequest) GetMcpServer() string {
	if x != nil {
		return x.McpServer
	}
	return ""
}

func (x *CreateAssistantRequest) GetResponseJsonSchema() *JsonSchemaResponseFormat {
	if x != nil {
		return x.ResponseJsonSchema
	}
	return nil
}

func (x *CreateAssistantRequest) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *CreateAssistantRequest) GetUploaders() []string {
	if x != nil {
		return x.Uploaders
	}
	return nil
}

func (x *CreateAssistantRequest) GetViewers() []string {
	if x != nil {
		return x.Viewers
	}
	return nil
}

func (x *CreateAssistantRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetAssistantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAssistantRequest) Reset() {
	*x = GetAssistantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssistantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssistantRequest) ProtoMessage() {}

func (x *GetAssistantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssistantRequest.ProtoReflect.Descriptor instead.
func (*GetAssistantRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{5}
}

func (x *GetAssistantRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListAssistantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL. Maximum number of assistants to return in a single page.
	// If unspecified, at most 50 will be returned. The maximum value is 100; values over
	// 100 will be coerced to 100.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// OPTIONAL. Token of the previous call to ListAssistants used to retrieve the next page.
	// All other fields must match the previous call.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// OPTIONAL. Store ID to filter for.
	StoreId string `protobuf:"bytes,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	// OPTIONAL. Metadata to filter for. Metadata keys and values are case-sensitive.
	// Metadata values are AND-ed together, so only records that have all the specified metadata will be returned.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// OPTIONAL. Filter for only certified Assistants.
	// Leaving this value empty or setting it to false will return all Assistants.
	Certified bool `protobuf:"varint,5,opt,name=certified,proto3" json:"certified,omitempty"`
}

func (x *ListAssistantsRequest) Reset() {
	*x = ListAssistantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssistantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssistantsRequest) ProtoMessage() {}

func (x *ListAssistantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssistantsRequest.ProtoReflect.Descriptor instead.
func (*ListAssistantsRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{6}
}

func (x *ListAssistantsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAssistantsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListAssistantsRequest) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *ListAssistantsRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ListAssistantsRequest) GetCertified() bool {
	if x != nil {
		return x.Certified
	}
	return false
}

type ListAssistantsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assistants    []*Assistant `protobuf:"bytes,1,rep,name=assistants,proto3" json:"assistants,omitempty"`
	NextPageToken string       `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListAssistantsResponse) Reset() {
	*x = ListAssistantsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssistantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssistantsResponse) ProtoMessage() {}

func (x *ListAssistantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssistantsResponse.ProtoReflect.Descriptor instead.
func (*ListAssistantsResponse) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{7}
}

func (x *ListAssistantsResponse) GetAssistants() []*Assistant {
	if x != nil {
		return x.Assistants
	}
	return nil
}

func (x *ListAssistantsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// A request to update an assistant.
// Only fields that are set to non-zero values, or non-null in the case of `optional` fields, will be updated.
type UpdateAssistantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The display name of the assistant
	DisplayName       string             `protobuf:"bytes,10,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description       string             `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	StoreId           string             `protobuf:"bytes,2,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	Engine            string             `protobuf:"bytes,3,opt,name=engine,proto3" json:"engine,omitempty"`
	Model             string             `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	Instructions      string             `protobuf:"bytes,5,opt,name=instructions,proto3" json:"instructions,omitempty"`
	ModelSettings     *ModelSettings     `protobuf:"bytes,6,opt,name=model_settings,json=modelSettings,proto3" json:"model_settings,omitempty"`
	RetrievalSettings *RetrievalSettings `protobuf:"bytes,7,opt,name=retrieval_settings,json=retrievalSettings,proto3" json:"retrieval_settings,omitempty"`
	// OPTIONAL. Enables citation generation for the Assistant.
	// If citations are enabled, the Assistant will generate citations for facts that were used when generating the response.
	// Citations require a store_id to be set.
	CitationsEnabled *bool `protobuf:"varint,16,opt,name=citations_enabled,json=citationsEnabled,proto3,oneof" json:"citations_enabled,omitempty"`
	// OPTIONAL. A list of sub-assistants that this assistant may call.
	SubAssistants *_type.StringList `protobuf:"bytes,14,opt,name=sub_assistants,json=subAssistants,proto3" json:"sub_assistants,omitempty"`
	// OPTIONAL. Indicates that sub-assistants should be treated as tools rather than than fan-out.
	SubAssistantsAsTools *bool `protobuf:"varint,15,opt,name=sub_assistants_as_tools,json=subAssistantsAsTools,proto3,oneof" json:"sub_assistants_as_tools,omitempty"`
	// Metadata associated with the Assistant.
	Metadata *UpdateAssistantRequest_Metadata `protobuf:"bytes,13,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// A list of tools that the assistant can call
	Tools *Tools `protobuf:"bytes,17,opt,name=tools,proto3" json:"tools,omitempty"`
	// EXPERIMENTAL. MCP Server to use for this Assistant.
	McpServer *string `protobuf:"bytes,22,opt,name=mcp_server,json=mcpServer,proto3,oneof" json:"mcp_server,omitempty"`
	// OPTIONAL. JSON schema for the response.
	// Not all models support this feature. This field will be will be ignored if not supported.
	ResponseJsonSchema *JsonSchemaResponseFormat `protobuf:"bytes,18,opt,name=response_json_schema,json=responseJsonSchema,proto3" json:"response_json_schema,omitempty"`
	// List of Owners to update on the Assistant
	Owners *UpdateAssistantRequest_OwnerList `protobuf:"bytes,11,opt,name=owners,proto3" json:"owners,omitempty"`
	// List of uploaders to update on the Assistant.
	Uploaders *UpdateAssistantRequest_UploaderList `protobuf:"bytes,12,opt,name=uploaders,proto3" json:"uploaders,omitempty"`
	// List of viewers of the assistant
	Viewers *UpdateAssistantRequest_ViewerList `protobuf:"bytes,9,opt,name=viewers,proto3" json:"viewers,omitempty"`
}

func (x *UpdateAssistantRequest) Reset() {
	*x = UpdateAssistantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssistantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssistantRequest) ProtoMessage() {}

func (x *UpdateAssistantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssistantRequest.ProtoReflect.Descriptor instead.
func (*UpdateAssistantRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateAssistantRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAssistantRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UpdateAssistantRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateAssistantRequest) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *UpdateAssistantRequest) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *UpdateAssistantRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *UpdateAssistantRequest) GetInstructions() string {
	if x != nil {
		return x.Instructions
	}
	return ""
}

func (x *UpdateAssistantRequest) GetModelSettings() *ModelSettings {
	if x != nil {
		return x.ModelSettings
	}
	return nil
}

func (x *UpdateAssistantRequest) GetRetrievalSettings() *RetrievalSettings {
	if x != nil {
		return x.RetrievalSettings
	}
	return nil
}

func (x *UpdateAssistantRequest) GetCitationsEnabled() bool {
	if x != nil && x.CitationsEnabled != nil {
		return *x.CitationsEnabled
	}
	return false
}

func (x *UpdateAssistantRequest) GetSubAssistants() *_type.StringList {
	if x != nil {
		return x.SubAssistants
	}
	return nil
}

func (x *UpdateAssistantRequest) GetSubAssistantsAsTools() bool {
	if x != nil && x.SubAssistantsAsTools != nil {
		return *x.SubAssistantsAsTools
	}
	return false
}

func (x *UpdateAssistantRequest) GetMetadata() *UpdateAssistantRequest_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateAssistantRequest) GetTools() *Tools {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *UpdateAssistantRequest) GetMcpServer() string {
	if x != nil && x.McpServer != nil {
		return *x.McpServer
	}
	return ""
}

func (x *UpdateAssistantRequest) GetResponseJsonSchema() *JsonSchemaResponseFormat {
	if x != nil {
		return x.ResponseJsonSchema
	}
	return nil
}

func (x *UpdateAssistantRequest) GetOwners() *UpdateAssistantRequest_OwnerList {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *UpdateAssistantRequest) GetUploaders() *UpdateAssistantRequest_UploaderList {
	if x != nil {
		return x.Uploaders
	}
	return nil
}

func (x *UpdateAssistantRequest) GetViewers() *UpdateAssistantRequest_ViewerList {
	if x != nil {
		return x.Viewers
	}
	return nil
}

type Tools struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tools []*Tool `protobuf:"bytes,1,rep,name=tools,proto3" json:"tools,omitempty"`
}

func (x *Tools) Reset() {
	*x = Tools{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tools) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tools) ProtoMessage() {}

func (x *Tools) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tools.ProtoReflect.Descriptor instead.
func (*Tools) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{9}
}

func (x *Tools) GetTools() []*Tool {
	if x != nil {
		return x.Tools
	}
	return nil
}

type DeleteAssistantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAssistantRequest) Reset() {
	*x = DeleteAssistantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAssistantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssistantRequest) ProtoMessage() {}

func (x *DeleteAssistantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssistantRequest.ProtoReflect.Descriptor instead.
func (*DeleteAssistantRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteAssistantRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for `TestAssistantPermissions` method.
type TestAssistantPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED: The ID of the Assistant to test permissions for.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// REQUIRED: The set of permissions to test.
	// Currently supported permissions are:
	// - `assistant.edit`: Allows the user to edit the properties of the Assistant.
	// - `assistant.delete`: Allows the user to delete the Assistant.
	// - `assistant.upload`: Allows the user to upload files to the Assistant.
	// - `assistant.view`: Allows the user to view the Assistant.
	Permissions []string `protobuf:"bytes,2,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *TestAssistantPermissionsRequest) Reset() {
	*x = TestAssistantPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestAssistantPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAssistantPermissionsRequest) ProtoMessage() {}

func (x *TestAssistantPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAssistantPermissionsRequest.ProtoReflect.Descriptor instead.
func (*TestAssistantPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{11}
}

func (x *TestAssistantPermissionsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestAssistantPermissionsRequest) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// Response message for `TestAssistantPermissions` method.
type TestAssistantPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of permissions that the user has on the Assistant.
	Permissions []string `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *TestAssistantPermissionsResponse) Reset() {
	*x = TestAssistantPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestAssistantPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAssistantPermissionsResponse) ProtoMessage() {}

func (x *TestAssistantPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAssistantPermissionsResponse.ProtoReflect.Descriptor instead.
func (*TestAssistantPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{12}
}

func (x *TestAssistantPermissionsResponse) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// A thread of messages
type Thread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the Thread.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A description of the Thread.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The origin of the Thread.
	// This is used to indicate whether the thread was created by Slack, the UI, or another source.
	Origin string `protobuf:"bytes,5,opt,name=origin,proto3" json:"origin,omitempty"`
	// Metadata associated with the Thread.
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Time the thread was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *Thread) Reset() {
	*x = Thread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thread) ProtoMessage() {}

func (x *Thread) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thread.ProtoReflect.Descriptor instead.
func (*Thread) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{13}
}

func (x *Thread) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Thread) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Thread) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *Thread) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Thread) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

// Request message for creating a Thread.
type CreateThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A description of the Thread.
	// If no description is provided, the first 60 characters of the first message will be used.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. Messages to add to the Thread on creation.
	Messages []*CreateMessageRequest `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	// Optional. Metadata associated with the Thread. This can be used to store additional
	// information about the Thread. Can be set on create but not updated.
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateThreadRequest) Reset() {
	*x = CreateThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateThreadRequest) ProtoMessage() {}

func (x *CreateThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateThreadRequest.ProtoReflect.Descriptor instead.
func (*CreateThreadRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{14}
}

func (x *CreateThreadRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateThreadRequest) GetMessages() []*CreateMessageRequest {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *CreateThreadRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetThreadRequest) Reset() {
	*x = GetThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThreadRequest) ProtoMessage() {}

func (x *GetThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThreadRequest.ProtoReflect.Descriptor instead.
func (*GetThreadRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{15}
}

func (x *GetThreadRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for the `ListThreads` method.
type ListThreadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL. Maximum number of assistants to return in a single page.
	// If unspecified, at most 50 will be returned. The maximum value is 100; values over
	// 100 will be coerced to 100.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// OPTIONAL. Token of the previous call to ListThreads used to retrieve the next page.
	// All other fields must match the previous call.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// OPTIONAL. The origin of the Thread to filter for.
	Origin string `protobuf:"bytes,5,opt,name=origin,proto3" json:"origin,omitempty"`
	// OPTIONAL. Metadata to filter for. Metadata keys and values are case-sensitive.
	// Metadata values are AND-ed together, so only records that have all the specified metadata will be returned.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// OPTIONAL. The direction to sort the returned records.
	// If unspecified, records will be returned in ascending order.
	// Records are sorted by the `create_time` field.
	Order SortOrder `protobuf:"varint,4,opt,name=order,proto3,enum=ai.assistants.v0.SortOrder" json:"order,omitempty"`
}

func (x *ListThreadsRequest) Reset() {
	*x = ListThreadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListThreadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListThreadsRequest) ProtoMessage() {}

func (x *ListThreadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListThreadsRequest.ProtoReflect.Descriptor instead.
func (*ListThreadsRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{16}
}

func (x *ListThreadsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListThreadsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListThreadsRequest) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ListThreadsRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ListThreadsRequest) GetOrder() SortOrder {
	if x != nil {
		return x.Order
	}
	return SortOrder_SORT_ORDER_UNSPECIFIED
}

// Response message for the `ListThreads` method.
type ListThreadsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threads       []*Thread `protobuf:"bytes,1,rep,name=threads,proto3" json:"threads,omitempty"`
	NextPageToken string    `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListThreadsResponse) Reset() {
	*x = ListThreadsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListThreadsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListThreadsResponse) ProtoMessage() {}

func (x *ListThreadsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListThreadsResponse.ProtoReflect.Descriptor instead.
func (*ListThreadsResponse) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{17}
}

func (x *ListThreadsResponse) GetThreads() []*Thread {
	if x != nil {
		return x.Threads
	}
	return nil
}

func (x *ListThreadsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request for the `UpdateThread` method.
type UpdateThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED. The ID of the Thread to update.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// OPTIONAL. A description of the Thread.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// OPTIONAL. Metadata associated with the Thread.
	Metadata *UpdateThreadRequest_Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *UpdateThreadRequest) Reset() {
	*x = UpdateThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateThreadRequest) ProtoMessage() {}

func (x *UpdateThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateThreadRequest.ProtoReflect.Descriptor instead.
func (*UpdateThreadRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateThreadRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateThreadRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateThreadRequest) GetMetadata() *UpdateThreadRequest_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type DeleteThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteThreadRequest) Reset() {
	*x = DeleteThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteThreadRequest) ProtoMessage() {}

func (x *DeleteThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteThreadRequest.ProtoReflect.Descriptor instead.
func (*DeleteThreadRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteThreadRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for the `ShareThread` method.
type ShareThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ShareThreadRequest) Reset() {
	*x = ShareThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareThreadRequest) ProtoMessage() {}

func (x *ShareThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareThreadRequest.ProtoReflect.Descriptor instead.
func (*ShareThreadRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{20}
}

func (x *ShareThreadRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A file attachment
type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source of the file
	//
	// Types that are assignable to Source:
	//
	//	*File_Ref
	Source isFile_Source `protobuf_oneof:"source"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{21}
}

func (m *File) GetSource() isFile_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *File) GetRef() string {
	if x, ok := x.GetSource().(*File_Ref); ok {
		return x.Ref
	}
	return ""
}

type isFile_Source interface {
	isFile_Source()
}

type File_Ref struct {
	// Self ref of a file uploaded to the file-server
	Ref string `protobuf:"bytes,1,opt,name=ref,proto3,oneof"`
}

func (*File_Ref) isFile_Source() {}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//
	//	*Image_Url
	//	*Image_Data_
	Source isImage_Source `protobuf_oneof:"source"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{22}
}

func (m *Image) GetSource() isImage_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *Image) GetUrl() string {
	if x, ok := x.GetSource().(*Image_Url); ok {
		return x.Url
	}
	return ""
}

func (x *Image) GetData() *Image_Data {
	if x, ok := x.GetSource().(*Image_Data_); ok {
		return x.Data
	}
	return nil
}

type isImage_Source interface {
	isImage_Source()
}

type Image_Url struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3,oneof"`
}

type Image_Data_ struct {
	Data *Image_Data `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*Image_Url) isImage_Source() {}

func (*Image_Data_) isImage_Source() {}

type MessageContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*MessageContent_Text
	//	*MessageContent_Image
	//	*MessageContent_File
	Content isMessageContent_Content `protobuf_oneof:"content"`
	// The set of citations for this message content.
	// Only set for text content.
	Citations []*MessageContent_Citation `protobuf:"bytes,4,rep,name=citations,proto3" json:"citations,omitempty"`
}

func (x *MessageContent) Reset() {
	*x = MessageContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageContent) ProtoMessage() {}

func (x *MessageContent) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageContent.ProtoReflect.Descriptor instead.
func (*MessageContent) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{23}
}

func (m *MessageContent) GetContent() isMessageContent_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *MessageContent) GetText() string {
	if x, ok := x.GetContent().(*MessageContent_Text); ok {
		return x.Text
	}
	return ""
}

func (x *MessageContent) GetImage() *Image {
	if x, ok := x.GetContent().(*MessageContent_Image); ok {
		return x.Image
	}
	return nil
}

func (x *MessageContent) GetFile() *File {
	if x, ok := x.GetContent().(*MessageContent_File); ok {
		return x.File
	}
	return nil
}

func (x *MessageContent) GetCitations() []*MessageContent_Citation {
	if x != nil {
		return x.Citations
	}
	return nil
}

type isMessageContent_Content interface {
	isMessageContent_Content()
}

type MessageContent_Text struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type MessageContent_Image struct {
	Image *Image `protobuf:"bytes,2,opt,name=image,proto3,oneof"`
}

type MessageContent_File struct {
	File *File `protobuf:"bytes,3,opt,name=file,proto3,oneof"`
}

func (*MessageContent_Text) isMessageContent_Content() {}

func (*MessageContent_Image) isMessageContent_Content() {}

func (*MessageContent_File) isMessageContent_Content() {}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Role     Role              `protobuf:"varint,2,opt,name=role,proto3,enum=ai.assistants.v0.Role" json:"role,omitempty"`
	Content  []*MessageContent `protobuf:"bytes,3,rep,name=content,proto3" json:"content,omitempty"`
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// State of the message.
	// Deprecated: Will always be set as COMPLETED.
	//
	// Deprecated: Marked as deprecated in ai/assistants/v0/assistant.proto.
	State      Message_State          `protobuf:"varint,5,opt,name=state,proto3,enum=ai.assistants.v0.Message_State" json:"state,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	RunId      string                 `protobuf:"bytes,8,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{24}
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Message) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_ROLE_UNSPECIFIED
}

func (x *Message) GetContent() []*MessageContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Message) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Deprecated: Marked as deprecated in ai/assistants/v0/assistant.proto.
func (x *Message) GetState() Message_State {
	if x != nil {
		return x.State
	}
	return Message_STATE_UNSPECIFIED
}

func (x *Message) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Message) GetModifyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifyTime
	}
	return nil
}

func (x *Message) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type ModelSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxTokens   *uint32  `protobuf:"varint,1,opt,name=max_tokens,json=maxTokens,proto3,oneof" json:"max_tokens,omitempty"`
	Temperature *float32 `protobuf:"fixed32,2,opt,name=temperature,proto3,oneof" json:"temperature,omitempty"`
}

func (x *ModelSettings) Reset() {
	*x = ModelSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelSettings) ProtoMessage() {}

func (x *ModelSettings) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelSettings.ProtoReflect.Descriptor instead.
func (*ModelSettings) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{25}
}

func (x *ModelSettings) GetMaxTokens() uint32 {
	if x != nil && x.MaxTokens != nil {
		return *x.MaxTokens
	}
	return 0
}

func (x *ModelSettings) GetTemperature() float32 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

type RetrievalSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopK              *int32   `protobuf:"varint,1,opt,name=top_k,json=topK,proto3,oneof" json:"top_k,omitempty"`
	MinRelevanceScore *float32 `protobuf:"fixed32,4,opt,name=min_relevance_score,json=minRelevanceScore,proto3,oneof" json:"min_relevance_score,omitempty"`
}

func (x *RetrievalSettings) Reset() {
	*x = RetrievalSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrievalSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrievalSettings) ProtoMessage() {}

func (x *RetrievalSettings) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrievalSettings.ProtoReflect.Descriptor instead.
func (*RetrievalSettings) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{26}
}

func (x *RetrievalSettings) GetTopK() int32 {
	if x != nil && x.TopK != nil {
		return *x.TopK
	}
	return 0
}

func (x *RetrievalSettings) GetMinRelevanceScore() float32 {
	if x != nil && x.MinRelevanceScore != nil {
		return *x.MinRelevanceScore
	}
	return 0
}

type CreateMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId    string                             `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	Role        Role                               `protobuf:"varint,2,opt,name=role,proto3,enum=ai.assistants.v0.Role" json:"role,omitempty"`
	Content     string                             `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Attachments []*CreateMessageRequest_Attachment `protobuf:"bytes,4,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// Optional. Metadata associated with the Message. This can be used to store additional
	// information about the Message. Can be set on create but not updated.
	Metadata map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateMessageRequest) Reset() {
	*x = CreateMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMessageRequest) ProtoMessage() {}

func (x *CreateMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMessageRequest.ProtoReflect.Descriptor instead.
func (*CreateMessageRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{27}
}

func (x *CreateMessageRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *CreateMessageRequest) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_ROLE_UNSPECIFIED
}

func (x *CreateMessageRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateMessageRequest) GetAttachments() []*CreateMessageRequest_Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *CreateMessageRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId  string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	MessageId string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *GetMessageRequest) Reset() {
	*x = GetMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageRequest) ProtoMessage() {}

func (x *GetMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageRequest.ProtoReflect.Descriptor instead.
func (*GetMessageRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{28}
}

func (x *GetMessageRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *GetMessageRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

type ListMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED. The thread to list messages for.
	ThreadId string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	// OPTIONAL. Maximum number of assistants to return in a single page.
	// If unspecified, at most 50 will be returned. The maximum value is 100; values over
	// 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// OPTIONAL. Token of the previous call to ListMessages used to retrieve the next page.
	// All other fields must match the previous call.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// OPTIONAL. The direction to sort the returned records.
	// If unspecified, records will be returned in ascending order.
	// Records are sorted by the `create_time` field.
	Order SortOrder `protobuf:"varint,6,opt,name=order,proto3,enum=ai.assistants.v0.SortOrder" json:"order,omitempty"`
	// OPTIONAL. The ID of the Run to filter for.
	RunId string `protobuf:"bytes,5,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// OPTIONAL. Metadata to filter for. Metadata keys and values are case-sensitive.
	// Metadata values are AND-ed together, so only records that have all the specified metadata will be returned.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListMessagesRequest) Reset() {
	*x = ListMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessagesRequest) ProtoMessage() {}

func (x *ListMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessagesRequest.ProtoReflect.Descriptor instead.
func (*ListMessagesRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{29}
}

func (x *ListMessagesRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *ListMessagesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMessagesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListMessagesRequest) GetOrder() SortOrder {
	if x != nil {
		return x.Order
	}
	return SortOrder_SORT_ORDER_UNSPECIFIED
}

func (x *ListMessagesRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ListMessagesRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ListMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages      []*Message `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	NextPageToken string     `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListMessagesResponse) Reset() {
	*x = ListMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessagesResponse) ProtoMessage() {}

func (x *ListMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessagesResponse.ProtoReflect.Descriptor instead.
func (*ListMessagesResponse) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{30}
}

func (x *ListMessagesResponse) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ListMessagesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type SourceFact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text     string            `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SourceFact) Reset() {
	*x = SourceFact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceFact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceFact) ProtoMessage() {}

func (x *SourceFact) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceFact.ProtoReflect.Descriptor instead.
func (*SourceFact) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{31}
}

func (x *SourceFact) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SourceFact) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Run struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ThreadId          string             `protobuf:"bytes,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	AssistantId       string             `protobuf:"bytes,3,opt,name=assistant_id,json=assistantId,proto3" json:"assistant_id,omitempty"`
	StoreId           string             `protobuf:"bytes,4,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	Engine            string             `protobuf:"bytes,5,opt,name=engine,proto3" json:"engine,omitempty"`
	Model             string             `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	Instructions      string             `protobuf:"bytes,7,opt,name=instructions,proto3" json:"instructions,omitempty"`
	ModelSettings     *ModelSettings     `protobuf:"bytes,8,opt,name=model_settings,json=modelSettings,proto3" json:"model_settings,omitempty"`
	RetrievalSettings *RetrievalSettings `protobuf:"bytes,9,opt,name=retrieval_settings,json=retrievalSettings,proto3" json:"retrieval_settings,omitempty"`
	// Enables citation generation for the Assistant.
	// If citations are enabled, the Assistant will generate citations for facts that were used when generating the response.
	// Citations require a store_id to be set.
	CitationsEnabled bool `protobuf:"varint,24,opt,name=citations_enabled,json=citationsEnabled,proto3" json:"citations_enabled,omitempty"`
	// A list of sub-assistants that will be invoked by this Run.
	// Responses from sub-assistants will be combined and used as input to the primary assistant specified on this Run.
	SubAssistants []string `protobuf:"bytes,19,rep,name=sub_assistants,json=subAssistants,proto3" json:"sub_assistants,omitempty"`
	// A list of Run IDs for Runs created by Sub-Assistants.
	ChildRunIds []string `protobuf:"bytes,25,rep,name=child_run_ids,json=childRunIds,proto3" json:"child_run_ids,omitempty"`
	// Indicates that sub-assistants should be treated as tools rather than than fan-out
	SubAssistantsAsTools bool `protobuf:"varint,20,opt,name=sub_assistants_as_tools,json=subAssistantsAsTools,proto3" json:"sub_assistants_as_tools,omitempty"`
	// Metadata associated with the run
	Metadata map[string]string `protobuf:"bytes,15,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The set of tools that the model can call
	Tools []*Tool `protobuf:"bytes,17,rep,name=tools,proto3" json:"tools,omitempty"`
	// EXPERIMENTAL. MCP Server to use for this Run.
	McpServer string `protobuf:"bytes,26,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`
	// The set of tool calls that have been made during the run
	ToolCalls []*ToolCall `protobuf:"bytes,18,rep,name=tool_calls,json=toolCalls,proto3" json:"tool_calls,omitempty"`
	// JSON schema for the response.
	// Not all models support this feature. This field will be will be ignored if not supported.
	ResponseJsonSchema *JsonSchemaResponseFormat `protobuf:"bytes,21,opt,name=response_json_schema,json=responseJsonSchema,proto3" json:"response_json_schema,omitempty"`
	// The current state of the Run.
	State Run_State `protobuf:"varint,10,opt,name=state,proto3,enum=ai.assistants.v0.Run_State" json:"state,omitempty"`
	// The reason the Run failed. Only set when the state is `FAILED`.
	FailureReason string `protobuf:"bytes,11,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	// Documents provided to the LLM run as context
	ContextDocuments []*Run_ContextDocument `protobuf:"bytes,16,rep,name=context_documents,json=contextDocuments,proto3" json:"context_documents,omitempty"`
	// Facts used in the Run
	SourceFacts []*SourceFact `protobuf:"bytes,22,rep,name=source_facts,json=sourceFacts,proto3" json:"source_facts,omitempty"`
	// Citations to facts referenced in the generated response.
	// Deprecated: Superseded by the `citations` field on `MessageContent`.
	//
	// Deprecated: Marked as deprecated in ai/assistants/v0/assistant.proto.
	Citations  []*Run_Citation        `protobuf:"bytes,23,rep,name=citations,proto3" json:"citations,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	StartTime  *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime    *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *Run) Reset() {
	*x = Run{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Run) ProtoMessage() {}

func (x *Run) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Run.ProtoReflect.Descriptor instead.
func (*Run) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{32}
}

func (x *Run) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Run) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *Run) GetAssistantId() string {
	if x != nil {
		return x.AssistantId
	}
	return ""
}

func (x *Run) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *Run) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *Run) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Run) GetInstructions() string {
	if x != nil {
		return x.Instructions
	}
	return ""
}

func (x *Run) GetModelSettings() *ModelSettings {
	if x != nil {
		return x.ModelSettings
	}
	return nil
}

func (x *Run) GetRetrievalSettings() *RetrievalSettings {
	if x != nil {
		return x.RetrievalSettings
	}
	return nil
}

func (x *Run) GetCitationsEnabled() bool {
	if x != nil {
		return x.CitationsEnabled
	}
	return false
}

func (x *Run) GetSubAssistants() []string {
	if x != nil {
		return x.SubAssistants
	}
	return nil
}

func (x *Run) GetChildRunIds() []string {
	if x != nil {
		return x.ChildRunIds
	}
	return nil
}

func (x *Run) GetSubAssistantsAsTools() bool {
	if x != nil {
		return x.SubAssistantsAsTools
	}
	return false
}

func (x *Run) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Run) GetTools() []*Tool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *Run) GetMcpServer() string {
	if x != nil {
		return x.McpServer
	}
	return ""
}

func (x *Run) GetToolCalls() []*ToolCall {
	if x != nil {
		return x.ToolCalls
	}
	return nil
}

func (x *Run) GetResponseJsonSchema() *JsonSchemaResponseFormat {
	if x != nil {
		return x.ResponseJsonSchema
	}
	return nil
}

func (x *Run) GetState() Run_State {
	if x != nil {
		return x.State
	}
	return Run_STATE_UNSPECIFIED
}

func (x *Run) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

func (x *Run) GetContextDocuments() []*Run_ContextDocument {
	if x != nil {
		return x.ContextDocuments
	}
	return nil
}

func (x *Run) GetSourceFacts() []*SourceFact {
	if x != nil {
		return x.SourceFacts
	}
	return nil
}

// Deprecated: Marked as deprecated in ai/assistants/v0/assistant.proto.
func (x *Run) GetCitations() []*Run_Citation {
	if x != nil {
		return x.Citations
	}
	return nil
}

func (x *Run) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Run) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Run) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// Request message for the `CreateThreadAndRun` method.
type CreateThreadAndRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED. Configuration for the Thread to create.
	Thread *CreateThreadRequest `protobuf:"bytes,1,opt,name=thread,proto3" json:"thread,omitempty"`
	// REQUIRED. ID of the Assistant to execute.
	AssistantId string `protobuf:"bytes,2,opt,name=assistant_id,json=assistantId,proto3" json:"assistant_id,omitempty"`
	// OPTIONAL. The chat engine to use for this Run.
	Engine string `protobuf:"bytes,3,opt,name=engine,proto3" json:"engine,omitempty"`
	// OPTIONAL. The model to use for this Run.
	Model string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	// OPTIONAL. The system instructions to use for this Run. This completely overrides the instructions provided by the
	// Assistant.
	Instructions string `protobuf:"bytes,5,opt,name=instructions,proto3" json:"instructions,omitempty"`
	// OPTIONAL. Additional system instructions to use for this Run. These will be appended to the instructions provided
	// by the Assistant or in the `instructions` field on this Run.
	AdditionalInstructions string `protobuf:"bytes,6,opt,name=additional_instructions,json=additionalInstructions,proto3" json:"additional_instructions,omitempty"`
	// OPTIONAL. Settings provided to the model for this Run.
	ModelSettings *ModelSettings `protobuf:"bytes,7,opt,name=model_settings,json=modelSettings,proto3" json:"model_settings,omitempty"`
	// OPTIONAL. Settings used to control RAG behavior for this Run.
	RetrievalSettings *RetrievalSettings `protobuf:"bytes,8,opt,name=retrieval_settings,json=retrievalSettings,proto3" json:"retrieval_settings,omitempty"`
	// OPTIONAL. Enables citation generation for the Run. If not specified on the run, the value from the Assistant will be used.
	// If citations are enabled, the Assistant will generate citations for facts that were used when generating the response.
	// Citations require a store_id to be set.
	CitationsEnabled *bool `protobuf:"varint,12,opt,name=citations_enabled,json=citationsEnabled,proto3,oneof" json:"citations_enabled,omitempty"`
	// OPTIONAL. The set of tools that should be used for this run
	// This will override the assistant's default tools
	Tools []*Tool `protobuf:"bytes,10,rep,name=tools,proto3" json:"tools,omitempty"`
	// OPTIONAL. MCP Server ID to use for the Run.
	McpServer *string `protobuf:"bytes,13,opt,name=mcp_server,json=mcpServer,proto3,oneof" json:"mcp_server,omitempty"`
	// OPTIONAL. JSON schema for the response.
	// Not all models support this feature. This field will be will be ignored if not supported.
	ResponseJsonSchema *JsonSchemaResponseFormat `protobuf:"bytes,11,opt,name=response_json_schema,json=responseJsonSchema,proto3" json:"response_json_schema,omitempty"`
	// OPTIONAL. Metadata associated with the Run. This can be used to store additional
	// information about the Run. Can be set on create but not updated.
	Metadata map[string]string `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateThreadAndRunRequest) Reset() {
	*x = CreateThreadAndRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateThreadAndRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateThreadAndRunRequest) ProtoMessage() {}

func (x *CreateThreadAndRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateThreadAndRunRequest.ProtoReflect.Descriptor instead.
func (*CreateThreadAndRunRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{33}
}

func (x *CreateThreadAndRunRequest) GetThread() *CreateThreadRequest {
	if x != nil {
		return x.Thread
	}
	return nil
}

func (x *CreateThreadAndRunRequest) GetAssistantId() string {
	if x != nil {
		return x.AssistantId
	}
	return ""
}

func (x *CreateThreadAndRunRequest) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *CreateThreadAndRunRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CreateThreadAndRunRequest) GetInstructions() string {
	if x != nil {
		return x.Instructions
	}
	return ""
}

func (x *CreateThreadAndRunRequest) GetAdditionalInstructions() string {
	if x != nil {
		return x.AdditionalInstructions
	}
	return ""
}

func (x *CreateThreadAndRunRequest) GetModelSettings() *ModelSettings {
	if x != nil {
		return x.ModelSettings
	}
	return nil
}

func (x *CreateThreadAndRunRequest) GetRetrievalSettings() *RetrievalSettings {
	if x != nil {
		return x.RetrievalSettings
	}
	return nil
}

func (x *CreateThreadAndRunRequest) GetCitationsEnabled() bool {
	if x != nil && x.CitationsEnabled != nil {
		return *x.CitationsEnabled
	}
	return false
}

func (x *CreateThreadAndRunRequest) GetTools() []*Tool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *CreateThreadAndRunRequest) GetMcpServer() string {
	if x != nil && x.McpServer != nil {
		return *x.McpServer
	}
	return ""
}

func (x *CreateThreadAndRunRequest) GetResponseJsonSchema() *JsonSchemaResponseFormat {
	if x != nil {
		return x.ResponseJsonSchema
	}
	return nil
}

func (x *CreateThreadAndRunRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Request message for the `CreateRun` method.
type CreateRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED. The ID of the Thread to create the Run on.
	ThreadId string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	// REQUIRED. The ID of the Assistant to execute.
	AssistantId string `protobuf:"bytes,2,opt,name=assistant_id,json=assistantId,proto3" json:"assistant_id,omitempty"`
	// OPTIONAL. The chat engine to use for this Run.
	Engine string `protobuf:"bytes,3,opt,name=engine,proto3" json:"engine,omitempty"`
	// OPTIONAL. The model to use for this Run.
	Model string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	// OPTIONAL. The system instructions to use for this Run. This completely overrides the instructions provided by the
	// Assistant.
	Instructions string `protobuf:"bytes,5,opt,name=instructions,proto3" json:"instructions,omitempty"`
	// OPTIONAL. Additional system instructions to use for this Run. These will be appended to the instructions provided
	// by the Assistant or in the `instructions` field on this Run.
	AdditionalInstructions string `protobuf:"bytes,6,opt,name=additional_instructions,json=additionalInstructions,proto3" json:"additional_instructions,omitempty"`
	// OPTIONAL. Settings provided to the model for this Run.
	ModelSettings *ModelSettings `protobuf:"bytes,8,opt,name=model_settings,json=modelSettings,proto3" json:"model_settings,omitempty"`
	// OPTIONAL. Settings used to control RAG behavior for this Run.
	RetrievalSettings *RetrievalSettings `protobuf:"bytes,9,opt,name=retrieval_settings,json=retrievalSettings,proto3" json:"retrieval_settings,omitempty"`
	// OPTIONAL. Enables citation generation for the Run. If not specified on the run, the value from the Assistant will be used.
	// If citations are enabled, the Assistant will generate citations for facts that were used when generating the response.
	// Citations require a store_id to be set.
	CitationsEnabled *bool `protobuf:"varint,13,opt,name=citations_enabled,json=citationsEnabled,proto3,oneof" json:"citations_enabled,omitempty"`
	// OPTIONAL. The set of tools that should be used for this run
	// This will override the assistant's default tools
	Tools []*Tool `protobuf:"bytes,11,rep,name=tools,proto3" json:"tools,omitempty"`
	// OPTIONAL. MCP Server ID to use for the Run.
	McpServer *string `protobuf:"bytes,14,opt,name=mcp_server,json=mcpServer,proto3,oneof" json:"mcp_server,omitempty"`
	// OPTIONAL. JSON schema for the response.
	// Not all models support this feature. This field will be will be ignored if not supported.
	ResponseJsonSchema *JsonSchemaResponseFormat `protobuf:"bytes,12,opt,name=response_json_schema,json=responseJsonSchema,proto3" json:"response_json_schema,omitempty"`
	// OPTIONAL. Additional Messages to append to the Thread prior to executing the Run.
	AdditionalMessages []*CreateMessageRequest `protobuf:"bytes,7,rep,name=additional_messages,json=additionalMessages,proto3" json:"additional_messages,omitempty"`
	// OPTIONAL. Metadata associated with the Run. This can be used to store additional
	// information about the Run. Can be set on create but not updated.
	Metadata map[string]string `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateRunRequest) Reset() {
	*x = CreateRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRunRequest) ProtoMessage() {}

func (x *CreateRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRunRequest.ProtoReflect.Descriptor instead.
func (*CreateRunRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{34}
}

func (x *CreateRunRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *CreateRunRequest) GetAssistantId() string {
	if x != nil {
		return x.AssistantId
	}
	return ""
}

func (x *CreateRunRequest) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *CreateRunRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CreateRunRequest) GetInstructions() string {
	if x != nil {
		return x.Instructions
	}
	return ""
}

func (x *CreateRunRequest) GetAdditionalInstructions() string {
	if x != nil {
		return x.AdditionalInstructions
	}
	return ""
}

func (x *CreateRunRequest) GetModelSettings() *ModelSettings {
	if x != nil {
		return x.ModelSettings
	}
	return nil
}

func (x *CreateRunRequest) GetRetrievalSettings() *RetrievalSettings {
	if x != nil {
		return x.RetrievalSettings
	}
	return nil
}

func (x *CreateRunRequest) GetCitationsEnabled() bool {
	if x != nil && x.CitationsEnabled != nil {
		return *x.CitationsEnabled
	}
	return false
}

func (x *CreateRunRequest) GetTools() []*Tool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *CreateRunRequest) GetMcpServer() string {
	if x != nil && x.McpServer != nil {
		return *x.McpServer
	}
	return ""
}

func (x *CreateRunRequest) GetResponseJsonSchema() *JsonSchemaResponseFormat {
	if x != nil {
		return x.ResponseJsonSchema
	}
	return nil
}

func (x *CreateRunRequest) GetAdditionalMessages() []*CreateMessageRequest {
	if x != nil {
		return x.AdditionalMessages
	}
	return nil
}

func (x *CreateRunRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRunRequest) Reset() {
	*x = GetRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunRequest) ProtoMessage() {}

func (x *GetRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunRequest.ProtoReflect.Descriptor instead.
func (*GetRunRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{35}
}

func (x *GetRunRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Maximum number of assistants to return in a single page.
	// If unspecified, at most 50 will be returned. The maximum value is 100; values over
	// 100 will be coerced to 100.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. Token of the previous call to ListAssistants used to retrieve the next page.
	// All other fields must match the previous call.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. The assistant ID to filter for.
	AssistantId string `protobuf:"bytes,1,opt,name=assistant_id,json=assistantId,proto3" json:"assistant_id,omitempty"`
	// Optional. The thread ID to filter for.
	ThreadId string `protobuf:"bytes,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	// Optional. Metadata to filter for. Metadata keys and values are case-sensitive.
	// Metadata values are AND-ed together, so only records that have all the specified metadata will be returned.
	Metadata map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListRunsRequest) Reset() {
	*x = ListRunsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunsRequest) ProtoMessage() {}

func (x *ListRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunsRequest.ProtoReflect.Descriptor instead.
func (*ListRunsRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{36}
}

func (x *ListRunsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRunsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRunsRequest) GetAssistantId() string {
	if x != nil {
		return x.AssistantId
	}
	return ""
}

func (x *ListRunsRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *ListRunsRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ListRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runs          []*Run `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRunsResponse) Reset() {
	*x = ListRunsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunsResponse) ProtoMessage() {}

func (x *ListRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunsResponse.ProtoReflect.Descriptor instead.
func (*ListRunsResponse) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{37}
}

func (x *ListRunsResponse) GetRuns() []*Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

func (x *ListRunsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRunRequest) Reset() {
	*x = DeleteRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRunRequest) ProtoMessage() {}

func (x *DeleteRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRunRequest.ProtoReflect.Descriptor instead.
func (*DeleteRunRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteRunRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StreamRunResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId     string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *StreamRunResultsRequest) Reset() {
	*x = StreamRunResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRunResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRunResultsRequest) ProtoMessage() {}

func (x *StreamRunResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRunResultsRequest.ProtoReflect.Descriptor instead.
func (*StreamRunResultsRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{39}
}

func (x *StreamRunResultsRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *StreamRunResultsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

type StreamRunResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   *Message               `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	EventTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
}

func (x *StreamRunResultsResponse) Reset() {
	*x = StreamRunResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRunResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRunResultsResponse) ProtoMessage() {}

func (x *StreamRunResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRunResultsResponse.ProtoReflect.Descriptor instead.
func (*StreamRunResultsResponse) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{40}
}

func (x *StreamRunResultsResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *StreamRunResultsResponse) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

type SubmitToolResponsesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Run containing the ToolCalls to respond to
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// The responses to the ToolCalls
	Responses []*SubmitToolResponsesRequest_ToolResponse `protobuf:"bytes,2,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *SubmitToolResponsesRequest) Reset() {
	*x = SubmitToolResponsesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitToolResponsesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitToolResponsesRequest) ProtoMessage() {}

func (x *SubmitToolResponsesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitToolResponsesRequest.ProtoReflect.Descriptor instead.
func (*SubmitToolResponsesRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{41}
}

func (x *SubmitToolResponsesRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *SubmitToolResponsesRequest) GetResponses() []*SubmitToolResponsesRequest_ToolResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

// Request to provide feedback on a Run
type CreateRunFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED: The ID of the Run that feedback is being provided for.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// REQUIRED: The rating of the Run.
	Rating CreateRunFeedbackRequest_Rating `protobuf:"varint,2,opt,name=rating,proto3,enum=ai.assistants.v0.CreateRunFeedbackRequest_Rating" json:"rating,omitempty"`
	// OPTIONAL: The reason for the rating.
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// OPTIONAL: Additional feedback comment.
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *CreateRunFeedbackRequest) Reset() {
	*x = CreateRunFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRunFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRunFeedbackRequest) ProtoMessage() {}

func (x *CreateRunFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRunFeedbackRequest.ProtoReflect.Descriptor instead.
func (*CreateRunFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{42}
}

func (x *CreateRunFeedbackRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *CreateRunFeedbackRequest) GetRating() CreateRunFeedbackRequest_Rating {
	if x != nil {
		return x.Rating
	}
	return CreateRunFeedbackRequest_RATING_UNSPECIFIED
}

func (x *CreateRunFeedbackRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *CreateRunFeedbackRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// A feedback entry for a Run
type RunFeedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Run Feedback entry
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RunFeedback) Reset() {
	*x = RunFeedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunFeedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunFeedback) ProtoMessage() {}

func (x *RunFeedback) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunFeedback.ProtoReflect.Descriptor instead.
func (*RunFeedback) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{43}
}

func (x *RunFeedback) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Describes an engine and its available models
type ListEnginesResponse_EngineDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The engine backend
	Engine string `protobuf:"bytes,1,opt,name=engine,proto3" json:"engine,omitempty"`
	// The list of models available to the engine
	Models []*ai.Model `protobuf:"bytes,2,rep,name=models,proto3" json:"models,omitempty"`
}

func (x *ListEnginesResponse_EngineDescriptor) Reset() {
	*x = ListEnginesResponse_EngineDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnginesResponse_EngineDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnginesResponse_EngineDescriptor) ProtoMessage() {}

func (x *ListEnginesResponse_EngineDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnginesResponse_EngineDescriptor.ProtoReflect.Descriptor instead.
func (*ListEnginesResponse_EngineDescriptor) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ListEnginesResponse_EngineDescriptor) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *ListEnginesResponse_EngineDescriptor) GetModels() []*ai.Model {
	if x != nil {
		return x.Models
	}
	return nil
}

// A list of owners. This is a wrapper type to allow for partial updates.
// Values must be a list of users in the form `user:user@example.com`.
type UpdateAssistantRequest_OwnerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values of the list
	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *UpdateAssistantRequest_OwnerList) Reset() {
	*x = UpdateAssistantRequest_OwnerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssistantRequest_OwnerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssistantRequest_OwnerList) ProtoMessage() {}

func (x *UpdateAssistantRequest_OwnerList) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssistantRequest_OwnerList.ProtoReflect.Descriptor instead.
func (*UpdateAssistantRequest_OwnerList) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{8, 0}
}

func (x *UpdateAssistantRequest_OwnerList) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// A list of Uploaders. This is a wrapper type to allow for partial updates.
// Values may be either:
// - `domain:example.com` to allow all users in the domain to upload to the store
// - `user:user@example.com` to allow a specific user to upload to the store
type UpdateAssistantRequest_UploaderList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values of the list
	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *UpdateAssistantRequest_UploaderList) Reset() {
	*x = UpdateAssistantRequest_UploaderList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssistantRequest_UploaderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssistantRequest_UploaderList) ProtoMessage() {}

func (x *UpdateAssistantRequest_UploaderList) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssistantRequest_UploaderList.ProtoReflect.Descriptor instead.
func (*UpdateAssistantRequest_UploaderList) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{8, 1}
}

func (x *UpdateAssistantRequest_UploaderList) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// A list of Viewers. This is a wrapper type to allow for partial updates.
// Values may be either:
// - `domain:example.com` to allow all users in the domain to view the store
// - `user:user@example.com` to allow a specific user to view the store
type UpdateAssistantRequest_ViewerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values of the list
	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *UpdateAssistantRequest_ViewerList) Reset() {
	*x = UpdateAssistantRequest_ViewerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssistantRequest_ViewerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssistantRequest_ViewerList) ProtoMessage() {}

func (x *UpdateAssistantRequest_ViewerList) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssistantRequest_ViewerList.ProtoReflect.Descriptor instead.
func (*UpdateAssistantRequest_ViewerList) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{8, 2}
}

func (x *UpdateAssistantRequest_ViewerList) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// A set of metadata. This is a wrapper type to allow for partial updates.
type UpdateAssistantRequest_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata values
	Values map[string]string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateAssistantRequest_Metadata) Reset() {
	*x = UpdateAssistantRequest_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssistantRequest_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssistantRequest_Metadata) ProtoMessage() {}

func (x *UpdateAssistantRequest_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssistantRequest_Metadata.ProtoReflect.Descriptor instead.
func (*UpdateAssistantRequest_Metadata) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{8, 3}
}

func (x *UpdateAssistantRequest_Metadata) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

// A set of metadata. This is a wrapper type to allow for partial updates.
type UpdateThreadRequest_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata values
	Values map[string]string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateThreadRequest_Metadata) Reset() {
	*x = UpdateThreadRequest_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateThreadRequest_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateThreadRequest_Metadata) ProtoMessage() {}

func (x *UpdateThreadRequest_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateThreadRequest_Metadata.ProtoReflect.Descriptor instead.
func (*UpdateThreadRequest_Metadata) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{18, 0}
}

func (x *UpdateThreadRequest_Metadata) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

type Image_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaType string `protobuf:"bytes,1,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Image_Data) Reset() {
	*x = Image_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image_Data) ProtoMessage() {}

func (x *Image_Data) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image_Data.ProtoReflect.Descriptor instead.
func (*Image_Data) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{22, 0}
}

func (x *Image_Data) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *Image_Data) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type MessageContent_Citation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tag in the generated text that indicates the position of the Citation.
	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// The display name of the source document referenced by the citation.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The URL of the source document referenced by the citation.
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// Metadata of the source document referenced by the citation.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MessageContent_Citation) Reset() {
	*x = MessageContent_Citation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageContent_Citation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageContent_Citation) ProtoMessage() {}

func (x *MessageContent_Citation) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageContent_Citation.ProtoReflect.Descriptor instead.
func (*MessageContent_Citation) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{23, 0}
}

func (x *MessageContent_Citation) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *MessageContent_Citation) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MessageContent_Citation) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MessageContent_Citation) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CreateMessageRequest_Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*CreateMessageRequest_Attachment_Image
	//	*CreateMessageRequest_Attachment_File
	Content isCreateMessageRequest_Attachment_Content `protobuf_oneof:"content"`
}

func (x *CreateMessageRequest_Attachment) Reset() {
	*x = CreateMessageRequest_Attachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMessageRequest_Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMessageRequest_Attachment) ProtoMessage() {}

func (x *CreateMessageRequest_Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMessageRequest_Attachment.ProtoReflect.Descriptor instead.
func (*CreateMessageRequest_Attachment) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{27, 0}
}

func (m *CreateMessageRequest_Attachment) GetContent() isCreateMessageRequest_Attachment_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *CreateMessageRequest_Attachment) GetImage() *Image {
	if x, ok := x.GetContent().(*CreateMessageRequest_Attachment_Image); ok {
		return x.Image
	}
	return nil
}

func (x *CreateMessageRequest_Attachment) GetFile() *File {
	if x, ok := x.GetContent().(*CreateMessageRequest_Attachment_File); ok {
		return x.File
	}
	return nil
}

type isCreateMessageRequest_Attachment_Content interface {
	isCreateMessageRequest_Attachment_Content()
}

type CreateMessageRequest_Attachment_Image struct {
	Image *Image `protobuf:"bytes,1,opt,name=image,proto3,oneof"`
}

type CreateMessageRequest_Attachment_File struct {
	File *File `protobuf:"bytes,2,opt,name=file,proto3,oneof"`
}

func (*CreateMessageRequest_Attachment_Image) isCreateMessageRequest_Attachment_Content() {}

func (*CreateMessageRequest_Attachment_File) isCreateMessageRequest_Attachment_Content() {}

// A citation to a fact in the source text
// Deprecated: Superseded by the `Citation` message on `MessageContent`.
//
// Deprecated: Marked as deprecated in ai/assistants/v0/assistant.proto.
type Run_Citation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The position in the source text where the fact is located
	Position *Run_Citation_Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	// The index of the fact in the source text
	Source int32 `protobuf:"varint,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *Run_Citation) Reset() {
	*x = Run_Citation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Run_Citation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Run_Citation) ProtoMessage() {}

func (x *Run_Citation) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Run_Citation.ProtoReflect.Descriptor instead.
func (*Run_Citation) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{32, 0}
}

func (x *Run_Citation) GetPosition() *Run_Citation_Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Run_Citation) GetSource() int32 {
	if x != nil {
		return x.Source
	}
	return 0
}

// A document that was provided as context to the LLM run via RAG retrieval
type Run_ContextDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full name of the file
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	// Display name of the file
	DisplayName string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The url to download/view the file
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// A trailer containing additional metadata about the document, such as pages
	Trailer string `protobuf:"bytes,3,opt,name=trailer,proto3" json:"trailer,omitempty"`
}

func (x *Run_ContextDocument) Reset() {
	*x = Run_ContextDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Run_ContextDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Run_ContextDocument) ProtoMessage() {}

func (x *Run_ContextDocument) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Run_ContextDocument.ProtoReflect.Descriptor instead.
func (*Run_ContextDocument) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{32, 1}
}

func (x *Run_ContextDocument) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Run_ContextDocument) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Run_ContextDocument) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Run_ContextDocument) GetTrailer() string {
	if x != nil {
		return x.Trailer
	}
	return ""
}

type Run_Citation_Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartOffset int32 `protobuf:"varint,1,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	EndOffset   int32 `protobuf:"varint,2,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
}

func (x *Run_Citation_Position) Reset() {
	*x = Run_Citation_Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Run_Citation_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Run_Citation_Position) ProtoMessage() {}

func (x *Run_Citation_Position) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Run_Citation_Position.ProtoReflect.Descriptor instead.
func (*Run_Citation_Position) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{32, 0, 0}
}

func (x *Run_Citation_Position) GetStartOffset() int32 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

func (x *Run_Citation_Position) GetEndOffset() int32 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

// A response from the user to a ToolCall returned by a Run
type SubmitToolResponsesRequest_ToolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the ToolCall being responded to
	ToolCallId string `protobuf:"bytes,1,opt,name=tool_call_id,json=toolCallId,proto3" json:"tool_call_id,omitempty"`
	// Indicates that the tool call failed
	Error bool `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	// The content of the tool response
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *SubmitToolResponsesRequest_ToolResponse) Reset() {
	*x = SubmitToolResponsesRequest_ToolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_assistants_v0_assistant_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitToolResponsesRequest_ToolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitToolResponsesRequest_ToolResponse) ProtoMessage() {}

func (x *SubmitToolResponsesRequest_ToolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_assistants_v0_assistant_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitToolResponsesRequest_ToolResponse.ProtoReflect.Descriptor instead.
func (*SubmitToolResponsesRequest_ToolResponse) Descriptor() ([]byte, []int) {
	return file_ai_assistants_v0_assistant_proto_rawDescGZIP(), []int{41, 0}
}

func (x *SubmitToolResponsesRequest_ToolResponse) GetToolCallId() string {
	if x != nil {
		return x.ToolCallId
	}
	return ""
}

func (x *SubmitToolResponsesRequest_ToolResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *SubmitToolResponsesRequest_ToolResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

var File_ai_assistants_v0_assistant_proto protoreflect.FileDescriptor

var file_ai_assistants_v0_assistant_proto_rawDesc = []byte{
	0x0a, 0x20, 0x61, 0x69, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2f,
	0x76, 0x30, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x30, 0x1a, 0x0e, 0x61, 0x69, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x61, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x69, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x30, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12,
	0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x61, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x69,
	0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x52, 0x07, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x1a, 0x4d, 0x0a, 0x10,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x69, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xe8, 0x07, 0x0a, 0x09,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x30, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x11, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75,
	0x62, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x73,
	0x75, 0x62, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x73,
	0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x75,
	0x62, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x41, 0x73, 0x54, 0x6f, 0x6f,
	0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x5c, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30,
	0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x01, 0x0a, 0x18, 0x4a, 0x73, 0x6f, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x37, 0xba, 0x48, 0x34, 0xba, 0x01, 0x31, 0x0a, 0x09, 0x6e, 0x6f, 0x74,
	0x2d, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x12, 0x11, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x62, 0x65, 0x20, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x1a, 0x11, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x74, 0x72, 0x69, 0x6d, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x22, 0x22, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcd, 0x09, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x30, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x52, 0x0a, 0x12, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69,
	0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x11, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x5f, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x73, 0x5f, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x75, 0x62, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x41, 0x73, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30,
	0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x14, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a,
	0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0xce, 0x01, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x42, 0xb3, 0x01, 0xba, 0x48, 0xaf, 0x01, 0x92, 0x01, 0xab, 0x01, 0x22, 0xa8, 0x01, 0xba,
	0x01, 0xa4, 0x01, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x39, 0x6d, 0x75, 0x73,
	0x74, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x20, 0x27, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3a, 0x3c, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x3e, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x27, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x3c, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x3e, 0x27, 0x1a, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x22, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3a,
	0x22, 0x29, 0x7c, 0x7c, 0x20, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x22, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x22, 0x29, 0x20, 0x26,
	0x26, 0x20, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x28,
	0x22, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x22, 0x2c, 0x22, 0x22, 0x29, 0x29, 0x2e, 0x69, 0x73, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x28, 0x29, 0x29, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73,
	0x12, 0xc6, 0x01, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x72, 0xba, 0x48, 0x6f,
	0x9a, 0x01, 0x6c, 0x22, 0x33, 0x72, 0x31, 0x10, 0x01, 0x18, 0xff, 0x01, 0x32, 0x2a, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2e, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x2a, 0x35, 0x72, 0x33, 0x10, 0x00, 0x18, 0x40,
	0x32, 0x2d, 0x5e, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x28,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2e, 0x5d, 0x2a, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x29, 0x3f, 0x24, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xba, 0x48, 0x2d, 0xba, 0x01,
	0x2a, 0x0a, 0x09, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x11, 0x6d, 0x75,
	0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0a, 0x74, 0x68, 0x69, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x22, 0x22, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x9c, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x51, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7d,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xf5, 0x0f,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xba, 0x48, 0x2d, 0xba, 0x01, 0x2a, 0x0a, 0x09, 0x6e, 0x6f,
	0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x11, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65,
	0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x21, 0x3d, 0x20, 0x22, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x11, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x11, 0x63, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x10, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x75,
	0x62, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x73, 0x5f, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x14, 0x73, 0x75, 0x62, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x41, 0x73, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x30, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x6d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x12,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x4a, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x53,
	0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x73, 0x1a, 0xa1, 0x01, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x93, 0x01, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x7b, 0xba, 0x48, 0x78, 0x92, 0x01, 0x75, 0x08, 0x01, 0x22, 0x71, 0xba, 0x01, 0x6e,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x24, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62,
	0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20,
	0x27, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x3c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3e, 0x27, 0x1a, 0x3e,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28,
	0x22, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x22, 0x29, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x28, 0x22, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x22,
	0x2c, 0x22, 0x22, 0x29, 0x2e, 0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x28, 0x29, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0xdb, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0xca, 0x01, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0xb1, 0x01, 0xba, 0x48, 0xad, 0x01, 0x92,
	0x01, 0xa9, 0x01, 0x22, 0xa6, 0x01, 0xba, 0x01, 0xa2, 0x01, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x39, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x27, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x3a, 0x3c, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3e, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x27,
	0x75, 0x73, 0x65, 0x72, 0x3a, 0x3c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3e, 0x27, 0x1a, 0x5d, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x22,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3a, 0x22, 0x29, 0x7c, 0x7c, 0x20, 0x28, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x22, 0x75, 0x73,
	0x65, 0x72, 0x3a, 0x22, 0x29, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x28, 0x22, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x22, 0x2c, 0x22, 0x22,
	0x29, 0x2e, 0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x28, 0x29, 0x29, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x1a, 0xd9, 0x01, 0x0a, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0xca, 0x01, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x42, 0xb1, 0x01, 0xba, 0x48, 0xad, 0x01, 0x92, 0x01, 0xa9, 0x01, 0x22,
	0xa6, 0x01, 0xba, 0x01, 0xa2, 0x01, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x39,
	0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x27, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3a, 0x3c, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3e, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x27, 0x75, 0x73, 0x65, 0x72,
	0x3a, 0x3c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3e, 0x27, 0x1a, 0x5d, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x22, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x3a, 0x22, 0x29, 0x7c, 0x7c, 0x20, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x22, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x22,
	0x29, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x28, 0x22, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x22, 0x2c, 0x22, 0x22, 0x29, 0x2e, 0x69, 0x73,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x28, 0x29, 0x29, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x1a, 0x91, 0x02, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0xc9, 0x01,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x72, 0xba,
	0x48, 0x6f, 0x9a, 0x01, 0x6c, 0x22, 0x33, 0x72, 0x31, 0x10, 0x01, 0x18, 0xff, 0x01, 0x32, 0x2a,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2e, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x2a, 0x35, 0x72, 0x33, 0x10, 0x00,
	0x18, 0x40, 0x32, 0x2d, 0x5e, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2e, 0x5d,
	0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x29, 0x3f,
	0x24, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x73,
	0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x05, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30,
	0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x5a, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x30, 0xba, 0x48, 0x2d, 0xba, 0x01, 0x2a, 0x0a, 0x09, 0x6e, 0x6f, 0x6e, 0x2d,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x11, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6e,
	0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x74, 0x68, 0x69, 0x73, 0x20, 0x21,
	0x3d, 0x20, 0x22, 0x22, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x1f, 0x54, 0x65, 0x73,
	0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xba, 0x48, 0x2d, 0xba, 0x01, 0x2a,
	0x0a, 0x09, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x11, 0x6d, 0x75, 0x73,
	0x74, 0x20, 0x62, 0x65, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x22, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a,
	0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x44, 0x0a, 0x20, 0x54, 0x65,
	0x73, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x90, 0x02, 0x0a, 0x06, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xfe, 0x02, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0xc3, 0x01, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x72, 0xba, 0x48, 0x6f, 0x9a, 0x01,
	0x6c, 0x22, 0x33, 0x72, 0x31, 0x10, 0x01, 0x18, 0xff, 0x01, 0x32, 0x2a, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2e, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x2a, 0x35, 0x72, 0x33, 0x10, 0x00, 0x18, 0x40, 0x32, 0x2d,
	0x5e, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2e, 0x5d, 0x2a, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x29, 0x3f, 0x24, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa8, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x71, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69,
	0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd6, 0x03, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xba, 0x48, 0x2d, 0xba,
	0x01, 0x2a, 0x0a, 0x09, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x11, 0x6d,
	0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x0a, 0x74, 0x68, 0x69, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x22, 0x22, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x8e,
	0x02, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0xc6, 0x01, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x72, 0xba, 0x48, 0x6f, 0x9a, 0x01, 0x6c,
	0x22, 0x33, 0x72, 0x31, 0x10, 0x01, 0x18, 0xff, 0x01, 0x32, 0x2a, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x2e, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5d, 0x29, 0x3f, 0x24, 0x2a, 0x35, 0x72, 0x33, 0x10, 0x00, 0x18, 0x40, 0x32, 0x2d, 0x5e,
	0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2e, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x29, 0x3f, 0x24, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x12, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x04,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x03, 0x72, 0x65, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x30, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x39, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xbf, 0x03, 0x0a, 0x0e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xe3, 0x01, 0x0a, 0x08, 0x43,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x53,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x9b, 0x04, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x43, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64,
	0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0x79, 0x0a, 0x0d, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61,
	0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x09, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x5f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x74, 0x6f, 0x70,
	0x4b, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x65,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x01, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f,
	0x70, 0x5f, 0x6b, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x65,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xab, 0x05, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49,
	0x64, 0x12, 0x59, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x30, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x2d, 0xba, 0x48, 0x2a, 0xba, 0x01, 0x27, 0x0a,
	0x08, 0x6e, 0x6f, 0x6e, 0x2d, 0x7a, 0x65, 0x72, 0x6f, 0x12, 0x10, 0x6d, 0x75, 0x73, 0x74, 0x20,
	0x62, 0x65, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x7a, 0x65, 0x72, 0x6f, 0x1a, 0x09, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xba,
	0x48, 0x2d, 0xba, 0x01, 0x2a, 0x0a, 0x09, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x11, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x0a, 0x74, 0x68, 0x69, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x22, 0x22, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xc4, 0x01,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x72, 0xba, 0x48, 0x6f, 0x9a, 0x01, 0x6c, 0x22, 0x33,
	0x72, 0x31, 0x10, 0x01, 0x18, 0xff, 0x01, 0x32, 0x2a, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x2e, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d,
	0x29, 0x3f, 0x24, 0x2a, 0x35, 0x72, 0x33, 0x10, 0x00, 0x18, 0x40, 0x32, 0x2d, 0x5e, 0x28, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2e, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x29, 0x3f, 0x24, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x76, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xc6, 0x02, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x2e,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x75, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x0a, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x46, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x30, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x61, 0x63, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xfc, 0x0d, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x30, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x52, 0x0a, 0x12, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69,
	0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x11, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x73,
	0x75, 0x62, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x73,
	0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x75,
	0x62, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x41, 0x73, 0x54, 0x6f, 0x6f,
	0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x75, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x5c, 0x0a, 0x14, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a,
	0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x75, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x30, 0x2e, 0x52, 0x75, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x61, 0x63, 0x74, 0x52, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x61, 0x63, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69,
	0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x52,
	0x75, 0x6e, 0x2e, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x09, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xb9, 0x01, 0x0a, 0x08, 0x43, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x75, 0x6e, 0x2e,
	0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x1a, 0x4c, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x3a, 0x02, 0x18, 0x01, 0x1a, 0x7c, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x65, 0x72, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x6f, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x05, 0x22, 0xc9, 0x08, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x41, 0x6e, 0x64, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x53,
	0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xba, 0x48, 0x2d, 0xba, 0x01, 0x2a, 0x0a, 0x09, 0x6e, 0x6f,
	0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x11, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65,
	0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x21, 0x3d, 0x20, 0x22, 0x22, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46,
	0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x11, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x11, 0x63, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x10, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x05,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69,
	0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54,
	0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x63,
	0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x09, 0x6d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x5c,
	0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0xc9, 0x01, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x41,
	0x6e, 0x64, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x72, 0xba, 0x48, 0x6f, 0x9a,
	0x01, 0x6c, 0x22, 0x33, 0x72, 0x31, 0x10, 0x01, 0x18, 0xff, 0x01, 0x32, 0x2a, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2e, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x2a, 0x35, 0x72, 0x33, 0x10, 0x00, 0x18, 0x40, 0x32,
	0x2d, 0x5e, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2e, 0x5d, 0x2a, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x29, 0x3f, 0x24, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x61, 0xba, 0x48, 0x5e, 0x1a, 0x5c, 0x0a, 0x0f, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x20, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x6f, 0x6e, 0x65, 0x20,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1f, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x73, 0x69,
	0x7a, 0x65, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xbd, 0x08,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xba, 0x48, 0x2d, 0xba, 0x01, 0x2a, 0x0a, 0x09, 0x6e,
	0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x11, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62,
	0x65, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x21, 0x3d, 0x20, 0x22, 0x22, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49,
	0x64, 0x12, 0x53, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xba, 0x48, 0x2d, 0xba, 0x01, 0x2a, 0x0a,
	0x09, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x11, 0x6d, 0x75, 0x73, 0x74,
	0x20, 0x62, 0x65, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x22, 0x22, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x46, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x11, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a,
	0x11, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x10, 0x63, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x30, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x22, 0x0a,
	0x0a, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x09, 0x6d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x5c, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x30, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x12, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x57, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0xc0, 0x01, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x69,
	0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x72, 0xba,
	0x48, 0x6f, 0x9a, 0x01, 0x6c, 0x22, 0x33, 0x72, 0x31, 0x10, 0x01, 0x18, 0xff, 0x01, 0x32, 0x2a,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2e, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x2a, 0x35, 0x72, 0x33, 0x10, 0x00,
	0x18, 0x40, 0x32, 0x2d, 0x5e, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2e, 0x5d,
	0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x29, 0x3f,
	0x24, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x51, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xba, 0x48, 0x2d, 0xba,
	0x01, 0x2a, 0x0a, 0x09, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x11, 0x6d,
	0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x0a, 0x74, 0x68, 0x69, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x22, 0x22, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x97, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64,
	0x12, 0x4b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,
	0x52, 0x75, 0x6e, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x54, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x30, 0xba, 0x48, 0x2d, 0xba, 0x01, 0x2a, 0x0a, 0x09, 0x6e, 0x6f, 0x6e, 0x2d, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x11, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6e, 0x6f,
	0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x74, 0x68, 0x69, 0x73, 0x20, 0x21, 0x3d,
	0x20, 0x22, 0x22, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x30, 0xba, 0x48, 0x2d, 0xba, 0x01, 0x2a, 0x0a, 0x09, 0x6e, 0x6f, 0x6e,
	0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x11, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20,
	0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x21, 0x3d, 0x20, 0x22, 0x22, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x87, 0x03, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x30, 0xba, 0x48, 0x2d, 0xba, 0x01, 0x2a, 0x0a, 0x09, 0x6e, 0x6f, 0x6e,
	0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x11, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20,
	0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x21, 0x3d, 0x20, 0x22, 0x22, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x30, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x1a, 0xbe, 0x01,
	0x0a, 0x0c, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52,
	0x0a, 0x0c, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xba, 0x48, 0x2d, 0xba, 0x01, 0x2a, 0x0a, 0x09, 0x6e, 0x6f,
	0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x11, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65,
	0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x21, 0x3d, 0x20, 0x22, 0x22, 0x52, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xba, 0x48, 0x2d, 0xba, 0x01, 0x2a, 0x0a, 0x09,
	0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x11, 0x6d, 0x75, 0x73, 0x74, 0x20,
	0x62, 0x65, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x22, 0x22, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xda,
	0x02, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x72,
	0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xba, 0x48, 0x2d,
	0xba, 0x01, 0x2a, 0x0a, 0x09, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x11,
	0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0a, 0x74, 0x68, 0x69, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x22, 0x22, 0x52, 0x05, 0x72,
	0x75, 0x6e, 0x49, 0x64, 0x12, 0x78, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75,
	0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x2d, 0xba, 0x48, 0x2a, 0xba, 0x01, 0x27, 0x0a,
	0x08, 0x6e, 0x6f, 0x6e, 0x2d, 0x7a, 0x65, 0x72, 0x6f, 0x12, 0x10, 0x6d, 0x75, 0x73, 0x74, 0x20,
	0x62, 0x65, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x7a, 0x65, 0x72, 0x6f, 0x1a, 0x09, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x49, 0x0a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x4e, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4c, 0x10, 0x03, 0x22, 0x1d, 0x0a, 0x0b, 0x52,
	0x75, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x2a, 0x46, 0x0a, 0x09, 0x53, 0x6f,
	0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4f, 0x52, 0x54, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x2a, 0x35, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x53,
	0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x32, 0xbf, 0x10, 0x0a, 0x0a, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x52,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x25,
	0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x30, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x12, 0x63, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x69, 0x2e,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x12, 0x53, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x81, 0x01, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x49, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x22, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x5a, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x69,
	0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x69, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x4d, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x4d, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x12, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x12, 0x52, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x69, 0x2e,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x2e,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x58, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x41, 0x6e, 0x64, 0x52, 0x75, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x75, 0x6e, 0x12, 0x46, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x22, 0x2e, 0x61, 0x69, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30,
	0x2e, 0x52, 0x75, 0x6e, 0x12, 0x40, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x1f,
	0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x30, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x30, 0x2e, 0x52, 0x75, 0x6e, 0x12, 0x51, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75,
	0x6e, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x22, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x6b, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x5a, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,
	0x52, 0x75, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x47, 0x5a, 0x45, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x61, 0x6b, 0x36, 0x2d,
	0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x32, 0x67, 0x32, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x69, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x30, 0x3b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ai_assistants_v0_assistant_proto_rawDescOnce sync.Once
	file_ai_assistants_v0_assistant_proto_rawDescData = file_ai_assistants_v0_assistant_proto_rawDesc
)

func file_ai_assistants_v0_assistant_proto_rawDescGZIP() []byte {
	file_ai_assistants_v0_assistant_proto_rawDescOnce.Do(func() {
		file_ai_assistants_v0_assistant_proto_rawDescData = protoimpl.X.CompressGZIP(file_ai_assistants_v0_assistant_proto_rawDescData)
	})
	return file_ai_assistants_v0_assistant_proto_rawDescData
}

var file_ai_assistants_v0_assistant_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_ai_assistants_v0_assistant_proto_msgTypes = make([]protoimpl.MessageInfo, 74)
var file_ai_assistants_v0_assistant_proto_goTypes = []interface{}{
	(SortOrder)(0),                               // 0: ai.assistants.v0.SortOrder
	(Role)(0),                                    // 1: ai.assistants.v0.Role
	(Message_State)(0),                           // 2: ai.assistants.v0.Message.State
	(Run_State)(0),                               // 3: ai.assistants.v0.Run.State
	(CreateRunFeedbackRequest_Rating)(0),         // 4: ai.assistants.v0.CreateRunFeedbackRequest.Rating
	(*ListEnginesRequest)(nil),                   // 5: ai.assistants.v0.ListEnginesRequest
	(*ListEnginesResponse)(nil),                  // 6: ai.assistants.v0.ListEnginesResponse
	(*Assistant)(nil),                            // 7: ai.assistants.v0.Assistant
	(*JsonSchemaResponseFormat)(nil),             // 8: ai.assistants.v0.JsonSchemaResponseFormat
	(*CreateAssistantRequest)(nil),               // 9: ai.assistants.v0.CreateAssistantRequest
	(*GetAssistantRequest)(nil),                  // 10: ai.assistants.v0.GetAssistantRequest
	(*ListAssistantsRequest)(nil),                // 11: ai.assistants.v0.ListAssistantsRequest
	(*ListAssistantsResponse)(nil),               // 12: ai.assistants.v0.ListAssistantsResponse
	(*UpdateAssistantRequest)(nil),               // 13: ai.assistants.v0.UpdateAssistantRequest
	(*Tools)(nil),                                // 14: ai.assistants.v0.Tools
	(*DeleteAssistantRequest)(nil),               // 15: ai.assistants.v0.DeleteAssistantRequest
	(*TestAssistantPermissionsRequest)(nil),      // 16: ai.assistants.v0.TestAssistantPermissionsRequest
	(*TestAssistantPermissionsResponse)(nil),     // 17: ai.assistants.v0.TestAssistantPermissionsResponse
	(*Thread)(nil),                               // 18: ai.assistants.v0.Thread
	(*CreateThreadRequest)(nil),                  // 19: ai.assistants.v0.CreateThreadRequest
	(*GetThreadRequest)(nil),                     // 20: ai.assistants.v0.GetThreadRequest
	(*ListThreadsRequest)(nil),                   // 21: ai.assistants.v0.ListThreadsRequest
	(*ListThreadsResponse)(nil),                  // 22: ai.assistants.v0.ListThreadsResponse
	(*UpdateThreadRequest)(nil),                  // 23: ai.assistants.v0.UpdateThreadRequest
	(*DeleteThreadRequest)(nil),                  // 24: ai.assistants.v0.DeleteThreadRequest
	(*ShareThreadRequest)(nil),                   // 25: ai.assistants.v0.ShareThreadRequest
	(*File)(nil),                                 // 26: ai.assistants.v0.File
	(*Image)(nil),                                // 27: ai.assistants.v0.Image
	(*MessageContent)(nil),                       // 28: ai.assistants.v0.MessageContent
	(*Message)(nil),                              // 29: ai.assistants.v0.Message
	(*ModelSettings)(nil),                        // 30: ai.assistants.v0.ModelSettings
	(*RetrievalSettings)(nil),                    // 31: ai.assistants.v0.RetrievalSettings
	(*CreateMessageRequest)(nil),                 // 32: ai.assistants.v0.CreateMessageRequest
	(*GetMessageRequest)(nil),                    // 33: ai.assistants.v0.GetMessageRequest
	(*ListMessagesRequest)(nil),                  // 34: ai.assistants.v0.ListMessagesRequest
	(*ListMessagesResponse)(nil),                 // 35: ai.assistants.v0.ListMessagesResponse
	(*SourceFact)(nil),                           // 36: ai.assistants.v0.SourceFact
	(*Run)(nil),                                  // 37: ai.assistants.v0.Run
	(*CreateThreadAndRunRequest)(nil),            // 38: ai.assistants.v0.CreateThreadAndRunRequest
	(*CreateRunRequest)(nil),                     // 39: ai.assistants.v0.CreateRunRequest
	(*GetRunRequest)(nil),                        // 40: ai.assistants.v0.GetRunRequest
	(*ListRunsRequest)(nil),                      // 41: ai.assistants.v0.ListRunsRequest
	(*ListRunsResponse)(nil),                     // 42: ai.assistants.v0.ListRunsResponse
	(*DeleteRunRequest)(nil),                     // 43: ai.assistants.v0.DeleteRunRequest
	(*StreamRunResultsRequest)(nil),              // 44: ai.assistants.v0.StreamRunResultsRequest
	(*StreamRunResultsResponse)(nil),             // 45: ai.assistants.v0.StreamRunResultsResponse
	(*SubmitToolResponsesRequest)(nil),           // 46: ai.assistants.v0.SubmitToolResponsesRequest
	(*CreateRunFeedbackRequest)(nil),             // 47: ai.assistants.v0.CreateRunFeedbackRequest
	(*RunFeedback)(nil),                          // 48: ai.assistants.v0.RunFeedback
	(*ListEnginesResponse_EngineDescriptor)(nil), // 49: ai.assistants.v0.ListEnginesResponse.EngineDescriptor
	nil,                                      // 50: ai.assistants.v0.Assistant.MetadataEntry
	nil,                                      // 51: ai.assistants.v0.CreateAssistantRequest.MetadataEntry
	nil,                                      // 52: ai.assistants.v0.ListAssistantsRequest.MetadataEntry
	(*UpdateAssistantRequest_OwnerList)(nil), // 53: ai.assistants.v0.UpdateAssistantRequest.OwnerList
	(*UpdateAssistantRequest_UploaderList)(nil), // 54: ai.assistants.v0.UpdateAssistantRequest.UploaderList
	(*UpdateAssistantRequest_ViewerList)(nil),   // 55: ai.assistants.v0.UpdateAssistantRequest.ViewerList
	(*UpdateAssistantRequest_Metadata)(nil),     // 56: ai.assistants.v0.UpdateAssistantRequest.Metadata
	nil,                                         // 57: ai.assistants.v0.UpdateAssistantRequest.Metadata.ValuesEntry
	nil,                                         // 58: ai.assistants.v0.Thread.MetadataEntry
	nil,                                         // 59: ai.assistants.v0.CreateThreadRequest.MetadataEntry
	nil,                                         // 60: ai.assistants.v0.ListThreadsRequest.MetadataEntry
	(*UpdateThreadRequest_Metadata)(nil),        // 61: ai.assistants.v0.UpdateThreadRequest.Metadata
	nil,                                         // 62: ai.assistants.v0.UpdateThreadRequest.Metadata.ValuesEntry
	(*Image_Data)(nil),                          // 63: ai.assistants.v0.Image.Data
	(*MessageContent_Citation)(nil),             // 64: ai.assistants.v0.MessageContent.Citation
	nil,                                         // 65: ai.assistants.v0.MessageContent.Citation.MetadataEntry
	nil,                                         // 66: ai.assistants.v0.Message.MetadataEntry
	(*CreateMessageRequest_Attachment)(nil),     // 67: ai.assistants.v0.CreateMessageRequest.Attachment
	nil,                                         // 68: ai.assistants.v0.CreateMessageRequest.MetadataEntry
	nil,                                         // 69: ai.assistants.v0.ListMessagesRequest.MetadataEntry
	nil,                                         // 70: ai.assistants.v0.SourceFact.MetadataEntry
	(*Run_Citation)(nil),                        // 71: ai.assistants.v0.Run.Citation
	(*Run_ContextDocument)(nil),                 // 72: ai.assistants.v0.Run.ContextDocument
	nil,                                         // 73: ai.assistants.v0.Run.MetadataEntry
	(*Run_Citation_Position)(nil),               // 74: ai.assistants.v0.Run.Citation.Position
	nil,                                         // 75: ai.assistants.v0.CreateThreadAndRunRequest.MetadataEntry
	nil,                                         // 76: ai.assistants.v0.CreateRunRequest.MetadataEntry
	nil,                                         // 77: ai.assistants.v0.ListRunsRequest.MetadataEntry
	(*SubmitToolResponsesRequest_ToolResponse)(nil), // 78: ai.assistants.v0.SubmitToolResponsesRequest.ToolResponse
	(ai.Model_InputFormats)(0),                      // 79: ai.Model.InputFormats
	(ai.Model_Tag)(0),                               // 80: ai.Model.Tag
	(*Tool)(nil),                                    // 81: ai.assistants.v0.Tool
	(*timestamppb.Timestamp)(nil),                   // 82: google.protobuf.Timestamp
	(*_type.StringList)(nil),                        // 83: ai.type.StringList
	(*ToolCall)(nil),                                // 84: ai.assistants.v0.ToolCall
	(*ai.Model)(nil),                                // 85: ai.Model
	(*emptypb.Empty)(nil),                           // 86: google.protobuf.Empty
}
var file_ai_assistants_v0_assistant_proto_depIdxs = []int32{
	79,  // 0: ai.assistants.v0.ListEnginesRequest.input_formats:type_name -> ai.Model.InputFormats
	80,  // 1: ai.assistants.v0.ListEnginesRequest.tags:type_name -> ai.Model.Tag
	49,  // 2: ai.assistants.v0.ListEnginesResponse.engines:type_name -> ai.assistants.v0.ListEnginesResponse.EngineDescriptor
	30,  // 3: ai.assistants.v0.Assistant.model_settings:type_name -> ai.assistants.v0.ModelSettings
	31,  // 4: ai.assistants.v0.Assistant.retrieval_settings:type_name -> ai.assistants.v0.RetrievalSettings
	81,  // 5: ai.assistants.v0.Assistant.tools:type_name -> ai.assistants.v0.Tool
	8,   // 6: ai.assistants.v0.Assistant.response_json_schema:type_name -> ai.assistants.v0.JsonSchemaResponseFormat
	50,  // 7: ai.assistants.v0.Assistant.metadata:type_name -> ai.assistants.v0.Assistant.MetadataEntry
	82,  // 8: ai.assistants.v0.Assistant.create_time:type_name -> google.protobuf.Timestamp
	30,  // 9: ai.assistants.v0.CreateAssistantRequest.model_settings:type_name -> ai.assistants.v0.ModelSettings
	31,  // 10: ai.assistants.v0.CreateAssistantRequest.retrieval_settings:type_name -> ai.assistants.v0.RetrievalSettings
	81,  // 11: ai.assistants.v0.CreateAssistantRequest.tools:type_name -> ai.assistants.v0.Tool
	8,   // 12: ai.assistants.v0.CreateAssistantRequest.response_json_schema:type_name -> ai.assistants.v0.JsonSchemaResponseFormat
	51,  // 13: ai.assistants.v0.CreateAssistantRequest.metadata:type_name -> ai.assistants.v0.CreateAssistantRequest.MetadataEntry
	52,  // 14: ai.assistants.v0.ListAssistantsRequest.metadata:type_name -> ai.assistants.v0.ListAssistantsRequest.MetadataEntry
	7,   // 15: ai.assistants.v0.ListAssistantsResponse.assistants:type_name -> ai.assistants.v0.Assistant
	30,  // 16: ai.assistants.v0.UpdateAssistantRequest.model_settings:type_name -> ai.assistants.v0.ModelSettings
	31,  // 17: ai.assistants.v0.UpdateAssistantRequest.retrieval_settings:type_name -> ai.assistants.v0.RetrievalSettings
	83,  // 18: ai.assistants.v0.UpdateAssistantRequest.sub_assistants:type_name -> ai.type.StringList
	56,  // 19: ai.assistants.v0.UpdateAssistantRequest.metadata:type_name -> ai.assistants.v0.UpdateAssistantRequest.Metadata
	14,  // 20: ai.assistants.v0.UpdateAssistantRequest.tools:type_name -> ai.assistants.v0.Tools
	8,   // 21: ai.assistants.v0.UpdateAssistantRequest.response_json_schema:type_name -> ai.assistants.v0.JsonSchemaResponseFormat
	53,  // 22: ai.assistants.v0.UpdateAssistantRequest.owners:type_name -> ai.assistants.v0.UpdateAssistantRequest.OwnerList
	54,  // 23: ai.assistants.v0.UpdateAssistantRequest.uploaders:type_name -> ai.assistants.v0.UpdateAssistantRequest.UploaderList
	55,  // 24: ai.assistants.v0.UpdateAssistantRequest.viewers:type_name -> ai.assistants.v0.UpdateAssistantRequest.ViewerList
	81,  // 25: ai.assistants.v0.Tools.tools:type_name -> ai.assistants.v0.Tool
	58,  // 26: ai.assistants.v0.Thread.metadata:type_name -> ai.assistants.v0.Thread.MetadataEntry
	82,  // 27: ai.assistants.v0.Thread.create_time:type_name -> google.protobuf.Timestamp
	32,  // 28: ai.assistants.v0.CreateThreadRequest.messages:type_name -> ai.assistants.v0.CreateMessageRequest
	59,  // 29: ai.assistants.v0.CreateThreadRequest.metadata:type_name -> ai.assistants.v0.CreateThreadRequest.MetadataEntry
	60,  // 30: ai.assistants.v0.ListThreadsRequest.metadata:type_name -> ai.assistants.v0.ListThreadsRequest.MetadataEntry
	0,   // 31: ai.assistants.v0.ListThreadsRequest.order:type_name -> ai.assistants.v0.SortOrder
	18,  // 32: ai.assistants.v0.ListThreadsResponse.threads:type_name -> ai.assistants.v0.Thread
	61,  // 33: ai.assistants.v0.UpdateThreadRequest.metadata:type_name -> ai.assistants.v0.UpdateThreadRequest.Metadata
	63,  // 34: ai.assistants.v0.Image.data:type_name -> ai.assistants.v0.Image.Data
	27,  // 35: ai.assistants.v0.MessageContent.image:type_name -> ai.assistants.v0.Image
	26,  // 36: ai.assistants.v0.MessageContent.file:type_name -> ai.assistants.v0.File
	64,  // 37: ai.assistants.v0.MessageContent.citations:type_name -> ai.assistants.v0.MessageContent.Citation
	1,   // 38: ai.assistants.v0.Message.role:type_name -> ai.assistants.v0.Role
	28,  // 39: ai.assistants.v0.Message.content:type_name -> ai.assistants.v0.MessageContent
	66,  // 40: ai.assistants.v0.Message.metadata:type_name -> ai.assistants.v0.Message.MetadataEntry
	2,   // 41: ai.assistants.v0.Message.state:type_name -> ai.assistants.v0.Message.State
	82,  // 42: ai.assistants.v0.Message.create_time:type_name -> google.protobuf.Timestamp
	82,  // 43: ai.assistants.v0.Message.modify_time:type_name -> google.protobuf.Timestamp
	1,   // 44: ai.assistants.v0.CreateMessageRequest.role:type_name -> ai.assistants.v0.Role
	67,  // 45: ai.assistants.v0.CreateMessageRequest.attachments:type_name -> ai.assistants.v0.CreateMessageRequest.Attachment
	68,  // 46: ai.assistants.v0.CreateMessageRequest.metadata:type_name -> ai.assistants.v0.CreateMessageRequest.MetadataEntry
	0,   // 47: ai.assistants.v0.ListMessagesRequest.order:type_name -> ai.assistants.v0.SortOrder
	69,  // 48: ai.assistants.v0.ListMessagesRequest.metadata:type_name -> ai.assistants.v0.ListMessagesRequest.MetadataEntry
	29,  // 49: ai.assistants.v0.ListMessagesResponse.messages:type_name -> ai.assistants.v0.Message
	70,  // 50: ai.assistants.v0.SourceFact.metadata:type_name -> ai.assistants.v0.SourceFact.MetadataEntry
	30,  // 51: ai.assistants.v0.Run.model_settings:type_name -> ai.assistants.v0.ModelSettings
	31,  // 52: ai.assistants.v0.Run.retrieval_settings:type_name -> ai.assistants.v0.RetrievalSettings
	73,  // 53: ai.assistants.v0.Run.metadata:type_name -> ai.assistants.v0.Run.MetadataEntry
	81,  // 54: ai.assistants.v0.Run.tools:type_name -> ai.assistants.v0.Tool
	84,  // 55: ai.assistants.v0.Run.tool_calls:type_name -> ai.assistants.v0.ToolCall
	8,   // 56: ai.assistants.v0.Run.response_json_schema:type_name -> ai.assistants.v0.JsonSchemaResponseFormat
	3,   // 57: ai.assistants.v0.Run.state:type_name -> ai.assistants.v0.Run.State
	72,  // 58: ai.assistants.v0.Run.context_documents:type_name -> ai.assistants.v0.Run.ContextDocument
	36,  // 59: ai.assistants.v0.Run.source_facts:type_name -> ai.assistants.v0.SourceFact
	71,  // 60: ai.assistants.v0.Run.citations:type_name -> ai.assistants.v0.Run.Citation
	82,  // 61: ai.assistants.v0.Run.create_time:type_name -> google.protobuf.Timestamp
	82,  // 62: ai.assistants.v0.Run.start_time:type_name -> google.protobuf.Timestamp
	82,  // 63: ai.assistants.v0.Run.end_time:type_name -> google.protobuf.Timestamp
	19,  // 64: ai.assistants.v0.CreateThreadAndRunRequest.thread:type_name -> ai.assistants.v0.CreateThreadRequest
	30,  // 65: ai.assistants.v0.CreateThreadAndRunRequest.model_settings:type_name -> ai.assistants.v0.ModelSettings
	31,  // 66: ai.assistants.v0.CreateThreadAndRunRequest.retrieval_settings:type_name -> ai.assistants.v0.RetrievalSettings
	81,  // 67: ai.assistants.v0.CreateThreadAndRunRequest.tools:type_name -> ai.assistants.v0.Tool
	8,   // 68: ai.assistants.v0.CreateThreadAndRunRequest.response_json_schema:type_name -> ai.assistants.v0.JsonSchemaResponseFormat
	75,  // 69: ai.assistants.v0.CreateThreadAndRunRequest.metadata:type_name -> ai.assistants.v0.CreateThreadAndRunRequest.MetadataEntry
	30,  // 70: ai.assistants.v0.CreateRunRequest.model_settings:type_name -> ai.assistants.v0.ModelSettings
	31,  // 71: ai.assistants.v0.CreateRunRequest.retrieval_settings:type_name -> ai.assistants.v0.RetrievalSettings
	81,  // 72: ai.assistants.v0.CreateRunRequest.tools:type_name -> ai.assistants.v0.Tool
	8,   // 73: ai.assistants.v0.CreateRunRequest.response_json_schema:type_name -> ai.assistants.v0.JsonSchemaResponseFormat
	32,  // 74: ai.assistants.v0.CreateRunRequest.additional_messages:type_name -> ai.assistants.v0.CreateMessageRequest
	76,  // 75: ai.assistants.v0.CreateRunRequest.metadata:type_name -> ai.assistants.v0.CreateRunRequest.MetadataEntry
	77,  // 76: ai.assistants.v0.ListRunsRequest.metadata:type_name -> ai.assistants.v0.ListRunsRequest.MetadataEntry
	37,  // 77: ai.assistants.v0.ListRunsResponse.runs:type_name -> ai.assistants.v0.Run
	82,  // 78: ai.assistants.v0.StreamRunResultsRequest.start_time:type_name -> google.protobuf.Timestamp
	29,  // 79: ai.assistants.v0.StreamRunResultsResponse.message:type_name -> ai.assistants.v0.Message
	82,  // 80: ai.assistants.v0.StreamRunResultsResponse.event_time:type_name -> google.protobuf.Timestamp
	78,  // 81: ai.assistants.v0.SubmitToolResponsesRequest.responses:type_name -> ai.assistants.v0.SubmitToolResponsesRequest.ToolResponse
	4,   // 82: ai.assistants.v0.CreateRunFeedbackRequest.rating:type_name -> ai.assistants.v0.CreateRunFeedbackRequest.Rating
	85,  // 83: ai.assistants.v0.ListEnginesResponse.EngineDescriptor.models:type_name -> ai.Model
	57,  // 84: ai.assistants.v0.UpdateAssistantRequest.Metadata.values:type_name -> ai.assistants.v0.UpdateAssistantRequest.Metadata.ValuesEntry
	62,  // 85: ai.assistants.v0.UpdateThreadRequest.Metadata.values:type_name -> ai.assistants.v0.UpdateThreadRequest.Metadata.ValuesEntry
	65,  // 86: ai.assistants.v0.MessageContent.Citation.metadata:type_name -> ai.assistants.v0.MessageContent.Citation.MetadataEntry
	27,  // 87: ai.assistants.v0.CreateMessageRequest.Attachment.image:type_name -> ai.assistants.v0.Image
	26,  // 88: ai.assistants.v0.CreateMessageRequest.Attachment.file:type_name -> ai.assistants.v0.File
	74,  // 89: ai.assistants.v0.Run.Citation.position:type_name -> ai.assistants.v0.Run.Citation.Position
	5,   // 90: ai.assistants.v0.Assistants.ListEngines:input_type -> ai.assistants.v0.ListEnginesRequest
	9,   // 91: ai.assistants.v0.Assistants.CreateAssistant:input_type -> ai.assistants.v0.CreateAssistantRequest
	10,  // 92: ai.assistants.v0.Assistants.GetAssistant:input_type -> ai.assistants.v0.GetAssistantRequest
	11,  // 93: ai.assistants.v0.Assistants.ListAssistants:input_type -> ai.assistants.v0.ListAssistantsRequest
	13,  // 94: ai.assistants.v0.Assistants.UpdateAssistant:input_type -> ai.assistants.v0.UpdateAssistantRequest
	15,  // 95: ai.assistants.v0.Assistants.DeleteAssistant:input_type -> ai.assistants.v0.DeleteAssistantRequest
	16,  // 96: ai.assistants.v0.Assistants.TestAssistantPermissions:input_type -> ai.assistants.v0.TestAssistantPermissionsRequest
	19,  // 97: ai.assistants.v0.Assistants.CreateThread:input_type -> ai.assistants.v0.CreateThreadRequest
	20,  // 98: ai.assistants.v0.Assistants.GetThread:input_type -> ai.assistants.v0.GetThreadRequest
	21,  // 99: ai.assistants.v0.Assistants.ListThreads:input_type -> ai.assistants.v0.ListThreadsRequest
	23,  // 100: ai.assistants.v0.Assistants.UpdateThread:input_type -> ai.assistants.v0.UpdateThreadRequest
	24,  // 101: ai.assistants.v0.Assistants.DeleteThread:input_type -> ai.assistants.v0.DeleteThreadRequest
	25,  // 102: ai.assistants.v0.Assistants.ShareThread:input_type -> ai.assistants.v0.ShareThreadRequest
	32,  // 103: ai.assistants.v0.Assistants.CreateMessage:input_type -> ai.assistants.v0.CreateMessageRequest
	33,  // 104: ai.assistants.v0.Assistants.GetMessage:input_type -> ai.assistants.v0.GetMessageRequest
	34,  // 105: ai.assistants.v0.Assistants.ListMessages:input_type -> ai.assistants.v0.ListMessagesRequest
	38,  // 106: ai.assistants.v0.Assistants.CreateThreadAndRun:input_type -> ai.assistants.v0.CreateThreadAndRunRequest
	39,  // 107: ai.assistants.v0.Assistants.CreateRun:input_type -> ai.assistants.v0.CreateRunRequest
	40,  // 108: ai.assistants.v0.Assistants.GetRun:input_type -> ai.assistants.v0.GetRunRequest
	41,  // 109: ai.assistants.v0.Assistants.ListRuns:input_type -> ai.assistants.v0.ListRunsRequest
	43,  // 110: ai.assistants.v0.Assistants.DeleteRun:input_type -> ai.assistants.v0.DeleteRunRequest
	44,  // 111: ai.assistants.v0.Assistants.StreamRunResults:input_type -> ai.assistants.v0.StreamRunResultsRequest
	46,  // 112: ai.assistants.v0.Assistants.SubmitToolResponse:input_type -> ai.assistants.v0.SubmitToolResponsesRequest
	47,  // 113: ai.assistants.v0.Assistants.CreateRunFeedback:input_type -> ai.assistants.v0.CreateRunFeedbackRequest
	6,   // 114: ai.assistants.v0.Assistants.ListEngines:output_type -> ai.assistants.v0.ListEnginesResponse
	7,   // 115: ai.assistants.v0.Assistants.CreateAssistant:output_type -> ai.assistants.v0.Assistant
	7,   // 116: ai.assistants.v0.Assistants.GetAssistant:output_type -> ai.assistants.v0.Assistant
	12,  // 117: ai.assistants.v0.Assistants.ListAssistants:output_type -> ai.assistants.v0.ListAssistantsResponse
	7,   // 118: ai.assistants.v0.Assistants.UpdateAssistant:output_type -> ai.assistants.v0.Assistant
	86,  // 119: ai.assistants.v0.Assistants.DeleteAssistant:output_type -> google.protobuf.Empty
	17,  // 120: ai.assistants.v0.Assistants.TestAssistantPermissions:output_type -> ai.assistants.v0.TestAssistantPermissionsResponse
	18,  // 121: ai.assistants.v0.Assistants.CreateThread:output_type -> ai.assistants.v0.Thread
	18,  // 122: ai.assistants.v0.Assistants.GetThread:output_type -> ai.assistants.v0.Thread
	22,  // 123: ai.assistants.v0.Assistants.ListThreads:output_type -> ai.assistants.v0.ListThreadsResponse
	18,  // 124: ai.assistants.v0.Assistants.UpdateThread:output_type -> ai.assistants.v0.Thread
	86,  // 125: ai.assistants.v0.Assistants.DeleteThread:output_type -> google.protobuf.Empty
	18,  // 126: ai.assistants.v0.Assistants.ShareThread:output_type -> ai.assistants.v0.Thread
	29,  // 127: ai.assistants.v0.Assistants.CreateMessage:output_type -> ai.assistants.v0.Message
	29,  // 128: ai.assistants.v0.Assistants.GetMessage:output_type -> ai.assistants.v0.Message
	35,  // 129: ai.assistants.v0.Assistants.ListMessages:output_type -> ai.assistants.v0.ListMessagesResponse
	37,  // 130: ai.assistants.v0.Assistants.CreateThreadAndRun:output_type -> ai.assistants.v0.Run
	37,  // 131: ai.assistants.v0.Assistants.CreateRun:output_type -> ai.assistants.v0.Run
	37,  // 132: ai.assistants.v0.Assistants.GetRun:output_type -> ai.assistants.v0.Run
	42,  // 133: ai.assistants.v0.Assistants.ListRuns:output_type -> ai.assistants.v0.ListRunsResponse
	86,  // 134: ai.assistants.v0.Assistants.DeleteRun:output_type -> google.protobuf.Empty
	45,  // 135: ai.assistants.v0.Assistants.StreamRunResults:output_type -> ai.assistants.v0.StreamRunResultsResponse
	86,  // 136: ai.assistants.v0.Assistants.SubmitToolResponse:output_type -> google.protobuf.Empty
	48,  // 137: ai.assistants.v0.Assistants.CreateRunFeedback:output_type -> ai.assistants.v0.RunFeedback
	114, // [114:138] is the sub-list for method output_type
	90,  // [90:114] is the sub-list for method input_type
	90,  // [90:90] is the sub-list for extension type_name
	90,  // [90:90] is the sub-list for extension extendee
	0,   // [0:90] is the sub-list for field type_name
}

func init() { file_ai_assistants_v0_assistant_proto_init() }
func file_ai_assistants_v0_assistant_proto_init() {
	if File_ai_assistants_v0_assistant_proto != nil {
		return
	}
	file_ai_assistants_v0_tools_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ai_assistants_v0_assistant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnginesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnginesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assistant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonSchemaResponseFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAssistantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssistantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssistantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssistantsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssistantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tools); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAssistantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestAssistantPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestAssistantPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListThreadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListThreadsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrievalSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceFact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Run); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateThreadAndRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRunsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRunsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRunResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRunResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitToolResponsesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRunFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunFeedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnginesResponse_EngineDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssistantRequest_OwnerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssistantRequest_UploaderList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssistantRequest_ViewerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssistantRequest_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateThreadRequest_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageContent_Citation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMessageRequest_Attachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Run_Citation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Run_ContextDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Run_Citation_Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_assistants_v0_assistant_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitToolResponsesRequest_ToolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ai_assistants_v0_assistant_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_ai_assistants_v0_assistant_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*File_Ref)(nil),
	}
	file_ai_assistants_v0_assistant_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*Image_Url)(nil),
		(*Image_Data_)(nil),
	}
	file_ai_assistants_v0_assistant_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*MessageContent_Text)(nil),
		(*MessageContent_Image)(nil),
		(*MessageContent_File)(nil),
	}
	file_ai_assistants_v0_assistant_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_ai_assistants_v0_assistant_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_ai_assistants_v0_assistant_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_ai_assistants_v0_assistant_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_ai_assistants_v0_assistant_proto_msgTypes[62].OneofWrappers = []interface{}{
		(*CreateMessageRequest_Attachment_Image)(nil),
		(*CreateMessageRequest_Attachment_File)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ai_assistants_v0_assistant_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   74,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ai_assistants_v0_assistant_proto_goTypes,
		DependencyIndexes: file_ai_assistants_v0_assistant_proto_depIdxs,
		EnumInfos:         file_ai_assistants_v0_assistant_proto_enumTypes,
		MessageInfos:      file_ai_assistants_v0_assistant_proto_msgTypes,
	}.Build()
	File_ai_assistants_v0_assistant_proto = out.File
	file_ai_assistants_v0_assistant_proto_rawDesc = nil
	file_ai_assistants_v0_assistant_proto_goTypes = nil
	file_ai_assistants_v0_assistant_proto_depIdxs = nil
}
