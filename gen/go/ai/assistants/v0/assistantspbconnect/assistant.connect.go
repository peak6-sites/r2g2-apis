// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ai/assistants/v0/assistant.proto

// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package assistantspbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v0 "github.com/peak6-sites/r2g2-apis/gen/go/ai/assistants/v0"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AssistantsName is the fully-qualified name of the Assistants service.
	AssistantsName = "ai.assistants.v0.Assistants"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AssistantsListEnginesProcedure is the fully-qualified name of the Assistants's ListEngines RPC.
	AssistantsListEnginesProcedure = "/ai.assistants.v0.Assistants/ListEngines"
	// AssistantsCreateAssistantProcedure is the fully-qualified name of the Assistants's
	// CreateAssistant RPC.
	AssistantsCreateAssistantProcedure = "/ai.assistants.v0.Assistants/CreateAssistant"
	// AssistantsGetAssistantProcedure is the fully-qualified name of the Assistants's GetAssistant RPC.
	AssistantsGetAssistantProcedure = "/ai.assistants.v0.Assistants/GetAssistant"
	// AssistantsListAssistantsProcedure is the fully-qualified name of the Assistants's ListAssistants
	// RPC.
	AssistantsListAssistantsProcedure = "/ai.assistants.v0.Assistants/ListAssistants"
	// AssistantsUpdateAssistantProcedure is the fully-qualified name of the Assistants's
	// UpdateAssistant RPC.
	AssistantsUpdateAssistantProcedure = "/ai.assistants.v0.Assistants/UpdateAssistant"
	// AssistantsDeleteAssistantProcedure is the fully-qualified name of the Assistants's
	// DeleteAssistant RPC.
	AssistantsDeleteAssistantProcedure = "/ai.assistants.v0.Assistants/DeleteAssistant"
	// AssistantsTestAssistantPermissionsProcedure is the fully-qualified name of the Assistants's
	// TestAssistantPermissions RPC.
	AssistantsTestAssistantPermissionsProcedure = "/ai.assistants.v0.Assistants/TestAssistantPermissions"
	// AssistantsCreateThreadProcedure is the fully-qualified name of the Assistants's CreateThread RPC.
	AssistantsCreateThreadProcedure = "/ai.assistants.v0.Assistants/CreateThread"
	// AssistantsGetThreadProcedure is the fully-qualified name of the Assistants's GetThread RPC.
	AssistantsGetThreadProcedure = "/ai.assistants.v0.Assistants/GetThread"
	// AssistantsListThreadsProcedure is the fully-qualified name of the Assistants's ListThreads RPC.
	AssistantsListThreadsProcedure = "/ai.assistants.v0.Assistants/ListThreads"
	// AssistantsUpdateThreadProcedure is the fully-qualified name of the Assistants's UpdateThread RPC.
	AssistantsUpdateThreadProcedure = "/ai.assistants.v0.Assistants/UpdateThread"
	// AssistantsDeleteThreadProcedure is the fully-qualified name of the Assistants's DeleteThread RPC.
	AssistantsDeleteThreadProcedure = "/ai.assistants.v0.Assistants/DeleteThread"
	// AssistantsShareThreadProcedure is the fully-qualified name of the Assistants's ShareThread RPC.
	AssistantsShareThreadProcedure = "/ai.assistants.v0.Assistants/ShareThread"
	// AssistantsCreateMessageProcedure is the fully-qualified name of the Assistants's CreateMessage
	// RPC.
	AssistantsCreateMessageProcedure = "/ai.assistants.v0.Assistants/CreateMessage"
	// AssistantsGetMessageProcedure is the fully-qualified name of the Assistants's GetMessage RPC.
	AssistantsGetMessageProcedure = "/ai.assistants.v0.Assistants/GetMessage"
	// AssistantsListMessagesProcedure is the fully-qualified name of the Assistants's ListMessages RPC.
	AssistantsListMessagesProcedure = "/ai.assistants.v0.Assistants/ListMessages"
	// AssistantsCreateThreadAndRunProcedure is the fully-qualified name of the Assistants's
	// CreateThreadAndRun RPC.
	AssistantsCreateThreadAndRunProcedure = "/ai.assistants.v0.Assistants/CreateThreadAndRun"
	// AssistantsCreateRunProcedure is the fully-qualified name of the Assistants's CreateRun RPC.
	AssistantsCreateRunProcedure = "/ai.assistants.v0.Assistants/CreateRun"
	// AssistantsGetRunProcedure is the fully-qualified name of the Assistants's GetRun RPC.
	AssistantsGetRunProcedure = "/ai.assistants.v0.Assistants/GetRun"
	// AssistantsListRunsProcedure is the fully-qualified name of the Assistants's ListRuns RPC.
	AssistantsListRunsProcedure = "/ai.assistants.v0.Assistants/ListRuns"
	// AssistantsDeleteRunProcedure is the fully-qualified name of the Assistants's DeleteRun RPC.
	AssistantsDeleteRunProcedure = "/ai.assistants.v0.Assistants/DeleteRun"
	// AssistantsStreamRunResultsProcedure is the fully-qualified name of the Assistants's
	// StreamRunResults RPC.
	AssistantsStreamRunResultsProcedure = "/ai.assistants.v0.Assistants/StreamRunResults"
	// AssistantsSubmitToolResponseProcedure is the fully-qualified name of the Assistants's
	// SubmitToolResponse RPC.
	AssistantsSubmitToolResponseProcedure = "/ai.assistants.v0.Assistants/SubmitToolResponse"
	// AssistantsCreateRunFeedbackProcedure is the fully-qualified name of the Assistants's
	// CreateRunFeedback RPC.
	AssistantsCreateRunFeedbackProcedure = "/ai.assistants.v0.Assistants/CreateRunFeedback"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	assistantsServiceDescriptor                        = v0.File_ai_assistants_v0_assistant_proto.Services().ByName("Assistants")
	assistantsListEnginesMethodDescriptor              = assistantsServiceDescriptor.Methods().ByName("ListEngines")
	assistantsCreateAssistantMethodDescriptor          = assistantsServiceDescriptor.Methods().ByName("CreateAssistant")
	assistantsGetAssistantMethodDescriptor             = assistantsServiceDescriptor.Methods().ByName("GetAssistant")
	assistantsListAssistantsMethodDescriptor           = assistantsServiceDescriptor.Methods().ByName("ListAssistants")
	assistantsUpdateAssistantMethodDescriptor          = assistantsServiceDescriptor.Methods().ByName("UpdateAssistant")
	assistantsDeleteAssistantMethodDescriptor          = assistantsServiceDescriptor.Methods().ByName("DeleteAssistant")
	assistantsTestAssistantPermissionsMethodDescriptor = assistantsServiceDescriptor.Methods().ByName("TestAssistantPermissions")
	assistantsCreateThreadMethodDescriptor             = assistantsServiceDescriptor.Methods().ByName("CreateThread")
	assistantsGetThreadMethodDescriptor                = assistantsServiceDescriptor.Methods().ByName("GetThread")
	assistantsListThreadsMethodDescriptor              = assistantsServiceDescriptor.Methods().ByName("ListThreads")
	assistantsUpdateThreadMethodDescriptor             = assistantsServiceDescriptor.Methods().ByName("UpdateThread")
	assistantsDeleteThreadMethodDescriptor             = assistantsServiceDescriptor.Methods().ByName("DeleteThread")
	assistantsShareThreadMethodDescriptor              = assistantsServiceDescriptor.Methods().ByName("ShareThread")
	assistantsCreateMessageMethodDescriptor            = assistantsServiceDescriptor.Methods().ByName("CreateMessage")
	assistantsGetMessageMethodDescriptor               = assistantsServiceDescriptor.Methods().ByName("GetMessage")
	assistantsListMessagesMethodDescriptor             = assistantsServiceDescriptor.Methods().ByName("ListMessages")
	assistantsCreateThreadAndRunMethodDescriptor       = assistantsServiceDescriptor.Methods().ByName("CreateThreadAndRun")
	assistantsCreateRunMethodDescriptor                = assistantsServiceDescriptor.Methods().ByName("CreateRun")
	assistantsGetRunMethodDescriptor                   = assistantsServiceDescriptor.Methods().ByName("GetRun")
	assistantsListRunsMethodDescriptor                 = assistantsServiceDescriptor.Methods().ByName("ListRuns")
	assistantsDeleteRunMethodDescriptor                = assistantsServiceDescriptor.Methods().ByName("DeleteRun")
	assistantsStreamRunResultsMethodDescriptor         = assistantsServiceDescriptor.Methods().ByName("StreamRunResults")
	assistantsSubmitToolResponseMethodDescriptor       = assistantsServiceDescriptor.Methods().ByName("SubmitToolResponse")
	assistantsCreateRunFeedbackMethodDescriptor        = assistantsServiceDescriptor.Methods().ByName("CreateRunFeedback")
)

// AssistantsClient is a client for the ai.assistants.v0.Assistants service.
type AssistantsClient interface {
	// Retrieves a list of chat engines and their available models.
	ListEngines(context.Context, *connect.Request[v0.ListEnginesRequest]) (*connect.Response[v0.ListEnginesResponse], error)
	// Creates an Assistant.
	CreateAssistant(context.Context, *connect.Request[v0.CreateAssistantRequest]) (*connect.Response[v0.Assistant], error)
	// Retrieves an Assistant by ID.
	GetAssistant(context.Context, *connect.Request[v0.GetAssistantRequest]) (*connect.Response[v0.Assistant], error)
	// Lists Assistants.
	ListAssistants(context.Context, *connect.Request[v0.ListAssistantsRequest]) (*connect.Response[v0.ListAssistantsResponse], error)
	// Updates an Assistant.
	UpdateAssistant(context.Context, *connect.Request[v0.UpdateAssistantRequest]) (*connect.Response[v0.Assistant], error)
	// Deletes an Assistant.
	DeleteAssistant(context.Context, *connect.Request[v0.DeleteAssistantRequest]) (*connect.Response[emptypb.Empty], error)
	// Returns permissions that a caller has on the specified Assistant.
	// If the resource does not exist, this will return an empty set of
	// permissions, not a `NOT_FOUND` error.
	TestAssistantPermissions(context.Context, *connect.Request[v0.TestAssistantPermissionsRequest]) (*connect.Response[v0.TestAssistantPermissionsResponse], error)
	// Creates a Thread.
	CreateThread(context.Context, *connect.Request[v0.CreateThreadRequest]) (*connect.Response[v0.Thread], error)
	// Retrieves a Thread By ID.
	GetThread(context.Context, *connect.Request[v0.GetThreadRequest]) (*connect.Response[v0.Thread], error)
	// Lists Threads.
	ListThreads(context.Context, *connect.Request[v0.ListThreadsRequest]) (*connect.Response[v0.ListThreadsResponse], error)
	// Update a Thread.
	UpdateThread(context.Context, *connect.Request[v0.UpdateThreadRequest]) (*connect.Response[v0.Thread], error)
	// Deletes a Thread.
	DeleteThread(context.Context, *connect.Request[v0.DeleteThreadRequest]) (*connect.Response[emptypb.Empty], error)
	// Snapshots a thread and marks it as shared.
	// Shared threads are immutable and can be viewed by all users that have been provided the ID.
	ShareThread(context.Context, *connect.Request[v0.ShareThreadRequest]) (*connect.Response[v0.Thread], error)
	// Creates a Message in a Thread.
	CreateMessage(context.Context, *connect.Request[v0.CreateMessageRequest]) (*connect.Response[v0.Message], error)
	// Retrieves a Message by ID.
	GetMessage(context.Context, *connect.Request[v0.GetMessageRequest]) (*connect.Response[v0.Message], error)
	// Lists Messages in a Thread.
	ListMessages(context.Context, *connect.Request[v0.ListMessagesRequest]) (*connect.Response[v0.ListMessagesResponse], error)
	// Creates a Thread and then creates a Run on that Thread.
	CreateThreadAndRun(context.Context, *connect.Request[v0.CreateThreadAndRunRequest]) (*connect.Response[v0.Run], error)
	// Creates a Run on a Thread.
	CreateRun(context.Context, *connect.Request[v0.CreateRunRequest]) (*connect.Response[v0.Run], error)
	// Retrieves a Run by ID.
	GetRun(context.Context, *connect.Request[v0.GetRunRequest]) (*connect.Response[v0.Run], error)
	// Lists Runs.
	ListRuns(context.Context, *connect.Request[v0.ListRunsRequest]) (*connect.Response[v0.ListRunsResponse], error)
	// Deletes a Run.
	DeleteRun(context.Context, *connect.Request[v0.DeleteRunRequest]) (*connect.Response[emptypb.Empty], error)
	// Streams the results generated by a Run.
	StreamRunResults(context.Context, *connect.Request[v0.StreamRunResultsRequest]) (*connect.ServerStreamForClient[v0.StreamRunResultsResponse], error)
	// Submits on or more responses to ToolCalls required by a Run.
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	SubmitToolResponse(context.Context, *connect.Request[v0.SubmitToolResponsesRequest]) (*connect.Response[emptypb.Empty], error)
	// Creates a feedback entry for a Run.
	CreateRunFeedback(context.Context, *connect.Request[v0.CreateRunFeedbackRequest]) (*connect.Response[v0.RunFeedback], error)
}

// NewAssistantsClient constructs a client for the ai.assistants.v0.Assistants service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAssistantsClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AssistantsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &assistantsClient{
		listEngines: connect.NewClient[v0.ListEnginesRequest, v0.ListEnginesResponse](
			httpClient,
			baseURL+AssistantsListEnginesProcedure,
			connect.WithSchema(assistantsListEnginesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createAssistant: connect.NewClient[v0.CreateAssistantRequest, v0.Assistant](
			httpClient,
			baseURL+AssistantsCreateAssistantProcedure,
			connect.WithSchema(assistantsCreateAssistantMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAssistant: connect.NewClient[v0.GetAssistantRequest, v0.Assistant](
			httpClient,
			baseURL+AssistantsGetAssistantProcedure,
			connect.WithSchema(assistantsGetAssistantMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAssistants: connect.NewClient[v0.ListAssistantsRequest, v0.ListAssistantsResponse](
			httpClient,
			baseURL+AssistantsListAssistantsProcedure,
			connect.WithSchema(assistantsListAssistantsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAssistant: connect.NewClient[v0.UpdateAssistantRequest, v0.Assistant](
			httpClient,
			baseURL+AssistantsUpdateAssistantProcedure,
			connect.WithSchema(assistantsUpdateAssistantMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAssistant: connect.NewClient[v0.DeleteAssistantRequest, emptypb.Empty](
			httpClient,
			baseURL+AssistantsDeleteAssistantProcedure,
			connect.WithSchema(assistantsDeleteAssistantMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		testAssistantPermissions: connect.NewClient[v0.TestAssistantPermissionsRequest, v0.TestAssistantPermissionsResponse](
			httpClient,
			baseURL+AssistantsTestAssistantPermissionsProcedure,
			connect.WithSchema(assistantsTestAssistantPermissionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createThread: connect.NewClient[v0.CreateThreadRequest, v0.Thread](
			httpClient,
			baseURL+AssistantsCreateThreadProcedure,
			connect.WithSchema(assistantsCreateThreadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getThread: connect.NewClient[v0.GetThreadRequest, v0.Thread](
			httpClient,
			baseURL+AssistantsGetThreadProcedure,
			connect.WithSchema(assistantsGetThreadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listThreads: connect.NewClient[v0.ListThreadsRequest, v0.ListThreadsResponse](
			httpClient,
			baseURL+AssistantsListThreadsProcedure,
			connect.WithSchema(assistantsListThreadsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateThread: connect.NewClient[v0.UpdateThreadRequest, v0.Thread](
			httpClient,
			baseURL+AssistantsUpdateThreadProcedure,
			connect.WithSchema(assistantsUpdateThreadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteThread: connect.NewClient[v0.DeleteThreadRequest, emptypb.Empty](
			httpClient,
			baseURL+AssistantsDeleteThreadProcedure,
			connect.WithSchema(assistantsDeleteThreadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		shareThread: connect.NewClient[v0.ShareThreadRequest, v0.Thread](
			httpClient,
			baseURL+AssistantsShareThreadProcedure,
			connect.WithSchema(assistantsShareThreadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createMessage: connect.NewClient[v0.CreateMessageRequest, v0.Message](
			httpClient,
			baseURL+AssistantsCreateMessageProcedure,
			connect.WithSchema(assistantsCreateMessageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMessage: connect.NewClient[v0.GetMessageRequest, v0.Message](
			httpClient,
			baseURL+AssistantsGetMessageProcedure,
			connect.WithSchema(assistantsGetMessageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listMessages: connect.NewClient[v0.ListMessagesRequest, v0.ListMessagesResponse](
			httpClient,
			baseURL+AssistantsListMessagesProcedure,
			connect.WithSchema(assistantsListMessagesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createThreadAndRun: connect.NewClient[v0.CreateThreadAndRunRequest, v0.Run](
			httpClient,
			baseURL+AssistantsCreateThreadAndRunProcedure,
			connect.WithSchema(assistantsCreateThreadAndRunMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createRun: connect.NewClient[v0.CreateRunRequest, v0.Run](
			httpClient,
			baseURL+AssistantsCreateRunProcedure,
			connect.WithSchema(assistantsCreateRunMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRun: connect.NewClient[v0.GetRunRequest, v0.Run](
			httpClient,
			baseURL+AssistantsGetRunProcedure,
			connect.WithSchema(assistantsGetRunMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRuns: connect.NewClient[v0.ListRunsRequest, v0.ListRunsResponse](
			httpClient,
			baseURL+AssistantsListRunsProcedure,
			connect.WithSchema(assistantsListRunsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteRun: connect.NewClient[v0.DeleteRunRequest, emptypb.Empty](
			httpClient,
			baseURL+AssistantsDeleteRunProcedure,
			connect.WithSchema(assistantsDeleteRunMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		streamRunResults: connect.NewClient[v0.StreamRunResultsRequest, v0.StreamRunResultsResponse](
			httpClient,
			baseURL+AssistantsStreamRunResultsProcedure,
			connect.WithSchema(assistantsStreamRunResultsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		submitToolResponse: connect.NewClient[v0.SubmitToolResponsesRequest, emptypb.Empty](
			httpClient,
			baseURL+AssistantsSubmitToolResponseProcedure,
			connect.WithSchema(assistantsSubmitToolResponseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createRunFeedback: connect.NewClient[v0.CreateRunFeedbackRequest, v0.RunFeedback](
			httpClient,
			baseURL+AssistantsCreateRunFeedbackProcedure,
			connect.WithSchema(assistantsCreateRunFeedbackMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// assistantsClient implements AssistantsClient.
type assistantsClient struct {
	listEngines              *connect.Client[v0.ListEnginesRequest, v0.ListEnginesResponse]
	createAssistant          *connect.Client[v0.CreateAssistantRequest, v0.Assistant]
	getAssistant             *connect.Client[v0.GetAssistantRequest, v0.Assistant]
	listAssistants           *connect.Client[v0.ListAssistantsRequest, v0.ListAssistantsResponse]
	updateAssistant          *connect.Client[v0.UpdateAssistantRequest, v0.Assistant]
	deleteAssistant          *connect.Client[v0.DeleteAssistantRequest, emptypb.Empty]
	testAssistantPermissions *connect.Client[v0.TestAssistantPermissionsRequest, v0.TestAssistantPermissionsResponse]
	createThread             *connect.Client[v0.CreateThreadRequest, v0.Thread]
	getThread                *connect.Client[v0.GetThreadRequest, v0.Thread]
	listThreads              *connect.Client[v0.ListThreadsRequest, v0.ListThreadsResponse]
	updateThread             *connect.Client[v0.UpdateThreadRequest, v0.Thread]
	deleteThread             *connect.Client[v0.DeleteThreadRequest, emptypb.Empty]
	shareThread              *connect.Client[v0.ShareThreadRequest, v0.Thread]
	createMessage            *connect.Client[v0.CreateMessageRequest, v0.Message]
	getMessage               *connect.Client[v0.GetMessageRequest, v0.Message]
	listMessages             *connect.Client[v0.ListMessagesRequest, v0.ListMessagesResponse]
	createThreadAndRun       *connect.Client[v0.CreateThreadAndRunRequest, v0.Run]
	createRun                *connect.Client[v0.CreateRunRequest, v0.Run]
	getRun                   *connect.Client[v0.GetRunRequest, v0.Run]
	listRuns                 *connect.Client[v0.ListRunsRequest, v0.ListRunsResponse]
	deleteRun                *connect.Client[v0.DeleteRunRequest, emptypb.Empty]
	streamRunResults         *connect.Client[v0.StreamRunResultsRequest, v0.StreamRunResultsResponse]
	submitToolResponse       *connect.Client[v0.SubmitToolResponsesRequest, emptypb.Empty]
	createRunFeedback        *connect.Client[v0.CreateRunFeedbackRequest, v0.RunFeedback]
}

// ListEngines calls ai.assistants.v0.Assistants.ListEngines.
func (c *assistantsClient) ListEngines(ctx context.Context, req *connect.Request[v0.ListEnginesRequest]) (*connect.Response[v0.ListEnginesResponse], error) {
	return c.listEngines.CallUnary(ctx, req)
}

// CreateAssistant calls ai.assistants.v0.Assistants.CreateAssistant.
func (c *assistantsClient) CreateAssistant(ctx context.Context, req *connect.Request[v0.CreateAssistantRequest]) (*connect.Response[v0.Assistant], error) {
	return c.createAssistant.CallUnary(ctx, req)
}

// GetAssistant calls ai.assistants.v0.Assistants.GetAssistant.
func (c *assistantsClient) GetAssistant(ctx context.Context, req *connect.Request[v0.GetAssistantRequest]) (*connect.Response[v0.Assistant], error) {
	return c.getAssistant.CallUnary(ctx, req)
}

// ListAssistants calls ai.assistants.v0.Assistants.ListAssistants.
func (c *assistantsClient) ListAssistants(ctx context.Context, req *connect.Request[v0.ListAssistantsRequest]) (*connect.Response[v0.ListAssistantsResponse], error) {
	return c.listAssistants.CallUnary(ctx, req)
}

// UpdateAssistant calls ai.assistants.v0.Assistants.UpdateAssistant.
func (c *assistantsClient) UpdateAssistant(ctx context.Context, req *connect.Request[v0.UpdateAssistantRequest]) (*connect.Response[v0.Assistant], error) {
	return c.updateAssistant.CallUnary(ctx, req)
}

// DeleteAssistant calls ai.assistants.v0.Assistants.DeleteAssistant.
func (c *assistantsClient) DeleteAssistant(ctx context.Context, req *connect.Request[v0.DeleteAssistantRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteAssistant.CallUnary(ctx, req)
}

// TestAssistantPermissions calls ai.assistants.v0.Assistants.TestAssistantPermissions.
func (c *assistantsClient) TestAssistantPermissions(ctx context.Context, req *connect.Request[v0.TestAssistantPermissionsRequest]) (*connect.Response[v0.TestAssistantPermissionsResponse], error) {
	return c.testAssistantPermissions.CallUnary(ctx, req)
}

// CreateThread calls ai.assistants.v0.Assistants.CreateThread.
func (c *assistantsClient) CreateThread(ctx context.Context, req *connect.Request[v0.CreateThreadRequest]) (*connect.Response[v0.Thread], error) {
	return c.createThread.CallUnary(ctx, req)
}

// GetThread calls ai.assistants.v0.Assistants.GetThread.
func (c *assistantsClient) GetThread(ctx context.Context, req *connect.Request[v0.GetThreadRequest]) (*connect.Response[v0.Thread], error) {
	return c.getThread.CallUnary(ctx, req)
}

// ListThreads calls ai.assistants.v0.Assistants.ListThreads.
func (c *assistantsClient) ListThreads(ctx context.Context, req *connect.Request[v0.ListThreadsRequest]) (*connect.Response[v0.ListThreadsResponse], error) {
	return c.listThreads.CallUnary(ctx, req)
}

// UpdateThread calls ai.assistants.v0.Assistants.UpdateThread.
func (c *assistantsClient) UpdateThread(ctx context.Context, req *connect.Request[v0.UpdateThreadRequest]) (*connect.Response[v0.Thread], error) {
	return c.updateThread.CallUnary(ctx, req)
}

// DeleteThread calls ai.assistants.v0.Assistants.DeleteThread.
func (c *assistantsClient) DeleteThread(ctx context.Context, req *connect.Request[v0.DeleteThreadRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteThread.CallUnary(ctx, req)
}

// ShareThread calls ai.assistants.v0.Assistants.ShareThread.
func (c *assistantsClient) ShareThread(ctx context.Context, req *connect.Request[v0.ShareThreadRequest]) (*connect.Response[v0.Thread], error) {
	return c.shareThread.CallUnary(ctx, req)
}

// CreateMessage calls ai.assistants.v0.Assistants.CreateMessage.
func (c *assistantsClient) CreateMessage(ctx context.Context, req *connect.Request[v0.CreateMessageRequest]) (*connect.Response[v0.Message], error) {
	return c.createMessage.CallUnary(ctx, req)
}

// GetMessage calls ai.assistants.v0.Assistants.GetMessage.
func (c *assistantsClient) GetMessage(ctx context.Context, req *connect.Request[v0.GetMessageRequest]) (*connect.Response[v0.Message], error) {
	return c.getMessage.CallUnary(ctx, req)
}

// ListMessages calls ai.assistants.v0.Assistants.ListMessages.
func (c *assistantsClient) ListMessages(ctx context.Context, req *connect.Request[v0.ListMessagesRequest]) (*connect.Response[v0.ListMessagesResponse], error) {
	return c.listMessages.CallUnary(ctx, req)
}

// CreateThreadAndRun calls ai.assistants.v0.Assistants.CreateThreadAndRun.
func (c *assistantsClient) CreateThreadAndRun(ctx context.Context, req *connect.Request[v0.CreateThreadAndRunRequest]) (*connect.Response[v0.Run], error) {
	return c.createThreadAndRun.CallUnary(ctx, req)
}

// CreateRun calls ai.assistants.v0.Assistants.CreateRun.
func (c *assistantsClient) CreateRun(ctx context.Context, req *connect.Request[v0.CreateRunRequest]) (*connect.Response[v0.Run], error) {
	return c.createRun.CallUnary(ctx, req)
}

// GetRun calls ai.assistants.v0.Assistants.GetRun.
func (c *assistantsClient) GetRun(ctx context.Context, req *connect.Request[v0.GetRunRequest]) (*connect.Response[v0.Run], error) {
	return c.getRun.CallUnary(ctx, req)
}

// ListRuns calls ai.assistants.v0.Assistants.ListRuns.
func (c *assistantsClient) ListRuns(ctx context.Context, req *connect.Request[v0.ListRunsRequest]) (*connect.Response[v0.ListRunsResponse], error) {
	return c.listRuns.CallUnary(ctx, req)
}

// DeleteRun calls ai.assistants.v0.Assistants.DeleteRun.
func (c *assistantsClient) DeleteRun(ctx context.Context, req *connect.Request[v0.DeleteRunRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteRun.CallUnary(ctx, req)
}

// StreamRunResults calls ai.assistants.v0.Assistants.StreamRunResults.
func (c *assistantsClient) StreamRunResults(ctx context.Context, req *connect.Request[v0.StreamRunResultsRequest]) (*connect.ServerStreamForClient[v0.StreamRunResultsResponse], error) {
	return c.streamRunResults.CallServerStream(ctx, req)
}

// SubmitToolResponse calls ai.assistants.v0.Assistants.SubmitToolResponse.
func (c *assistantsClient) SubmitToolResponse(ctx context.Context, req *connect.Request[v0.SubmitToolResponsesRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.submitToolResponse.CallUnary(ctx, req)
}

// CreateRunFeedback calls ai.assistants.v0.Assistants.CreateRunFeedback.
func (c *assistantsClient) CreateRunFeedback(ctx context.Context, req *connect.Request[v0.CreateRunFeedbackRequest]) (*connect.Response[v0.RunFeedback], error) {
	return c.createRunFeedback.CallUnary(ctx, req)
}

// AssistantsHandler is an implementation of the ai.assistants.v0.Assistants service.
type AssistantsHandler interface {
	// Retrieves a list of chat engines and their available models.
	ListEngines(context.Context, *connect.Request[v0.ListEnginesRequest]) (*connect.Response[v0.ListEnginesResponse], error)
	// Creates an Assistant.
	CreateAssistant(context.Context, *connect.Request[v0.CreateAssistantRequest]) (*connect.Response[v0.Assistant], error)
	// Retrieves an Assistant by ID.
	GetAssistant(context.Context, *connect.Request[v0.GetAssistantRequest]) (*connect.Response[v0.Assistant], error)
	// Lists Assistants.
	ListAssistants(context.Context, *connect.Request[v0.ListAssistantsRequest]) (*connect.Response[v0.ListAssistantsResponse], error)
	// Updates an Assistant.
	UpdateAssistant(context.Context, *connect.Request[v0.UpdateAssistantRequest]) (*connect.Response[v0.Assistant], error)
	// Deletes an Assistant.
	DeleteAssistant(context.Context, *connect.Request[v0.DeleteAssistantRequest]) (*connect.Response[emptypb.Empty], error)
	// Returns permissions that a caller has on the specified Assistant.
	// If the resource does not exist, this will return an empty set of
	// permissions, not a `NOT_FOUND` error.
	TestAssistantPermissions(context.Context, *connect.Request[v0.TestAssistantPermissionsRequest]) (*connect.Response[v0.TestAssistantPermissionsResponse], error)
	// Creates a Thread.
	CreateThread(context.Context, *connect.Request[v0.CreateThreadRequest]) (*connect.Response[v0.Thread], error)
	// Retrieves a Thread By ID.
	GetThread(context.Context, *connect.Request[v0.GetThreadRequest]) (*connect.Response[v0.Thread], error)
	// Lists Threads.
	ListThreads(context.Context, *connect.Request[v0.ListThreadsRequest]) (*connect.Response[v0.ListThreadsResponse], error)
	// Update a Thread.
	UpdateThread(context.Context, *connect.Request[v0.UpdateThreadRequest]) (*connect.Response[v0.Thread], error)
	// Deletes a Thread.
	DeleteThread(context.Context, *connect.Request[v0.DeleteThreadRequest]) (*connect.Response[emptypb.Empty], error)
	// Snapshots a thread and marks it as shared.
	// Shared threads are immutable and can be viewed by all users that have been provided the ID.
	ShareThread(context.Context, *connect.Request[v0.ShareThreadRequest]) (*connect.Response[v0.Thread], error)
	// Creates a Message in a Thread.
	CreateMessage(context.Context, *connect.Request[v0.CreateMessageRequest]) (*connect.Response[v0.Message], error)
	// Retrieves a Message by ID.
	GetMessage(context.Context, *connect.Request[v0.GetMessageRequest]) (*connect.Response[v0.Message], error)
	// Lists Messages in a Thread.
	ListMessages(context.Context, *connect.Request[v0.ListMessagesRequest]) (*connect.Response[v0.ListMessagesResponse], error)
	// Creates a Thread and then creates a Run on that Thread.
	CreateThreadAndRun(context.Context, *connect.Request[v0.CreateThreadAndRunRequest]) (*connect.Response[v0.Run], error)
	// Creates a Run on a Thread.
	CreateRun(context.Context, *connect.Request[v0.CreateRunRequest]) (*connect.Response[v0.Run], error)
	// Retrieves a Run by ID.
	GetRun(context.Context, *connect.Request[v0.GetRunRequest]) (*connect.Response[v0.Run], error)
	// Lists Runs.
	ListRuns(context.Context, *connect.Request[v0.ListRunsRequest]) (*connect.Response[v0.ListRunsResponse], error)
	// Deletes a Run.
	DeleteRun(context.Context, *connect.Request[v0.DeleteRunRequest]) (*connect.Response[emptypb.Empty], error)
	// Streams the results generated by a Run.
	StreamRunResults(context.Context, *connect.Request[v0.StreamRunResultsRequest], *connect.ServerStream[v0.StreamRunResultsResponse]) error
	// Submits on or more responses to ToolCalls required by a Run.
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	SubmitToolResponse(context.Context, *connect.Request[v0.SubmitToolResponsesRequest]) (*connect.Response[emptypb.Empty], error)
	// Creates a feedback entry for a Run.
	CreateRunFeedback(context.Context, *connect.Request[v0.CreateRunFeedbackRequest]) (*connect.Response[v0.RunFeedback], error)
}

// NewAssistantsHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAssistantsHandler(svc AssistantsHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	assistantsListEnginesHandler := connect.NewUnaryHandler(
		AssistantsListEnginesProcedure,
		svc.ListEngines,
		connect.WithSchema(assistantsListEnginesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsCreateAssistantHandler := connect.NewUnaryHandler(
		AssistantsCreateAssistantProcedure,
		svc.CreateAssistant,
		connect.WithSchema(assistantsCreateAssistantMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsGetAssistantHandler := connect.NewUnaryHandler(
		AssistantsGetAssistantProcedure,
		svc.GetAssistant,
		connect.WithSchema(assistantsGetAssistantMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsListAssistantsHandler := connect.NewUnaryHandler(
		AssistantsListAssistantsProcedure,
		svc.ListAssistants,
		connect.WithSchema(assistantsListAssistantsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsUpdateAssistantHandler := connect.NewUnaryHandler(
		AssistantsUpdateAssistantProcedure,
		svc.UpdateAssistant,
		connect.WithSchema(assistantsUpdateAssistantMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsDeleteAssistantHandler := connect.NewUnaryHandler(
		AssistantsDeleteAssistantProcedure,
		svc.DeleteAssistant,
		connect.WithSchema(assistantsDeleteAssistantMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsTestAssistantPermissionsHandler := connect.NewUnaryHandler(
		AssistantsTestAssistantPermissionsProcedure,
		svc.TestAssistantPermissions,
		connect.WithSchema(assistantsTestAssistantPermissionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsCreateThreadHandler := connect.NewUnaryHandler(
		AssistantsCreateThreadProcedure,
		svc.CreateThread,
		connect.WithSchema(assistantsCreateThreadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsGetThreadHandler := connect.NewUnaryHandler(
		AssistantsGetThreadProcedure,
		svc.GetThread,
		connect.WithSchema(assistantsGetThreadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsListThreadsHandler := connect.NewUnaryHandler(
		AssistantsListThreadsProcedure,
		svc.ListThreads,
		connect.WithSchema(assistantsListThreadsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsUpdateThreadHandler := connect.NewUnaryHandler(
		AssistantsUpdateThreadProcedure,
		svc.UpdateThread,
		connect.WithSchema(assistantsUpdateThreadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsDeleteThreadHandler := connect.NewUnaryHandler(
		AssistantsDeleteThreadProcedure,
		svc.DeleteThread,
		connect.WithSchema(assistantsDeleteThreadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsShareThreadHandler := connect.NewUnaryHandler(
		AssistantsShareThreadProcedure,
		svc.ShareThread,
		connect.WithSchema(assistantsShareThreadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsCreateMessageHandler := connect.NewUnaryHandler(
		AssistantsCreateMessageProcedure,
		svc.CreateMessage,
		connect.WithSchema(assistantsCreateMessageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsGetMessageHandler := connect.NewUnaryHandler(
		AssistantsGetMessageProcedure,
		svc.GetMessage,
		connect.WithSchema(assistantsGetMessageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsListMessagesHandler := connect.NewUnaryHandler(
		AssistantsListMessagesProcedure,
		svc.ListMessages,
		connect.WithSchema(assistantsListMessagesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsCreateThreadAndRunHandler := connect.NewUnaryHandler(
		AssistantsCreateThreadAndRunProcedure,
		svc.CreateThreadAndRun,
		connect.WithSchema(assistantsCreateThreadAndRunMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsCreateRunHandler := connect.NewUnaryHandler(
		AssistantsCreateRunProcedure,
		svc.CreateRun,
		connect.WithSchema(assistantsCreateRunMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsGetRunHandler := connect.NewUnaryHandler(
		AssistantsGetRunProcedure,
		svc.GetRun,
		connect.WithSchema(assistantsGetRunMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsListRunsHandler := connect.NewUnaryHandler(
		AssistantsListRunsProcedure,
		svc.ListRuns,
		connect.WithSchema(assistantsListRunsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsDeleteRunHandler := connect.NewUnaryHandler(
		AssistantsDeleteRunProcedure,
		svc.DeleteRun,
		connect.WithSchema(assistantsDeleteRunMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsStreamRunResultsHandler := connect.NewServerStreamHandler(
		AssistantsStreamRunResultsProcedure,
		svc.StreamRunResults,
		connect.WithSchema(assistantsStreamRunResultsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsSubmitToolResponseHandler := connect.NewUnaryHandler(
		AssistantsSubmitToolResponseProcedure,
		svc.SubmitToolResponse,
		connect.WithSchema(assistantsSubmitToolResponseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assistantsCreateRunFeedbackHandler := connect.NewUnaryHandler(
		AssistantsCreateRunFeedbackProcedure,
		svc.CreateRunFeedback,
		connect.WithSchema(assistantsCreateRunFeedbackMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ai.assistants.v0.Assistants/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AssistantsListEnginesProcedure:
			assistantsListEnginesHandler.ServeHTTP(w, r)
		case AssistantsCreateAssistantProcedure:
			assistantsCreateAssistantHandler.ServeHTTP(w, r)
		case AssistantsGetAssistantProcedure:
			assistantsGetAssistantHandler.ServeHTTP(w, r)
		case AssistantsListAssistantsProcedure:
			assistantsListAssistantsHandler.ServeHTTP(w, r)
		case AssistantsUpdateAssistantProcedure:
			assistantsUpdateAssistantHandler.ServeHTTP(w, r)
		case AssistantsDeleteAssistantProcedure:
			assistantsDeleteAssistantHandler.ServeHTTP(w, r)
		case AssistantsTestAssistantPermissionsProcedure:
			assistantsTestAssistantPermissionsHandler.ServeHTTP(w, r)
		case AssistantsCreateThreadProcedure:
			assistantsCreateThreadHandler.ServeHTTP(w, r)
		case AssistantsGetThreadProcedure:
			assistantsGetThreadHandler.ServeHTTP(w, r)
		case AssistantsListThreadsProcedure:
			assistantsListThreadsHandler.ServeHTTP(w, r)
		case AssistantsUpdateThreadProcedure:
			assistantsUpdateThreadHandler.ServeHTTP(w, r)
		case AssistantsDeleteThreadProcedure:
			assistantsDeleteThreadHandler.ServeHTTP(w, r)
		case AssistantsShareThreadProcedure:
			assistantsShareThreadHandler.ServeHTTP(w, r)
		case AssistantsCreateMessageProcedure:
			assistantsCreateMessageHandler.ServeHTTP(w, r)
		case AssistantsGetMessageProcedure:
			assistantsGetMessageHandler.ServeHTTP(w, r)
		case AssistantsListMessagesProcedure:
			assistantsListMessagesHandler.ServeHTTP(w, r)
		case AssistantsCreateThreadAndRunProcedure:
			assistantsCreateThreadAndRunHandler.ServeHTTP(w, r)
		case AssistantsCreateRunProcedure:
			assistantsCreateRunHandler.ServeHTTP(w, r)
		case AssistantsGetRunProcedure:
			assistantsGetRunHandler.ServeHTTP(w, r)
		case AssistantsListRunsProcedure:
			assistantsListRunsHandler.ServeHTTP(w, r)
		case AssistantsDeleteRunProcedure:
			assistantsDeleteRunHandler.ServeHTTP(w, r)
		case AssistantsStreamRunResultsProcedure:
			assistantsStreamRunResultsHandler.ServeHTTP(w, r)
		case AssistantsSubmitToolResponseProcedure:
			assistantsSubmitToolResponseHandler.ServeHTTP(w, r)
		case AssistantsCreateRunFeedbackProcedure:
			assistantsCreateRunFeedbackHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAssistantsHandler returns CodeUnimplemented from all methods.
type UnimplementedAssistantsHandler struct{}

func (UnimplementedAssistantsHandler) ListEngines(context.Context, *connect.Request[v0.ListEnginesRequest]) (*connect.Response[v0.ListEnginesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.ListEngines is not implemented"))
}

func (UnimplementedAssistantsHandler) CreateAssistant(context.Context, *connect.Request[v0.CreateAssistantRequest]) (*connect.Response[v0.Assistant], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.CreateAssistant is not implemented"))
}

func (UnimplementedAssistantsHandler) GetAssistant(context.Context, *connect.Request[v0.GetAssistantRequest]) (*connect.Response[v0.Assistant], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.GetAssistant is not implemented"))
}

func (UnimplementedAssistantsHandler) ListAssistants(context.Context, *connect.Request[v0.ListAssistantsRequest]) (*connect.Response[v0.ListAssistantsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.ListAssistants is not implemented"))
}

func (UnimplementedAssistantsHandler) UpdateAssistant(context.Context, *connect.Request[v0.UpdateAssistantRequest]) (*connect.Response[v0.Assistant], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.UpdateAssistant is not implemented"))
}

func (UnimplementedAssistantsHandler) DeleteAssistant(context.Context, *connect.Request[v0.DeleteAssistantRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.DeleteAssistant is not implemented"))
}

func (UnimplementedAssistantsHandler) TestAssistantPermissions(context.Context, *connect.Request[v0.TestAssistantPermissionsRequest]) (*connect.Response[v0.TestAssistantPermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.TestAssistantPermissions is not implemented"))
}

func (UnimplementedAssistantsHandler) CreateThread(context.Context, *connect.Request[v0.CreateThreadRequest]) (*connect.Response[v0.Thread], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.CreateThread is not implemented"))
}

func (UnimplementedAssistantsHandler) GetThread(context.Context, *connect.Request[v0.GetThreadRequest]) (*connect.Response[v0.Thread], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.GetThread is not implemented"))
}

func (UnimplementedAssistantsHandler) ListThreads(context.Context, *connect.Request[v0.ListThreadsRequest]) (*connect.Response[v0.ListThreadsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.ListThreads is not implemented"))
}

func (UnimplementedAssistantsHandler) UpdateThread(context.Context, *connect.Request[v0.UpdateThreadRequest]) (*connect.Response[v0.Thread], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.UpdateThread is not implemented"))
}

func (UnimplementedAssistantsHandler) DeleteThread(context.Context, *connect.Request[v0.DeleteThreadRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.DeleteThread is not implemented"))
}

func (UnimplementedAssistantsHandler) ShareThread(context.Context, *connect.Request[v0.ShareThreadRequest]) (*connect.Response[v0.Thread], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.ShareThread is not implemented"))
}

func (UnimplementedAssistantsHandler) CreateMessage(context.Context, *connect.Request[v0.CreateMessageRequest]) (*connect.Response[v0.Message], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.CreateMessage is not implemented"))
}

func (UnimplementedAssistantsHandler) GetMessage(context.Context, *connect.Request[v0.GetMessageRequest]) (*connect.Response[v0.Message], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.GetMessage is not implemented"))
}

func (UnimplementedAssistantsHandler) ListMessages(context.Context, *connect.Request[v0.ListMessagesRequest]) (*connect.Response[v0.ListMessagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.ListMessages is not implemented"))
}

func (UnimplementedAssistantsHandler) CreateThreadAndRun(context.Context, *connect.Request[v0.CreateThreadAndRunRequest]) (*connect.Response[v0.Run], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.CreateThreadAndRun is not implemented"))
}

func (UnimplementedAssistantsHandler) CreateRun(context.Context, *connect.Request[v0.CreateRunRequest]) (*connect.Response[v0.Run], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.CreateRun is not implemented"))
}

func (UnimplementedAssistantsHandler) GetRun(context.Context, *connect.Request[v0.GetRunRequest]) (*connect.Response[v0.Run], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.GetRun is not implemented"))
}

func (UnimplementedAssistantsHandler) ListRuns(context.Context, *connect.Request[v0.ListRunsRequest]) (*connect.Response[v0.ListRunsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.ListRuns is not implemented"))
}

func (UnimplementedAssistantsHandler) DeleteRun(context.Context, *connect.Request[v0.DeleteRunRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.DeleteRun is not implemented"))
}

func (UnimplementedAssistantsHandler) StreamRunResults(context.Context, *connect.Request[v0.StreamRunResultsRequest], *connect.ServerStream[v0.StreamRunResultsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.StreamRunResults is not implemented"))
}

func (UnimplementedAssistantsHandler) SubmitToolResponse(context.Context, *connect.Request[v0.SubmitToolResponsesRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.SubmitToolResponse is not implemented"))
}

func (UnimplementedAssistantsHandler) CreateRunFeedback(context.Context, *connect.Request[v0.CreateRunFeedbackRequest]) (*connect.Response[v0.RunFeedback], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.assistants.v0.Assistants.CreateRunFeedback is not implemented"))
}
