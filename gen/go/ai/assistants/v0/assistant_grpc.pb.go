// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ai/assistants/v0/assistant.proto

// buf:lint:ignore PACKAGE_VERSION_SUFFIX

package assistantspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Assistants_ListEngines_FullMethodName              = "/ai.assistants.v0.Assistants/ListEngines"
	Assistants_CreateAssistant_FullMethodName          = "/ai.assistants.v0.Assistants/CreateAssistant"
	Assistants_GetAssistant_FullMethodName             = "/ai.assistants.v0.Assistants/GetAssistant"
	Assistants_ListAssistants_FullMethodName           = "/ai.assistants.v0.Assistants/ListAssistants"
	Assistants_UpdateAssistant_FullMethodName          = "/ai.assistants.v0.Assistants/UpdateAssistant"
	Assistants_DeleteAssistant_FullMethodName          = "/ai.assistants.v0.Assistants/DeleteAssistant"
	Assistants_TestAssistantPermissions_FullMethodName = "/ai.assistants.v0.Assistants/TestAssistantPermissions"
	Assistants_CreateThread_FullMethodName             = "/ai.assistants.v0.Assistants/CreateThread"
	Assistants_GetThread_FullMethodName                = "/ai.assistants.v0.Assistants/GetThread"
	Assistants_ListThreads_FullMethodName              = "/ai.assistants.v0.Assistants/ListThreads"
	Assistants_UpdateThread_FullMethodName             = "/ai.assistants.v0.Assistants/UpdateThread"
	Assistants_DeleteThread_FullMethodName             = "/ai.assistants.v0.Assistants/DeleteThread"
	Assistants_ShareThread_FullMethodName              = "/ai.assistants.v0.Assistants/ShareThread"
	Assistants_CreateMessage_FullMethodName            = "/ai.assistants.v0.Assistants/CreateMessage"
	Assistants_GetMessage_FullMethodName               = "/ai.assistants.v0.Assistants/GetMessage"
	Assistants_ListMessages_FullMethodName             = "/ai.assistants.v0.Assistants/ListMessages"
	Assistants_CreateThreadAndRun_FullMethodName       = "/ai.assistants.v0.Assistants/CreateThreadAndRun"
	Assistants_CreateRun_FullMethodName                = "/ai.assistants.v0.Assistants/CreateRun"
	Assistants_GetRun_FullMethodName                   = "/ai.assistants.v0.Assistants/GetRun"
	Assistants_ListRuns_FullMethodName                 = "/ai.assistants.v0.Assistants/ListRuns"
	Assistants_DeleteRun_FullMethodName                = "/ai.assistants.v0.Assistants/DeleteRun"
	Assistants_StreamRunResults_FullMethodName         = "/ai.assistants.v0.Assistants/StreamRunResults"
	Assistants_SubmitToolResponse_FullMethodName       = "/ai.assistants.v0.Assistants/SubmitToolResponse"
	Assistants_CreateRunFeedback_FullMethodName        = "/ai.assistants.v0.Assistants/CreateRunFeedback"
)

// AssistantsClient is the client API for Assistants service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssistantsClient interface {
	// Retrieves a list of chat engines and their available models.
	ListEngines(ctx context.Context, in *ListEnginesRequest, opts ...grpc.CallOption) (*ListEnginesResponse, error)
	// Creates an Assistant.
	CreateAssistant(ctx context.Context, in *CreateAssistantRequest, opts ...grpc.CallOption) (*Assistant, error)
	// Retrieves an Assistant by ID.
	GetAssistant(ctx context.Context, in *GetAssistantRequest, opts ...grpc.CallOption) (*Assistant, error)
	// Lists Assistants.
	ListAssistants(ctx context.Context, in *ListAssistantsRequest, opts ...grpc.CallOption) (*ListAssistantsResponse, error)
	// Updates an Assistant.
	UpdateAssistant(ctx context.Context, in *UpdateAssistantRequest, opts ...grpc.CallOption) (*Assistant, error)
	// Deletes an Assistant.
	DeleteAssistant(ctx context.Context, in *DeleteAssistantRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns permissions that a caller has on the specified Assistant.
	// If the resource does not exist, this will return an empty set of
	// permissions, not a `NOT_FOUND` error.
	TestAssistantPermissions(ctx context.Context, in *TestAssistantPermissionsRequest, opts ...grpc.CallOption) (*TestAssistantPermissionsResponse, error)
	// Creates a Thread.
	CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*Thread, error)
	// Retrieves a Thread By ID.
	GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*Thread, error)
	// Lists Threads.
	ListThreads(ctx context.Context, in *ListThreadsRequest, opts ...grpc.CallOption) (*ListThreadsResponse, error)
	// Update a Thread.
	UpdateThread(ctx context.Context, in *UpdateThreadRequest, opts ...grpc.CallOption) (*Thread, error)
	// Deletes a Thread.
	DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Snapshots a thread and marks it as shared.
	// Shared threads are immutable and can be viewed by all users that have been provided the ID.
	ShareThread(ctx context.Context, in *ShareThreadRequest, opts ...grpc.CallOption) (*Thread, error)
	// Creates a Message in a Thread.
	CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*Message, error)
	// Retrieves a Message by ID.
	GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*Message, error)
	// Lists Messages in a Thread.
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	// Creates a Thread and then creates a Run on that Thread.
	CreateThreadAndRun(ctx context.Context, in *CreateThreadAndRunRequest, opts ...grpc.CallOption) (*Run, error)
	// Creates a Run on a Thread.
	CreateRun(ctx context.Context, in *CreateRunRequest, opts ...grpc.CallOption) (*Run, error)
	// Retrieves a Run by ID.
	GetRun(ctx context.Context, in *GetRunRequest, opts ...grpc.CallOption) (*Run, error)
	// Lists Runs.
	ListRuns(ctx context.Context, in *ListRunsRequest, opts ...grpc.CallOption) (*ListRunsResponse, error)
	// Deletes a Run.
	DeleteRun(ctx context.Context, in *DeleteRunRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Streams the results generated by a Run.
	StreamRunResults(ctx context.Context, in *StreamRunResultsRequest, opts ...grpc.CallOption) (Assistants_StreamRunResultsClient, error)
	// Submits on or more responses to ToolCalls required by a Run.
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	SubmitToolResponse(ctx context.Context, in *SubmitToolResponsesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Creates a feedback entry for a Run.
	CreateRunFeedback(ctx context.Context, in *CreateRunFeedbackRequest, opts ...grpc.CallOption) (*RunFeedback, error)
}

type assistantsClient struct {
	cc grpc.ClientConnInterface
}

func NewAssistantsClient(cc grpc.ClientConnInterface) AssistantsClient {
	return &assistantsClient{cc}
}

func (c *assistantsClient) ListEngines(ctx context.Context, in *ListEnginesRequest, opts ...grpc.CallOption) (*ListEnginesResponse, error) {
	out := new(ListEnginesResponse)
	err := c.cc.Invoke(ctx, Assistants_ListEngines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) CreateAssistant(ctx context.Context, in *CreateAssistantRequest, opts ...grpc.CallOption) (*Assistant, error) {
	out := new(Assistant)
	err := c.cc.Invoke(ctx, Assistants_CreateAssistant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) GetAssistant(ctx context.Context, in *GetAssistantRequest, opts ...grpc.CallOption) (*Assistant, error) {
	out := new(Assistant)
	err := c.cc.Invoke(ctx, Assistants_GetAssistant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) ListAssistants(ctx context.Context, in *ListAssistantsRequest, opts ...grpc.CallOption) (*ListAssistantsResponse, error) {
	out := new(ListAssistantsResponse)
	err := c.cc.Invoke(ctx, Assistants_ListAssistants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) UpdateAssistant(ctx context.Context, in *UpdateAssistantRequest, opts ...grpc.CallOption) (*Assistant, error) {
	out := new(Assistant)
	err := c.cc.Invoke(ctx, Assistants_UpdateAssistant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) DeleteAssistant(ctx context.Context, in *DeleteAssistantRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Assistants_DeleteAssistant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) TestAssistantPermissions(ctx context.Context, in *TestAssistantPermissionsRequest, opts ...grpc.CallOption) (*TestAssistantPermissionsResponse, error) {
	out := new(TestAssistantPermissionsResponse)
	err := c.cc.Invoke(ctx, Assistants_TestAssistantPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*Thread, error) {
	out := new(Thread)
	err := c.cc.Invoke(ctx, Assistants_CreateThread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*Thread, error) {
	out := new(Thread)
	err := c.cc.Invoke(ctx, Assistants_GetThread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) ListThreads(ctx context.Context, in *ListThreadsRequest, opts ...grpc.CallOption) (*ListThreadsResponse, error) {
	out := new(ListThreadsResponse)
	err := c.cc.Invoke(ctx, Assistants_ListThreads_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) UpdateThread(ctx context.Context, in *UpdateThreadRequest, opts ...grpc.CallOption) (*Thread, error) {
	out := new(Thread)
	err := c.cc.Invoke(ctx, Assistants_UpdateThread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Assistants_DeleteThread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) ShareThread(ctx context.Context, in *ShareThreadRequest, opts ...grpc.CallOption) (*Thread, error) {
	out := new(Thread)
	err := c.cc.Invoke(ctx, Assistants_ShareThread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, Assistants_CreateMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, Assistants_GetMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, Assistants_ListMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) CreateThreadAndRun(ctx context.Context, in *CreateThreadAndRunRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, Assistants_CreateThreadAndRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) CreateRun(ctx context.Context, in *CreateRunRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, Assistants_CreateRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) GetRun(ctx context.Context, in *GetRunRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, Assistants_GetRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) ListRuns(ctx context.Context, in *ListRunsRequest, opts ...grpc.CallOption) (*ListRunsResponse, error) {
	out := new(ListRunsResponse)
	err := c.cc.Invoke(ctx, Assistants_ListRuns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) DeleteRun(ctx context.Context, in *DeleteRunRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Assistants_DeleteRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) StreamRunResults(ctx context.Context, in *StreamRunResultsRequest, opts ...grpc.CallOption) (Assistants_StreamRunResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Assistants_ServiceDesc.Streams[0], Assistants_StreamRunResults_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &assistantsStreamRunResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Assistants_StreamRunResultsClient interface {
	Recv() (*StreamRunResultsResponse, error)
	grpc.ClientStream
}

type assistantsStreamRunResultsClient struct {
	grpc.ClientStream
}

func (x *assistantsStreamRunResultsClient) Recv() (*StreamRunResultsResponse, error) {
	m := new(StreamRunResultsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *assistantsClient) SubmitToolResponse(ctx context.Context, in *SubmitToolResponsesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Assistants_SubmitToolResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantsClient) CreateRunFeedback(ctx context.Context, in *CreateRunFeedbackRequest, opts ...grpc.CallOption) (*RunFeedback, error) {
	out := new(RunFeedback)
	err := c.cc.Invoke(ctx, Assistants_CreateRunFeedback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssistantsServer is the server API for Assistants service.
// All implementations must embed UnimplementedAssistantsServer
// for forward compatibility
type AssistantsServer interface {
	// Retrieves a list of chat engines and their available models.
	ListEngines(context.Context, *ListEnginesRequest) (*ListEnginesResponse, error)
	// Creates an Assistant.
	CreateAssistant(context.Context, *CreateAssistantRequest) (*Assistant, error)
	// Retrieves an Assistant by ID.
	GetAssistant(context.Context, *GetAssistantRequest) (*Assistant, error)
	// Lists Assistants.
	ListAssistants(context.Context, *ListAssistantsRequest) (*ListAssistantsResponse, error)
	// Updates an Assistant.
	UpdateAssistant(context.Context, *UpdateAssistantRequest) (*Assistant, error)
	// Deletes an Assistant.
	DeleteAssistant(context.Context, *DeleteAssistantRequest) (*emptypb.Empty, error)
	// Returns permissions that a caller has on the specified Assistant.
	// If the resource does not exist, this will return an empty set of
	// permissions, not a `NOT_FOUND` error.
	TestAssistantPermissions(context.Context, *TestAssistantPermissionsRequest) (*TestAssistantPermissionsResponse, error)
	// Creates a Thread.
	CreateThread(context.Context, *CreateThreadRequest) (*Thread, error)
	// Retrieves a Thread By ID.
	GetThread(context.Context, *GetThreadRequest) (*Thread, error)
	// Lists Threads.
	ListThreads(context.Context, *ListThreadsRequest) (*ListThreadsResponse, error)
	// Update a Thread.
	UpdateThread(context.Context, *UpdateThreadRequest) (*Thread, error)
	// Deletes a Thread.
	DeleteThread(context.Context, *DeleteThreadRequest) (*emptypb.Empty, error)
	// Snapshots a thread and marks it as shared.
	// Shared threads are immutable and can be viewed by all users that have been provided the ID.
	ShareThread(context.Context, *ShareThreadRequest) (*Thread, error)
	// Creates a Message in a Thread.
	CreateMessage(context.Context, *CreateMessageRequest) (*Message, error)
	// Retrieves a Message by ID.
	GetMessage(context.Context, *GetMessageRequest) (*Message, error)
	// Lists Messages in a Thread.
	ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error)
	// Creates a Thread and then creates a Run on that Thread.
	CreateThreadAndRun(context.Context, *CreateThreadAndRunRequest) (*Run, error)
	// Creates a Run on a Thread.
	CreateRun(context.Context, *CreateRunRequest) (*Run, error)
	// Retrieves a Run by ID.
	GetRun(context.Context, *GetRunRequest) (*Run, error)
	// Lists Runs.
	ListRuns(context.Context, *ListRunsRequest) (*ListRunsResponse, error)
	// Deletes a Run.
	DeleteRun(context.Context, *DeleteRunRequest) (*emptypb.Empty, error)
	// Streams the results generated by a Run.
	StreamRunResults(*StreamRunResultsRequest, Assistants_StreamRunResultsServer) error
	// Submits on or more responses to ToolCalls required by a Run.
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	SubmitToolResponse(context.Context, *SubmitToolResponsesRequest) (*emptypb.Empty, error)
	// Creates a feedback entry for a Run.
	CreateRunFeedback(context.Context, *CreateRunFeedbackRequest) (*RunFeedback, error)
	mustEmbedUnimplementedAssistantsServer()
}

// UnimplementedAssistantsServer must be embedded to have forward compatible implementations.
type UnimplementedAssistantsServer struct {
}

func (UnimplementedAssistantsServer) ListEngines(context.Context, *ListEnginesRequest) (*ListEnginesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEngines not implemented")
}
func (UnimplementedAssistantsServer) CreateAssistant(context.Context, *CreateAssistantRequest) (*Assistant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssistant not implemented")
}
func (UnimplementedAssistantsServer) GetAssistant(context.Context, *GetAssistantRequest) (*Assistant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssistant not implemented")
}
func (UnimplementedAssistantsServer) ListAssistants(context.Context, *ListAssistantsRequest) (*ListAssistantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssistants not implemented")
}
func (UnimplementedAssistantsServer) UpdateAssistant(context.Context, *UpdateAssistantRequest) (*Assistant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssistant not implemented")
}
func (UnimplementedAssistantsServer) DeleteAssistant(context.Context, *DeleteAssistantRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssistant not implemented")
}
func (UnimplementedAssistantsServer) TestAssistantPermissions(context.Context, *TestAssistantPermissionsRequest) (*TestAssistantPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestAssistantPermissions not implemented")
}
func (UnimplementedAssistantsServer) CreateThread(context.Context, *CreateThreadRequest) (*Thread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThread not implemented")
}
func (UnimplementedAssistantsServer) GetThread(context.Context, *GetThreadRequest) (*Thread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThread not implemented")
}
func (UnimplementedAssistantsServer) ListThreads(context.Context, *ListThreadsRequest) (*ListThreadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListThreads not implemented")
}
func (UnimplementedAssistantsServer) UpdateThread(context.Context, *UpdateThreadRequest) (*Thread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateThread not implemented")
}
func (UnimplementedAssistantsServer) DeleteThread(context.Context, *DeleteThreadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteThread not implemented")
}
func (UnimplementedAssistantsServer) ShareThread(context.Context, *ShareThreadRequest) (*Thread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareThread not implemented")
}
func (UnimplementedAssistantsServer) CreateMessage(context.Context, *CreateMessageRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedAssistantsServer) GetMessage(context.Context, *GetMessageRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedAssistantsServer) ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedAssistantsServer) CreateThreadAndRun(context.Context, *CreateThreadAndRunRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThreadAndRun not implemented")
}
func (UnimplementedAssistantsServer) CreateRun(context.Context, *CreateRunRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRun not implemented")
}
func (UnimplementedAssistantsServer) GetRun(context.Context, *GetRunRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRun not implemented")
}
func (UnimplementedAssistantsServer) ListRuns(context.Context, *ListRunsRequest) (*ListRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuns not implemented")
}
func (UnimplementedAssistantsServer) DeleteRun(context.Context, *DeleteRunRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRun not implemented")
}
func (UnimplementedAssistantsServer) StreamRunResults(*StreamRunResultsRequest, Assistants_StreamRunResultsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRunResults not implemented")
}
func (UnimplementedAssistantsServer) SubmitToolResponse(context.Context, *SubmitToolResponsesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitToolResponse not implemented")
}
func (UnimplementedAssistantsServer) CreateRunFeedback(context.Context, *CreateRunFeedbackRequest) (*RunFeedback, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRunFeedback not implemented")
}
func (UnimplementedAssistantsServer) mustEmbedUnimplementedAssistantsServer() {}

// UnsafeAssistantsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssistantsServer will
// result in compilation errors.
type UnsafeAssistantsServer interface {
	mustEmbedUnimplementedAssistantsServer()
}

func RegisterAssistantsServer(s grpc.ServiceRegistrar, srv AssistantsServer) {
	s.RegisterService(&Assistants_ServiceDesc, srv)
}

func _Assistants_ListEngines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnginesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).ListEngines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_ListEngines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).ListEngines(ctx, req.(*ListEnginesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_CreateAssistant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssistantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).CreateAssistant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_CreateAssistant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).CreateAssistant(ctx, req.(*CreateAssistantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_GetAssistant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssistantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).GetAssistant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_GetAssistant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).GetAssistant(ctx, req.(*GetAssistantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_ListAssistants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssistantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).ListAssistants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_ListAssistants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).ListAssistants(ctx, req.(*ListAssistantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_UpdateAssistant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssistantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).UpdateAssistant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_UpdateAssistant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).UpdateAssistant(ctx, req.(*UpdateAssistantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_DeleteAssistant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssistantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).DeleteAssistant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_DeleteAssistant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).DeleteAssistant(ctx, req.(*DeleteAssistantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_TestAssistantPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestAssistantPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).TestAssistantPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_TestAssistantPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).TestAssistantPermissions(ctx, req.(*TestAssistantPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_CreateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_CreateThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).CreateThread(ctx, req.(*CreateThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_GetThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).GetThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_GetThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).GetThread(ctx, req.(*GetThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_ListThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListThreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).ListThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_ListThreads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).ListThreads(ctx, req.(*ListThreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_UpdateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).UpdateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_UpdateThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).UpdateThread(ctx, req.(*UpdateThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_DeleteThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).DeleteThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_DeleteThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).DeleteThread(ctx, req.(*DeleteThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_ShareThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).ShareThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_ShareThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).ShareThread(ctx, req.(*ShareThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_CreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).CreateMessage(ctx, req.(*CreateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_GetMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).GetMessage(ctx, req.(*GetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).ListMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_CreateThreadAndRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThreadAndRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).CreateThreadAndRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_CreateThreadAndRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).CreateThreadAndRun(ctx, req.(*CreateThreadAndRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_CreateRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).CreateRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_CreateRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).CreateRun(ctx, req.(*CreateRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_GetRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).GetRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_GetRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).GetRun(ctx, req.(*GetRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_ListRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).ListRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_ListRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).ListRuns(ctx, req.(*ListRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_DeleteRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).DeleteRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_DeleteRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).DeleteRun(ctx, req.(*DeleteRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_StreamRunResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRunResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AssistantsServer).StreamRunResults(m, &assistantsStreamRunResultsServer{stream})
}

type Assistants_StreamRunResultsServer interface {
	Send(*StreamRunResultsResponse) error
	grpc.ServerStream
}

type assistantsStreamRunResultsServer struct {
	grpc.ServerStream
}

func (x *assistantsStreamRunResultsServer) Send(m *StreamRunResultsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Assistants_SubmitToolResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitToolResponsesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).SubmitToolResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_SubmitToolResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).SubmitToolResponse(ctx, req.(*SubmitToolResponsesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistants_CreateRunFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRunFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantsServer).CreateRunFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistants_CreateRunFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantsServer).CreateRunFeedback(ctx, req.(*CreateRunFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Assistants_ServiceDesc is the grpc.ServiceDesc for Assistants service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Assistants_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.assistants.v0.Assistants",
	HandlerType: (*AssistantsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEngines",
			Handler:    _Assistants_ListEngines_Handler,
		},
		{
			MethodName: "CreateAssistant",
			Handler:    _Assistants_CreateAssistant_Handler,
		},
		{
			MethodName: "GetAssistant",
			Handler:    _Assistants_GetAssistant_Handler,
		},
		{
			MethodName: "ListAssistants",
			Handler:    _Assistants_ListAssistants_Handler,
		},
		{
			MethodName: "UpdateAssistant",
			Handler:    _Assistants_UpdateAssistant_Handler,
		},
		{
			MethodName: "DeleteAssistant",
			Handler:    _Assistants_DeleteAssistant_Handler,
		},
		{
			MethodName: "TestAssistantPermissions",
			Handler:    _Assistants_TestAssistantPermissions_Handler,
		},
		{
			MethodName: "CreateThread",
			Handler:    _Assistants_CreateThread_Handler,
		},
		{
			MethodName: "GetThread",
			Handler:    _Assistants_GetThread_Handler,
		},
		{
			MethodName: "ListThreads",
			Handler:    _Assistants_ListThreads_Handler,
		},
		{
			MethodName: "UpdateThread",
			Handler:    _Assistants_UpdateThread_Handler,
		},
		{
			MethodName: "DeleteThread",
			Handler:    _Assistants_DeleteThread_Handler,
		},
		{
			MethodName: "ShareThread",
			Handler:    _Assistants_ShareThread_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _Assistants_CreateMessage_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _Assistants_GetMessage_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _Assistants_ListMessages_Handler,
		},
		{
			MethodName: "CreateThreadAndRun",
			Handler:    _Assistants_CreateThreadAndRun_Handler,
		},
		{
			MethodName: "CreateRun",
			Handler:    _Assistants_CreateRun_Handler,
		},
		{
			MethodName: "GetRun",
			Handler:    _Assistants_GetRun_Handler,
		},
		{
			MethodName: "ListRuns",
			Handler:    _Assistants_ListRuns_Handler,
		},
		{
			MethodName: "DeleteRun",
			Handler:    _Assistants_DeleteRun_Handler,
		},
		{
			MethodName: "SubmitToolResponse",
			Handler:    _Assistants_SubmitToolResponse_Handler,
		},
		{
			MethodName: "CreateRunFeedback",
			Handler:    _Assistants_CreateRunFeedback_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRunResults",
			Handler:       _Assistants_StreamRunResults_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ai/assistants/v0/assistant.proto",
}
