# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ai.audio.v0 import transcriber_pb2 as ai_dot_audio_dot_v0_dot_transcriber__pb2


class TranscriberStub(object):
    """Service for transcribing audio to text.
    buf:lint:ignore SERVICE_SUFFIX
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Transcribe = channel.unary_unary(
                '/ai.audio.v0.Transcriber/Transcribe',
                request_serializer=ai_dot_audio_dot_v0_dot_transcriber__pb2.TranscribeRequest.SerializeToString,
                response_deserializer=ai_dot_audio_dot_v0_dot_transcriber__pb2.Transcription.FromString,
                )


class TranscriberServicer(object):
    """Service for transcribing audio to text.
    buf:lint:ignore SERVICE_SUFFIX
    """

    def Transcribe(self, request, context):
        """buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TranscriberServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Transcribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Transcribe,
                    request_deserializer=ai_dot_audio_dot_v0_dot_transcriber__pb2.TranscribeRequest.FromString,
                    response_serializer=ai_dot_audio_dot_v0_dot_transcriber__pb2.Transcription.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ai.audio.v0.Transcriber', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Transcriber(object):
    """Service for transcribing audio to text.
    buf:lint:ignore SERVICE_SUFFIX
    """

    @staticmethod
    def Transcribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.audio.v0.Transcriber/Transcribe',
            ai_dot_audio_dot_v0_dot_transcriber__pb2.TranscribeRequest.SerializeToString,
            ai_dot_audio_dot_v0_dot_transcriber__pb2.Transcription.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
